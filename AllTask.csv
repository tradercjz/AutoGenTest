id,负责人,是否完成（无法完成备注）,function,question,prepareCode,runCode
1,嘉锋,,addColumn,"现有某物联网平台传感器采集表包含设备ID和读数两列，需对该表结构进行扩展:新增""温度单位""和""质量状态""两列，其中温度单位要求字符串类型，质量状态要求符号类型。已知原始传感器表变量名为sensorData，包含列[id, value]，请为其添加指定新列并将结果存入result。","sensorData = table(1..5 as id, rand(100.0,5) as value)","addColumn(sensorData, [""temperatureUnit"", ""status""], [STRING, SYMBOL])
result = sensorData"
2,嘉锋,,appendForJoin,"在股票交易场景中，某流处理引擎需要实时关联交易价格和成交量数据。左表包含时间戳、股票代码、价格字段（ts, symbol, price），右表包含时间戳、股票代码、成交量字段（ts, symbol, vol）。现需要将2023.01.01T09:30:00.001时刻的AMD股票价格数据（price=123.45）和相同时刻的成交量数据（vol=10000）注入处理引擎，如何获取包含价格、成交量和交易总额的实时计算结果？输入数据变量分别为leftData和rightData，输出结果存储在result变量。","leftTable = table(1:0, `ts`symbol`price, [TIMESTAMP, SYMBOL, DOUBLE])
rightTable = table(1:0, `ts`symbol`vol, [TIMESTAMP, SYMBOL, LONG])
outputTable = table(100:0, `ts`symbol`price`vol`amount, [TIMESTAMP, SYMBOL, DOUBLE, LONG, DOUBLE])

ejEngine = createEquiJoinEngine(
name=""tradeCalc"",
leftTable=leftTable,
rightTable=rightTable,
outputTable=outputTable,
metrics=<[price, vol, price*vol]>,
matchingColumn=`symbol,
timeColumn=`ts
)

leftData = table(2023.01.01T09:30:00.001 as ts, `AMD as symbol, 123.45 as price)
rightData = table(2023.01.01T09:30:00.001 as ts, `AMD as symbol, 10000 as vol)
","appendForJoin(ejEngine, true, leftData)
appendForJoin(ejEngine, false, rightData)
result = ejEngine.output
"
3,嘉锋,,bondCashflow,某投资者于2023年5月15日购入一张面值100元的贴现债券，到期日为2023年11月15日，采用实际/360日计数基准。请计算该债券的现金流分布，将结果存入result。输入数据格式:settlement为DATE类型2023.05.15，maturity为DATE类型2023.11.15，coupon数值型0.05，basis整型2。输出结果为单元素向量，数值为到期日支付的本金，赋值给变量result。,"settlement = 2023.05.15
maturity = 2023.11.15
coupon = 0.05
basis = 2
bondType = 1
","result = bondCashflow(settlement, maturity, coupon,, basis, bondType)
"
4,嘉锋,,brentq,"某5年期债券每年付息100元，到期偿还本金1000元，当前市场价格为950元。已知现值计算模型为函数f(y)，其中y为年化收益率。现需在区间[0.1, 0.15]内寻找使得f(y)=0的y值。输入数据函数f已定义为各期现金流现值之和减去市场价格，输出结果保存到变量result，格式为包含状态和根的向量。","def f(y) {
pv = 0.0
for (t in 1..5) {
pv += 100.0 / pow(1+y, t)
}
pv += 1000.0 / pow(1+y,5)
return pv - 950
}","result = brentq(f, 0.1, 0.15)"
5,嘉锋,,cdfNormal,某工厂设备的寿命服从正态分布，已知平均寿命为100小时，标准差为15小时。现需要计算设备在运行70小时之前发生故障的累积概率。输入数据已存储在变量mu（均值）、sigma（标准差）和x（时间点），均为标量数值。请编写代码计算结果并存入变量result。,"mu = 100
sigma = 15
x = 70
","result = cdfNormal(mu, sigma, x)
"
6,嘉锋,,cdfUniform,"某物联网设备的温度传感器正常工作温度区间为2℃到5℃，假设温度服从均匀分布。现有三个温度测量值2℃、3.5℃和4℃，计算它们的累积分布概率，结果保存到result。输入数据格式:向量x为[2.0, 3.5, 4.0]，输出数据格式:浮点数向量result。","
x = [2.0, 3.5, 4.0]
","
result = cdfUniform(2, 5, x)
"
7,嘉锋,,changePwd,"某量化交易平台用户需要将原有认证密钥从""Qwerty!2023""更新为符合最新安全规范的新密钥，新密钥必须满足以下条件:长度为10-18字符、至少包含一个大写字母和一个特殊符号“@”。假设旧密码存储在变量oldKey中，新密码存储在变量newKey中，请编写代码执行更新操作并将结果保存到变量result。","oldKey = ""Qwerty!2023""
newKey = ""N3wS@f3Key2024""","result = changePwd(oldKey, newKey)"
8,嘉锋,,conditionalIterate,假设有一个物联网传感器网络，每个传感器每分钟采集温度和湿度。当温度超过35度时，触发警报并记录此时的湿度值；否则，根据最近两次有效湿度值计算移动平均。现有传感器数据包含设备ID（sensor_id）、时间戳（ts）、温度（temp）和湿度（humidity），请生成带有计算结果列（result）的响应式处理逻辑。,"sensor_id = take([""S001"",""S002""],6)
ts = 2023.08.01T09:00:00 + 0..5 * 60
temp = [34.8, 35.2, 35.5, 34.9, 36.0, 34.7]
humidity = [62, 58, 61, 63, 59, 65]
sensorData = table(sensor_id, ts, temp, humidity)
","outputTable = keyedTable(`sensor_id)
engine = createReactiveStateEngine(
name=""sensorAlert"",
metrics=<conditionalIterate(temp > 35, humidity, mavg{,2})>, 
dummyTable=sensorData,
outputTable=outputTable,
keyColumn=`sensor_id
)
engine.append!(sensorData)
result = select * from outputTable
"
9,嘉锋,,countNanInf,某气象站采集了5组设备温度数据，其中部分传感器存在故障导致数值异常。温度数据以5行3列矩阵存储，变量名为tempData，数据格式为DOUBLE类型。需要统计整个矩阵中所有非正常数值的总数（包括无限大、非数以及缺失值），并将统计结果存入result变量。,"tempData = matrix(
1.23,  double(Inf), 25.8,
-5.6,  18.9,        double(nan),
NULL,  7.4,         33.3,
14.7,  double(Inf), NULL,
0.0,   22.1,        double(nan)
).reshape(5:3)
","result = countNanInf(tempData, true)
"
10,嘉锋,,createCrossSectionalAggregator,在实时股票分析场景中，需要同时计算每只证券的最新成交价和该品种所在分组的成交量均值。给定数据表包含字段:symbol(证券代码)，trade_time(时间戳)，price(价格)，volume(成交量)，表名t。请创建横截面聚合器，输出结果保存到result变量。,"t = table(    
`symbol`trade_time`price`volume,
[
`A`B`A`B,
09:30:00.000 09:30:00.005 09:30:00.010 09:30:00.015,
10.1, 20.2, 10.2, 20.3,
100, 200, 150, 250
],
[SYMBOL, TIMESTAMP, DOUBLE, INT]
)
","result = createCrossSectionalAggregator(
name=""csAggr"",
metrics=[<price>, avg(volume)],
dummyTable=t,
keyColumn=`symbol,
triggeringPattern=""perRow""
)

subscribeTable(tableName=""t"", actionName=""csEngine"", handler=append!{result}, msgAsTable=true)
"
11,嘉锋,,createLookupJoinEngine,假设有一个实时传感器数据流sensorStream包含时间戳timestamp、设备ID deviceId和温度值temp，另有一个设备信息表deviceInfo存储在分布式数据库deviceDB中，包含设备ID deviceId、位置location和校准系数calibFactor。每当传感器数据到达时，需要立即关联该设备的最新校准系数，并计算校准后的温度值（temp * calibFactor）。输出结果需包含deviceId、temp、calibFactor和adjustedTemp，保存到result表中。请编写代码实现此实时计算逻辑。,"share streamTable(1000:0, `timestamp`deviceId`temp, [TIMESTAMP, SYMBOL, DOUBLE]) as sensorStream
dbPath = ""dfs://deviceDB""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
db = database(dbPath, VALUE, `A`B`C)
deviceInfo = db.createPartitionedTable(table(1000:0, `deviceId`location`calibFactor`updateTime, [SYMBOL, SYMBOL, DOUBLE, TIMESTAMP]), `deviceInfo, `deviceId)
share table(1000:0, `deviceId`temp`calibFactor`adjustedTemp, [SYMBOL, DOUBLE, DOUBLE, DOUBLE]) as result
","engine = createLookupJoinEngine(
name=""sensorCalibEngine"",
leftTable=sensorStream,
rightTable=<select * from loadTable(dbPath, `deviceInfo)>,
outputTable=result,
metrics=<[temp, calibFactor, temp*calibFactor]>,
matchingColumn=`deviceId,
rightTimeColumn=`updateTime,
checkTimes=[08:00:00, 20:00:00]
)
subscribeTable(tableName=""sensorStream"", actionName=""appendSensorData"", handler=appendForJoin{engine, true}, msgAsTable=true)
"
12,嘉锋,,createPartitionedTable,某证券公司需要存储不同行业的个股估值指标数据，要求按行业和日期进行复合分区，每个分区内按股票代码和时间戳排序，并对行业列采用哈希降维。请准备包含股票代码、行业、日期和PB值的测试表，创建分布式表结构，要求使用时间列的delta压缩，保留最新数据，并返回变量名为result的分区表句柄。,"n=1000
symbol = ""S""+lpad(string(1..n),6,""0"")
industry = rand([""Bank"",""Energy"",""Tech"",""Healthcare""],n)
date = take(2023.01.01..2023.01.05,n)
pb = rand(0.5..5.0,n)
testData = table(symbol,industry,date,pb)","db1 = database("""",VALUE,[""Bank"",""Energy"",""Tech"",""Healthcare""])
db2 = database("""",RANGE,2023.01.01 2023.01.06 2023.01.11)
db = database(""dfs://stock_valuation"",COMPO,[db1,db2],engine=""TSDB"")
result = db.createPartitionedTable(table=testData, tableName=""pb_data"", partitionColumns=[""industry"",""date""], 
sortColumns=[""symbol"",""date""], compressMethods={""date"":""delta""}, keepDuplicates=LAST, 
sortKeyMappingFunction=[hashBucket{,16}])"
13,嘉锋,,cumlastNot,"在股票交易系统中，某只股票的成交价（第一列）存在缺失（NULL），需用前一有效价格填充；成交量（第二列）中错误标记的-1需替换为前一个非-1的值。输入矩阵m的第一列为[NULL,45.2,NULL,44.8,NULL]，第二列为[-1,-1,12000,-1,15000]。请处理数据并将结果存入result。","m = matrix([NULL,45.2,NULL,44.8,NULL], [-1,-1,12000,-1,15000])","col1 = cumlastNot(m.col(0))
col2 = cumlastNot(m.col(1), -1)
result = matrix(col1, col2)"
14,嘉锋,,cumsum3,某物联网设备每小时采集一次两组传感器的振动强度值，数据存储为3行2列的矩阵m:第一列数值为3、1、4，第二列数值为2、5、6。需要计算每个时间点上各组传感器从首次记录到当前时刻的振动强度三次方累加值，将结果存入result变量。,"m = matrix([3,1,4], [2,5,6])",result = cumsum3(m)
15,嘉锋,,dayOfYear,给定一个包含两个物联网设备事件时间的datetime向量eventTimes，计算每个事件发生在当年的第几天，并将结果存储在变量result中。输入数据格式为datetime类型的向量，输出为整型向量。,"eventTimes = [2023.03.15T08:45:00, 2023.10.22T14:30:00]",result = dayOfYear(eventTimes)
16,嘉锋,,daysInMonth,某物联网平台需要统计设备日志记录所在月份的总天数进行存储规划。给定三个设备的日期数据分别为2020年2月15日、2021年2月18日、2024年2月29日，输入变量dates为DATE类型向量，输出结果为各日期所属月份的天数并存入result整型向量。,"dates = [2020.02.15, 2021.02.18, 2024.02.29]",result = daysInMonth(dates)
17,嘉锋,,def,"给定一个包含时间戳、资产代码和波动率的因子表factor_table（结构:date, asset, volatility），以及每个资产对应的行业分类表industry_table（结构:asset, sector）。如何计算每个行业每天的平均波动率和最大值，并按行业和日期分组返回结果？要求输入数据为内存表，输出结果存储在变量result中，格式为包含sector、date、volatility_avg、volatility_max的分组表。","dates = 2023.01.01..2023.01.03
assets = `AAPL`MSFT`GOOG`AMZN`TSLA
factor_data = table(
take(dates, 15) as date,
take(assets, 15) as asset,
rand(10.0, 15) as volatility
)
industry_map = table(
assets as asset,
[`Technology`Technology`Technology`Consumer`Automotive] as sector
)
","def calc_sector_metrics(tb, metric_col, func_list, groups){
agg_cols = sqlCol(metric_col)
agg_codes = each(def(fname, col)->sqlColAlias(sqlCol(col, funcByName(fname)), metric_col+""_""+fname), func_list, take(metric_col, size(func_list)))
return sql(agg_codes, tb, groupBy=each(sqlCol, groups)).eval()
}

result = calc_sector_metrics(
lsj(factor_data, industry_map, `asset),
""volatility"",
[""avg"", ""max""],
[""sector"", ""date""]
)
"
18,嘉锋,,defg,"某股票分析场景中，需要计算过去5个交易日内每日收盘价相对于窗口内最高价的位置偏移量，生成对应的动量指标序列。输入数据为时间戳数组timestamp（包含连续5个交易日）和收盘价数组close（例如[25.3,26.1,24.8,27.5,26.9]）。请编写计算逻辑，输出结果存储在result变量，要求对每个有效窗口输出(窗口长度-最大值索引-1)的数值。","timestamp = 2023.06.01..2023.06.05
close = [25.3, 26.1, 24.8, 27.5, 26.9]","result = moving(defg(x){return size(x) - imax(x.reverse()) - 1}, close, 3)"
19,嘉锋,,eachRight,"在物联网传感器校准中，现有字典存储了三个设备(s1,s2,s3)记录的时序数据，每个设备包含3个采样值（s1:[5,6,7], s2:[8,9,10], s3:[11,12,13]）。给定校准向量[0.5,1.0,1.5]，需要对每个设备的每个采样值依次加上校准向量对应位置的修正量。请输出处理后的新字典，变量名为result。","d = dict(`s1`s2`s3, [[5,6,7],[8,9,10],[11,12,13]])
calibration = 0.5 1.0 1.5",result = calibration add:R d
20,嘉锋,,extractTextSchema,"当前有一个物联网设备上传的温度监测CSV文件，该文件使用竖线分隔符，且首行为无关的注释需要跳过。已知文件路径为""tempData.csv""，包含四列数据:时间戳（格式2023.08.15T14:30）、设备ID、温度值、异常状态标识。请编写代码获取该文件的结构描述表，要求结果包含列名称和自动推断的数据类型。","|
data = table([""2023.08.15T14:30|DHT22-001|36.5|0"", ""2023.08.15T15:00|DHT22-002|38.1|1""] as content)
saveText(data, ""tempData.csv"", delimiter='|')","|
// 跳过首行注释，提取竖线分隔文件结构
result = extractTextSchema(filename=""tempData.csv"", delimiter=""|"", skipRows=1)

prepareCode: |
data = table([""2023.08.15T14:30|DHT22-001|36.5|0"", ""2023.08.15T15:00|DHT22-002|38.1|1""] as content)
saveText(data, ""tempData.csv"", delimiter='|')

runCode: |
result = extractTextSchema(filename=""tempData.csv"", delimiter=""|"", skipRows=1)"
21,嘉锋,,for,"在物联网场景中，某传感器监测表sensorReadings包含三列:timestamp(时间戳)、deviceID(设备编号)、hourlyReadings(每小时读数数组)。请逐行处理每个设备的读数数据，计算每行的累计耗电量总和，并将处理结果存储在result变量中。输入表格式为:timestamp(DATETIME), deviceID(SYMBOL), hourlyReadings(INT[])，输出结果应为包含累计值的INT型向量。","sensorReadings = table(2023.01.01T09:00:00 2023.01.01T09:30:00 as timestamp, `D1001 `D1002 as deviceID, [[12,15,18], [8,9,7]] as hourlyReadings)","result = []
for(record in sensorReadings){
result.append!(sum(record[`hourlyReadings]))
}
result = matrix(result).transpose()[0]"
22,嘉锋,,funcByName,"在因子分析中，我们需要根据行业分类动态计算各资产的因子值分布。给定包含日期、资产代码、因子值的表factor_table(date,asset,factor)，以及包含资产代码与行业的映射表group_table(asset,industry)，请按行业分组计算每个资产因子值的十分位数组别（0-9），要求使用动态函数调用方式实现分位数计算，结果需包含资产代码、日期、行业和十分位数列。","factor_table = table(2023.01.01 2023.01.01 2023.01.02 2023.01.02 as date, `AAPL`MSFT`GOOG`AMZN as asset, 0.5 -1.2 2.3 -0.8 as factor)
group_table = table(`AAPL`MSFT`GOOG`AMZN as asset, `Tech`Tech`Tech`Retail as industry)
","calc_decile = def(tb, group_tb, q_func) {
return select asset, date, industry, rank(factor, percent=true)/10 as decile from ej(tb, group_tb, `asset) group by industry, date context by asset map(funcByName(q_func), 10)
}
result = calc_decile(factor_table, group_table, ""quantile"")
"
23,嘉锋,,getComputeGroupChunksStatus,"在物联网实时监控平台中，需要获取名为""EdgeProcessing""计算组内所有只读权限的数据分块信息，包含分区路径、目标路由节点、缓存节点和权限状态。已知系统元数据存储在控制节点，输入格式为内置计算组结构，输出结果需要包含所有符合条件的chunk数据并存入result变量。",<!-- 无需准备数据，直接调用系统元数据 -->,"result = getComputeGroupChunksStatus(""EdgeProcessing"").select(permission == ""READ_ONLY"")"
24,嘉锋,,getJobStatus,"在实时监控物联网设备数据处理任务时，用户通过任务ID""devBatch_202305""提交了批处理作业。需要获取该作业当前执行的进度状态，包括任务接收时间、处理耗时和是否完成。输入数据为字符串类型的作业标识符jobID，输出要求为包含节点信息、时间戳和错误日志的数据表格，存储在变量result中。","
def processSensorData(n){
total = 0
for(i in 1..n){
total += sum(rand(0.0,100.0,10000000))
print(""Processing batch "" + i)
}
return total
}
jobID = ""devBatch_202305""
submitJob(jobID, ""设备温度处理任务"", processSensorData, 60)
","
result = getJobStatus(jobID)
"
25,嘉锋,,getOS,"在金融交易系统中，服务器需要根据当前操作系统的类型动态切换日志存储目录的格式。请编写代码获取当前环境的系统类别，并将结果存入变量result中。输入数据无需准备，输出结果为表示系统类型的字符串（如""linux""），变量名为result。",,result = getOS()
26,嘉锋,,getSlaveReplicationStatus,物联网平台需要监控设备日志同步任务的执行情况，当前从集群有多个未完成和已完成的任务。请获取最近处理的5条任务记录，包括任务ID、状态、创建时间和对应的数据库路径，将结果存入变量result。输入数据来自系统异步复制状态，输出为包含taskId/state/createTime/dbName等字段的表结构。,,"result = getSlaveReplicationStatus(limit=5)
"
27,嘉锋,,getTraces,在数据库运维监控中，需要获取最近30秒内客户端发送的所有操作脚本及其执行指纹，包含时间戳、原始脚本内容、16进制跟踪编号和会话编号。已知系统已执行过用户登录、创建内存表、批量插入300条随机温度传感器数据并进行范围查询，输出结果需要存储在变量result中。输入数据格式为时间类型表、字符串类型脚本、UUID类型traceId、复合类型sessionId。,"
login(""admin"", ""123456"")
setTraceMode(true)

sensorID = rand(`A001`B002`C003, 300)
timestamp = 2023.06.01T00:00:00.000 + 1..300
temperature = rand(20.0..40.0, 300)
sensors = table(timestamp, sensorID, temperature)
insert into loadTable(""dfs://iot"", `sensors) values(sensors.timestamp, sensors.sensorID, sensors.temperature)

select avg(temperature) from sensors where timestamp between 2023.06.01T00:00:00.000 : 2023.06.01T00:05:00.000 group by sensorID
","
result = getTraces()
"
28,嘉锋,,grant,某金融公司需要限制用户“FinanceUser”只能创建以“fin_2023q1”和“fin_2023q2”为前缀的数据库，并允许其在合规审计组中操作。请编写DolphinDB权限控制代码，执行结果存入变量result。,,"result = grant(""FinanceUser"", DB_OWNER, [""fin_2023q1*"", ""fin_2023q2*""])"
29,嘉锋,,if,在物联网设备监控场景中，给定设备温度数据表tempData，包含timestamp（时间戳）、deviceID（设备ID）、temperature（温度值）三列。需要根据每个设备的温度值生成状态信息:温度超过100度为高温预警，80-100度之间为注意散热，否则为正常。输出结果为每个设备的状态列表，赋值给result。,"tempData = table(
[""2023-01-01 00:00:00"",""2023-01-01 00:05:00"",""2023-01-01 00:10:00"",""2023-01-01 00:15:00""] as timestamp,
[""D001"",""D002"",""D003"",""D004""] as deviceID,
[85, 105, 95, 70] as temperature
)
","def checkStatus(temp) {
if (temp > 100) {
return ""高温预警""
} else if (temp >= 80) {
return ""注意散热""
} else {
return ""正常""
}
}

result = tempData.temperature.map(checkStatus)
"
30,嘉锋,,in,给定一组待验证的股票代码向量stocks，其中包含四个元素`AAPL、IBM、TSLA、MSFT。另有一个内存表t，其唯一的symbols列存储了三个有效股票代码`IBM、MSFT、GOOG。请生成一个布尔向量result，标识每个待验证股票是否存在于有效列表中。,"t = table(`IBM`MSFT`GOOG as symbols)
stocks = [`AAPL, `IBM, `TSLA, `MSFT]","result = in(stocks, t)"
31,嘉锋,,invF,"在方差分析的假设检验中，给定分子自由度为3.6、分母自由度为7.2，需计算四个置信概率[0.95,0.975,0.99,0.995]对应的分布临界点。输入数据包括两个浮点型自由度参数和一个概率值向量，生成对应的检验阈值并存入result变量。","numeratorDF = 3.6
denominatorDF = 7.2
confidenceLevels = [0.95, 0.975, 0.99, 0.995]","result = invF(numeratorDF, denominatorDF, confidenceLevels)"
32,嘉锋,,isNull,在物联网设备监控场景中，某传感器采集的温度数据存在部分缺失。给定包含时间戳和设备温度的表sensor_data，其中温度列存在空值。请生成一个与原表结构相同的新表，用布尔值标记温度字段是否缺失，并将结果存储在result变量中。输入表结构:timestamp为时间戳，temperature为INT类型；输出结果为BOOL类型矩阵。,"sensor_data = table(2023.01.01T09:00:00 + 0..6 as timestamp, [32, NULL, 35, NULL, 36, 38, NULL] as temperature)
","result = isNull(sensor_data.temperature)
"
33,嘉锋,,isUpper,在物联网设备状态监测中，需要检测一组传感器状态字段是否满足全大写字母规范（允许存在数字和符号）。给定字符串向量strs包含4个元素:'ALARM'（纯大写）、'status'（全小写）、'ERROR_500'（含数字的大写）、'test123'（含数字的小写）。输出布尔型向量result标记各字段是否符合规范。,"strs = [""ALARM"", ""status"", ""ERROR_500"", ""test123""]",result = isUpper(strs)
34,嘉锋,,isValid,在物联网监控系统中，传感器表sensorData包含时间戳time、设备编号sensorID和温度temperature字段，其中temperature存在缺失值。请生成一个布尔数组，标识每条记录的temperature是否为有效数据，结果存入result。输入表结构:time为时间类型向量，sensorID为SYMBOL类型向量，temperature为DOUBLE类型向量存在NULL值；输出结果为BOOLEAN类型向量，变量名为result。,"time = 2023.01.01T09:00:00 2023.01.01T09:05:00 2023.01.01T09:10:00 2023.01.01T09:15:00
sensorID = `A`B`A`B
temperature = 25.6 32.1 NULL 28.5
sensorData = table(time, sensorID, temperature)",result = isValid(sensorData.temperature)
35,嘉锋,,join,"在工业物联网场景中，某个监控系统将两台设备的三项运行参数存储为2行3列的矩阵x（每行代表设备，每列代表参数）。现需要将环境温湿度检测装置采集的两组标量数据y=[26.8,19.3]作为新列追加到矩阵右侧，形成2行4列的监控矩阵。请编写代码实现矩阵扩展。","x = 1..6$2:3
y = [26.8, 19.3]",result = x <- y
36,嘉锋,,lowRange,某温度传感器表sensorData包含传感器ID（sensorID）为S1的7条记录，时间戳ts从2023.01.01到2023.01.07，温度temp依次为23.5、23.4、23.6、23.3、23.2、23.5、23.1。需要计算每个温度值是前面连续多少个时段的最低值，结果列命名为lowRange_temp，并存储在变量result中。,"sensorData = table(take(`S1,7) as sensorID, 2023.01.01 + 0..6 as ts, [23.5,23.4,23.6,23.3,23.2,23.5,23.1] as temp)
","result = select *, lowRange(temp) as lowRange_temp from sensorData
"
37,嘉锋,,matchSpan,"在物联网设备日志分析中，需要从message字段里找出包含""电压异常""告警的记录。已知日志表包含三列（设备ID、时间戳、日志内容），要求匹配短语前后或中间允许存在最多1个其他词汇，返回符合条件的所有字段。输入数据表名为device_logs，日志内容字段为message且已建立英文文本索引（忽略大小写和词干），输出结果存入变量result。","device_ids = [""D1001"", ""D1002"", ""D1003"", ""D1004""]
timestamps = 2023.12.01T09:00:00 + 1..4
messages = [
""WARNING: Voltage anomaly detected in circuit A"",
""CRITICAL: Voltage levels show abnormal readings"",
""ALERT: Voltage regulator overheating with anomaly"",
""Voltage stabilization failed, triggering emergency shutdown""
]
device_logs = table(device_ids as deviceID, timestamps as ts, messages as message)

if(existsDatabase(""dfs://iotDB"")) dropDatabase(""dfs://iotDB"")
db = database(directory=""dfs://iotDB"", partitionType=VALUE, partitionScheme=[""D1001"",""D1002"",""D1003"",""D1004""], engine=""PKEY"")
pt = createPartitionedTable(db, device_logs, ""logs"", ""deviceID"", primaryKey=`deviceID, indexes={""message"":""textindex(parser=english, full=false, lowercase=true, stem=true)""})
pt.tableInsert(device_logs)
","result = select * from pt where matchSpan(message, ""voltage anomaly"", 1)
"
38,嘉锋,,merge,"在物联网场景中，设备A每隔2小时采集一次温度数据（时间点为08:00、10:00等），设备B每隔3小时采集一次湿度数据（时间点为09:00、12:00等），需要将两个传感器的完整时间线合并展示，缺失数值保留空值。已知temp_seq为设备A的索引序列（数值21.5,22.1,23.0对应时间08:00,10:00,12:00），humi_seq为设备B的索引序列（数值45,47对应时间09:00,12:00），如何生成包含完整时间戳且保留双方数据的二维表？","timeA = 2023.06.01T08:00 2023.06.01T10:00 2023.06.01T12:00
temp_seq = indexedSeries(timeA, [21.5, 22.1, 23.0])
timeB = [2023.06.01T09:00, 2023.06.01T12:00]
humi_seq = indexedSeries(timeB, [45, 47])","result = merge(temp_seq, humi_seq, 'outer')"
39,嘉锋,,mifirstNot,"在物联网温度监测中，处理传感器数据时存在缺失值。给定一个时间索引的温度序列tempSeries（时间列为2023.01.01T09:00开始，每30秒一次，共7条记录；数值列为[空值,23.5,空值,24.8,空值,25.0,26.1]），在长度为4的窗口内，寻找每个窗口第一个有效值的下标，要求窗口至少有2个非空值，否则返回-1。请输出结果到result。","sensorTime = 2023.01.01T09:00 + 0..6 * 30
temps = [NULL, 23.5, NULL, 24.8, NULL, 25.0, 26.1]
tempSeries = indexedSeries(sensorTime, temps)","result = mifirstNot(tempSeries, 4, 2)"
40,嘉锋,,movingWindowData,"在处理某物联网设备连续7天采集的温度数据时，需要提取长度为4天的滑动窗口序列，前几个不完整窗口的位置用空值填充。已知温度数据存储在向量temperature中，格式为[29.5,30.1,28.7,31.2,27.9,26.5,30.8]。请生成包含完整滑动窗口数据的数组向量，要求输出结果的行长度固定为4天，并将最终结果存储在result变量中。","temperature = [29.5, 30.1, 28.7, 31.2, 27.9, 26.5, 30.8]","result = movingWindowData(X=temperature, window=4, fixed=true)"
41,嘉锋,,mul,"在物联网场景中，某设备采集了三个监测点两个维度的传感器数据，存储为3行2列的矩阵m，具体数值为[[1,2],[3,4],[5,6]]。需要将第一列数据整体放大2倍，第二列放大3倍，求处理后的矩阵并将结果存入result。","m = 1..6$3:2
scales = [2, 3]","result = m * scales

output
比如，原始矩阵:
1 2
3 4
5 6
乘以scales后:
2 (1*2), 6 (2*3)
6 (3*2), 12 (4*3)
10 (5*2), 18 (6*3)
"
42,嘉锋,,ne,"某实时监控系统需要判断两个传感器组采集的编号集合是否完全相同。已知传感器组A的编号集合为{101, 102, 105}，传感器组B的编号集合为{105, 102, 107}，要求输出差异判定结果到result变量，若不同则返回1。","x = set([101, 102, 105])
y = set([105, 102, 107])
","result = x != y
"
43,嘉锋,,objs,在物联网设备监控系统中存在若干共享内存表用于存储设备温度与状态数据，如何列出当前所有共享表（包括表名、数据类型、内存大小字节数），要求结果包含分布式表的逻辑路径？已知输入数据包括:共享表deviceTemp（时间、设备ID、温度字段）和deviceStatus（时间、设备ID、状态码字段），输出结果变量名为result。,"time = 2023.06.01T09:00:00..2023.06.01T09:10:00
deviceID = take(`D001..D100, 100)
temp = rand(20..40, 100)
deviceTemp = table(time, deviceID, temp)
share(deviceTemp, `sharedTemp)

statusTime = 2023.06.01T09:00:00..2023.06.01T09:05:00
statusCode = rand(0..5, 60)
deviceStatus = table(statusTime, take(`D001..D060,60), statusCode)
share(deviceStatus, `sharedStatus)

db = database(""dfs://iotDB"", VALUE, 2023.06.01..2023.06.03)
distTable = db.createPartitionedTable(deviceTemp, `distDevice, `time)
share(distTable, `sharedDistTable)
","result = select name, type, bytes, extra from objs(true) where form=""TABLE"" and shared=true
"
44,嘉锋,,percentileRank,在股票分析中，某股票近5个交易日的收盘价数据为120、130、140、150、160，保存在变量closePrices（数值向量）中。现需要评估当前价格145在该数据集中的相对位置，采用严格方法和宽松方法的平均策略。请编写代码计算这一指标，将结果存入变量result。,closePrices = 120 130 140 150 160,"result = percentileRank(closePrices, 145, ""mean"")"
45,嘉锋,,pipeline,某物联网平台每小时采集传感器数据并存储于分布式表。需按时间顺序依次处理每个小时的数据:先加载指定小时记录，计算温度滚动平均值，随后将结果存入新表。如何设计多步骤流水线确保处理顺序且中间结果不超内存？输入变量v为2023年1月每小时时间戳构成的MONTH向量，输出结果存入变量result。,"v = 2023.01M..2023.01M+23  # 24个小时级时间戳

def loadHour(h):
# 模拟分布式表结构
if not existsTable(""dfs://sensorDB"", ""hourlyData""):
db = database(""dfs://sensorDB"", VALUE(2023.01M..2023.12M))
t = table(take(h,1000) as time, rand(20..40,1000) as temp, take(`A001,1000) as device)
db.createPartitionedTable(t, ""hourlyData"", `time)

return select * from loadTable(""dfs://sensorDB"",""hourlyData"") where time=h

def calcIndicators(tb):
return select time, device, mavg(temp,3).fill(0) as rolling_temp from tb context by device

def saveResults(tb):
tb.saveText(""/iot/processed_data.csv"",',',true)
return tb.size()
","result = pipeline(
each(partial{loadHour}, v),
[calcIndicators, saveResults],
queueDepth=3
)
"
46,嘉锋,,reciprocal,在物联网系统中，四个电阻器的阻值分别为5Ω、10Ω、20Ω和25Ω，存储在向量resistors中。请计算各电阻器的电导值（单位为S），结果存储在变量result中。输入数据格式为整型向量resistors，输出数据格式为DOUBLE类型向量result。,"resistors = [5, 10, 20, 25]",result = reciprocal(resistors)
47,嘉锋,,replayDS,"在物联网环境中，传感器数据存储在分布式数据库表sensor_log中，结构包括传感器编号（符号类型）、采集日期（日期类型）、时间戳（时间类型）和温度值（整型）。表按日期范围（2023.01.01至2023.01.03）和传感器编号分区。数据时间戳分布为每日06:00:00到22:00:00之间。需将数据按天和时段[08:00:00, 16:00:00]划分为多个回放数据源，求生成的数据源总数并存入result。","n = 1000
sensorID = take(`S1`S2, n)
date = take(2023.01.01..2023.01.03, n).sort!()
timestamp = 06:00:00 + rand(16*60*60*1000, n)
temperature = rand(100, n)
t = table(sensorID, date, timestamp, temperature)

if(existsDatabase(""dfs://iot_db"")){
dropDatabase(""dfs://iot_db"")
}

db_date = database("""", RANGE, 2023.01.01..2023.01.04)
db_sensor = database("""", VALUE, `S1`S2)
db = database(""dfs://iot_db"", COMPO, [db_date, db_sensor])
sensor_log = db.createPartitionedTable(t, `sensor_log, `date`sensorID)
sensor_log.append!(t)
","ds = replayDS(sqlObj=<select * from loadTable(""dfs://iot_db"", `sensor_log)>, dateColumn=`date, timeColumn=`timestamp, timeRepartitionSchema=[08:00:00, 16:00:00])
result = ds.size()
"
48,嘉锋,,restoreDB,"某物联网平台采集了设备传感器数据，原分布式数据库按日期和设备编号分区。由于硬件故障需从备份恢复数据库结构及全部表。输入备份目录为""/backup/iot""，原库路径为""dfs://iotDB""，输出恢复后的库表信息到result变量，结果包含数据库名和表名两列。","dbName = ""dfs://iotDB""
if existsDatabase(dbName):
dropDatabase(dbName)

n = 5000
deviceID = rand(""D""+string(1..100), n)
dates = 2023.01.01..2023.01.05
date = rand(dates, n)
temperature = rand(30.0..40.0, n)
t = table(deviceID, date, temperature)

dateDB = database(, VALUE, dates)
deviceDB = database(, HASH, [SYMBOL, 10])

db = database(dbName, COMPO, [dateDB, deviceDB])
sensorData1 = db.createPartitionedTable(t, `sensorData1, `date`deviceID).append!(t)
sensorData2 = db.createPartitionedTable(t, `sensorData2, `date`deviceID).append!(t)

backupDB(""/backup/iot"", dbName)
","result = restoreDB(""/backup/iot"", ""dfs://iotDB"")
"
49,嘉锋,,rm,"在物联网场景中，临时传感器数据文件处理完成后需要释放存储空间。已知文件路径""/var/iot/202304/calibration.cache""已存储在变量cachePath中，该文件大小为8MB。请清理该缓存文件并获取目录最新状态，返回结果为一个包含文件名、类型和大小字段的表结构，存储在变量result中。","
cachePath = ""/var/iot/202304/calibration.cache""
writeFile(cachePath, ""模拟校准缓存数据"" + string(1..100000))
","
rm(cachePath)
result = files(""/var/iot/202304/"").select(""filename"",""isDir"",""fileSize"")
"
50,嘉锋,,rmdir,"在物联网设备数据归档场景中，设备历史数据存储在 /home/iot_data/device001 目录下，该目录包含 motion_sensor（有2023_log.csv）和 temp_sensor（有2023_readings.dat）两个子目录。请彻底清理该设备的所有历史数据存储结构，但需要保留设备根目录以便后续使用。已知目录结构如下:
输入数据格式:
目录路径:/home/iot_data/device001/
子目录:motion_sensor（含文件）、temp_sensor（含文件）
变量名:路径自动存在无需变量
输出要求:
删除所有子目录及文件但保留根目录
结果变量名:result","
// 创建测试目录结构
mkdir(""/home/iot_data/device001/motion_sensor"")
mkdir(""/home/iot_data/device001/temp_sensor"")
fileHandle1 = file(""/home/iot_data/device001/motion_sensor/2023_log.csv"",""w"")
fileHandle1.close()
fileHandle2 = file(""/home/iot_data/device001/temp_sensor/2023_readings.dat"",""w"")
fileHandle2.close()
","
// 递归删除子内容但保留根目录
result = rmdir(""/home/iot_data/device001"", recursive=true, keepRootDir=true)
"
51,晨曦,,rowAvg,某工业设备每5分钟采集一次三组压力值，存储在表t中，包含列time(分钟数)、sensor1、sensor2、sensor3。需要生成监测报告，计算每个时间点三组传感器的平均压力值，结果保留两位小数，输出结构包含time和avg_pressure列。,"t = table(300 305 310 315 320 as time,  [4.8,5.2,4.9,5.5,5.1] as sensor1, [5.0,4.7,5.3,5.6,5.2] as sensor2, [4.9,5.1,4.8,5.4,5.0] as sensor3)
","result = select time, round(rowAvg(sensor1, sensor2, sensor3), 2) as avg_pressure from t
"
52,晨曦,,setDynamicConfig,在量化交易场景中，因高频数据计算需要临时提升内存缓存效率，需将OLAP引擎缓存容量调整为3072MB并获取生效值。配置项接收数值类型参数，请编写代码实现并将生效后的数值存入result。,,"setDynamicConfig(""OLAPCacheEngineSize"", 3072)
result = getDynamicConfig(""OLAPCacheEngineSize"")"
53,晨曦,,setMaxJobPriority,某金融机构需要限制用户Alex在实时风控分析系统中的任务提交权限，确保最高优先级不超过5。已知管理员账户为admin（密码:password123），用户Alex的密码是securePass。请编写代码实现该限制，并将操作结果保存到变量result中。输入数据格式:用户名字符串和优先级整数，输出数据格式:函数执行结果对象。,"login(`admin, `password123)
createUser(`Alex, `securePass)","result = setMaxJobPriority(`Alex, 5)"
54,晨曦,,sinh,在物联网温度监测系统中，某设备采集到三个监测点的最新温度值分别为30、45、60摄氏度，存储在名为tempReadings的向量中。现需要对温度数值进行双曲正弦数学变换处理，将计算结果存入变量result。已知输入数据格式为整型向量，输出要求为浮点型向量，变量名称必须为result。,"tempReadings = 30 45 60
","result = sinh(tempReadings)
"
55,晨曦,,splev,"在金融数据分析中，某股票每隔两小时记录一次交易价格（时间点为8,10,12,14,16），对应价格分别为[28.5,30.1,29.8,31.6,30.3]。现需要构建平滑曲线模型，预测在9:00、11:00、13:00、15:00时刻的估算价格。已知使用三次样条插值法并在时间戳[10,12,14]处设置控制节点，请编写计算中间时刻价格预测值的代码。输入数据为整型时间向量x，浮点价格向量y，待预测时间点newx，输出结果存入result变量。","x = [8,10,12,14,16]
y = [28.5,30.1,29.8,31.6,30.3]
newx = [9,11,13,15]
tck = splrep(x, y, t=[10,12,14])","result = splev(newx, tck)"
56,晨曦,,startClusterReplication,某工业设备监控系统的主集群由于硬件故障导致实时状态数据的异步备份任务多次失败并自动暂停。运维人员已在控制节点完成高可用架构的必要配置，现在需要立即恢复数据同步，确保从集群能继续接收最新的传感器读数。请编写代码执行恢复操作，并将执行结果存入变量result。,,result = startClusterReplication()
57,晨曦,,stdp,假设有一个物联网设备温度记录表，包含字段deviceID（字符串类型）、time（时间戳类型）和temp（整型）。请统计每个设备温度的总体波动程度，忽略缺失值。输入表变量名为sensorData，输出结果存储在变量result中，要求结果为包含各设备总体标准差的表。,"sensorData = table(
[""D001"",""D001"",""D002"",""D002"",""D002"",""D003""] as deviceID,
[2023.01.01T09:00:00, 2023.01.01T09:05:00, 2023.01.01T09:10:00, 2023.01.01T09:15:00, 2023.01.01T09:20:00, 2023.01.01T09:25:00] as time,
[265, 278, 312, 295, NULL, 289] as temp
)
","result = select stdp(temp) as overall_deviation from sensorData group by deviceID
"
58,晨曦,,sumbars,在股票交易分析中，需统计每只股票在某一交易日后的累计成交量首次突破5000手所需的最小交易日数。输入表trade_data包含symbol（SYM类型）、date（DATE类型）、volume（INT类型）三列，其中volume为非负整数。输出结果需包含原表所有字段及新增字段days_required（表示所需天数，无法满足时返回0），并将结果存储在result变量中。,"trade_data = table(`AAPL`AAPL`MSFT`AAPL`MSFT as symbol, 2023.01.01 + 0..4 as date, [2500, 3000, 1500, 4000, 3500] as volume)
","threshold = 5000
select *, sumbars(volume, threshold) as days_required from trade_data context by symbol as result
"
59,晨曦,,tensor,在图像处理场景中，需要将两个2行2列的灰度图像矩阵整合为一个三维数据结构以便输入神经网络。已知图像矩阵image1的数据为1-4按行填充，image2的数据为5-8按行填充，输入数据存储在变量imageData中。请生成符合要求的三维张量并赋值给result。,"image1 = 1..4$2:2
image2 = 5..8$2:2
imageData = [image1, image2]",result = tensor(imageData)
60,晨曦,,timer,在量化回测中需要评估数据处理环节的效率，现有包含50万个随机浮点数的数组priceData（变量名），请测量将其升序排列20次的总耗时，并将结果存储在result中。,"priceData = rand(100.0, 500000)
","result = timer(20){sort(priceData)}
"
61,晨曦,,tmsum,"某股票交易系统记录了多笔交易的时间戳和成交量，时间列times为[2023.10.08T09:30:00, 2023.10.08T09:32:00, 2023.10.08T09:34:00, 2023.10.08T09:34:30, 2023.10.08T09:35:00, 2023.10.08T09:40:00]，对应成交量volumes为[100, 150, 200, 250, 300, 400]。现需统计每个交易时刻前5分钟时间窗口内的成交量总和，输出结果到变量result。","times = [2023.10.08T09:30:00, 2023.10.08T09:32:00, 2023.10.08T09:34:00, 2023.10.08T09:34:30, 2023.10.08T09:35:00, 2023.10.08T09:40:00]
volumes = [100, 150, 200, 250, 300, 400]
","result = tmsum(times, volumes, 5m)
"
62,晨曦,,tmwavg,"在物联网传感器监测中，需要计算每个采样点前5分钟窗口内，以信号质量为权重进行归一化后的温度加权均值。输入表包含不连续时间戳t（分钟精度）、温度值x（1到6）和信号质量权重y（0.1到0.6），输出结果需保留到result变量。输入数据格式示例:t为[2023.01.01T09:00, 2023.01.01T09:01, 2023.01.01T09:03, 2023.01.01T09:06, 2023.01.01T09:07, 2023.01.01T09:10]，输出要求与输入行数相同的带计算结果列。","T = [2023.01.01T09:00:00, 2023.01.01T09:01:00, 2023.01.01T09:03:00, 2023.01.01T09:06:00, 2023.01.01T09:07:00, 2023.01.01T09:10:00]
X = 1..6
Y = 0.1 0.2 0.3 0.4 0.5 0.6
m = table(T as t, X as x, Y as y)
","result = select *, tmwavg(t, x, y, 5m) from m
"
63,晨曦,,triu,在金融风险分析中，存在一个4x4的相关系数矩阵mat，矩阵元素按列依次为1到16。需要提取该矩阵中从主对角线向上偏移2个位置的对角线及以上区域的数据（其余位置填0），并将处理后的矩阵存储在result中。输入矩阵格式为4x4矩阵，变量名mat；输出结果为矩阵，变量名result。,"mat = matrix(1 2 3 4, 5 6 7 8, 9 10 11 12, 13 14 15 16)","result = triu(mat, 2)"
64,晨曦,,unpack,"某物联网设备上传的二进制数据包含一个温度值（32位浮点数）和设备编号（32位整数）。已知变量binData存储了按""温度+设备号""顺序打包的字节流，请将其解析为元组，温度保留小数，设备号为整数。输入数据格式为BLOB类型，变量名binData，输出结果为变量result。","binData = pack(""f i"", 25.5, 1001)","result = unpack(""f i"", binData)"
65,晨曦,,unregisterSnapshotEngine,"在物联网监控系统中，分布式数据库""dfs://tradeDB""下的表""sensorData""之前启用了数据快照功能，现在需要停止所有节点上该表的快照服务。已知数据库按时间分区，表结构为（id INT, ts TIMESTAMP, val DOUBLE），请编写代码实现该需求，并将结果存储在result变量中。","dbName = ""dfs://tradeDB""
tableName = ""sensorData""
if(existsDatabase(dbName)) dropDatabase(dbName)
db = database(dbName, VALUE, 2023.01.01..2023.01.03)
schema = table(1:0, `id`ts`val, [INT, TIMESTAMP, DOUBLE])
db.createPartitionedTable(schema, tableName, `ts)","result = unregisterSnapshotEngine(dbName, tableName)"
66,晨曦,,uuid,"在物联网设备管理中，需要为3个传感器节点生成符合规范的全局唯一标识符，格式为标准36位字符串，并将结果转换为特定的二进制类型存储。已知设备原始ID向量为sensorIDs=[""a1b2c3d4-ef56-7890-ab12-cd34ef56a8b0"", ""d4c3b2a1-65fe-0987-21ba-43dc65fe0987"", ""1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d""]，请将其转换为正确的格式并赋值给result。","sensorIDs = [""a1b2c3d4-ef56-7890-ab12-cd34ef56a8b0"", ""d4c3b2a1-65fe-0987-21ba-43dc65fe0987"", ""1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d""]",result = uuid(sensorIDs)
67,晨曦,,wavg,某学生的三门课程成绩存储在数组grades中，其中第二门课程成绩缺失（NULL），对应的学分存储在数组weights中。计算该学生的有效课程加权平均成绩，权重使用学分并自动调整，结果存入变量result。输入数据格式:grades为包含NULL的整型数组，weights为整型数组。输出数据格式:数值型result。,"grades = [85, NULL, 92]
weights = [3, 2, 4]
","result = wavg(grades, weights)
"
68,晨曦,,weekBegin,在物联网设备监测场景中，有一批传感器在2023年5月1日至20日期间每日上报运行数据。需要按每隔一周的星期三作为统计周期起点，计算每个周期内设备状态的均值和环境指标总和。输入数据表含DATE类型的date列，FLOAT类型的status列，INT类型的metric列，表名为sensor。请输出以周期起始日分组后的统计结果，存储在result变量。,"
dates = 2023.05.01..2023.05.20
status = rand(10.0, size(dates)) + 95
metric = rand(100, size(dates))
sensor = table(dates as date, status as status, metric as metric)
","
result = select avg(status), sum(metric) from sensor group by weekBegin(date, 2, 2023.05.01, 2) as period_start
"
69,晨曦,,writeLog,"在物联网设备管理中，成功删除两个过期数据文件后，需记录包含文件路径列表[""/data/sensor1.csv"", ""/data/sensor2.csv""]和操作状态'success'的日志信息。请将结构化的操作结果转换为标准JSON格式字符串后写入日志文件，并将该JSON字符串赋值给变量result。","deletedFiles = [""/data/sensor1.csv"", ""/data/sensor2.csv""]
operationStatus = ""success""
logDetails = dict(`filePaths`statusCode, [deletedFiles, operationStatus])","result = toStdJson(logDetails)
writeLog(result)"
70,晨曦,,base64Encode,"某金融系统需要将敏感客户信息转换为Base64格式进行安全传输。给定客户ID为C1001，邮箱地址为""user@company.com""，请将此邮箱地址编码处理后存入变量result。输入数据为字符串标量，输出结果为Base64编码的字符串标量。","|
email = ""user@company.com""","|
result = base64Encode(email)"
71,晨曦,,cachedTable,"某物联网系统需要一个每3秒自动刷新温度数据的缓存表。初始表sensorData包含两列（ts时间戳类型，temp整型），数据为[2023.01.01T00:00:00, 30]。每次刷新时温度加2度且时间戳增加10秒。请创建该自动刷新表并获取当前数据，结果存入result。","def refreshSensor(mutable t){
t.replaceColumn!(`temp, t.temp+2)
t.replaceColumn!(`ts, temporalAdd(t.ts,10,`s))
return t
}
initialTs = 2023.01.01T00:00:00
sensorData = table(initialTs as ts, 30 as temp)","ct = cachedTable(refreshSensor{sensorData}, 3)
result = select * from ct"
72,晨曦,,cancelJob,"在金融实时分析系统中，三个历史数据导入任务因配置错误需要立即中止。已知任务ID分别为""import_20230401""、""import_20230402""和""import_20230403""。请编写代码取消这些任务，并将操作结果存入变量result。输入数据为包含三个ID的字符串向量jobIds，输出为操作结果。","
def dataImportTask(duration) {
sleep(duration * 1000)
}
jobIds = [""import_20230401"", ""import_20230402"", ""import_20230403""]
foreach(id in jobIds) {
submitJob(id, ""历史数据导入"", dataImportTask, 600)
}
","
result = cancelJob(jobIds)
"
73,晨曦,,cancelPKEYCompactionTask,"在物联网设备监控场景中，某分布式节点的实时数据写入出现延迟，经排查发现存在一个活跃的数据整合任务占用资源。已知该任务对应的存储块ID为""d41d8cd9-8f00-3204-a980-0998ecf8427e""，请编写代码终止该处理任务并将操作结果保存至变量。","chunkId = ""d41d8cd9-8f00-3204-a980-0998ecf8427e""",result = cancelPKEYCompactionTask(chunkId)
74,晨曦,,cbrt,"在物联网场景中，三个立方体水箱的容积数据（单位:立方米）存储在名为tankVolumes的表中，volume列为[64, 125, 216]。如何计算每个水箱对应的底面正方形边长（结果保留6位小数），并将计算结果赋值给result？","tankVolumes = table([64, 125, 216] as volume)",result = select cbrt(volume) as edgeLength from tankVolumes
75,晨曦,,cdfBeta,"某金融产品收益率服从Beta分布，形状参数α为1.5，β为2.0。需要计算在阈值0.2、0.5、0.8处的累计概率值。输入变量alpha_param=1.5，beta_param=2.0，x_values=[0.2,0.5,0.8]，输出结果存入变量result，返回浮点数向量。","alpha_param = 1.5
beta_param = 2.0
x_values = [0.2, 0.5, 0.8]","result = cdfBeta(alpha_param, beta_param, x_values)"
76,晨曦,,conditionalFilter,在物联网设备监控中，需要筛选出各设备温度值在允许范围内的记录。给定表deviceData包含设备ID（id，SYMBOL类型）和温度值（temp，INT类型），以及一个字典filterMap，其中键为设备ID，值为允许的温度闭区间。请筛选出符合条件的数据，结果存储在result中。,"deviceData = table(`A`A`B`B as id, [25, 32, 28, 18] as temp)
filterMap = dict(`A`B, [20..30, 25..35])
","result = select * from deviceData where conditionalFilter(temp, id, filterMap)
"
77,晨曦,,contextby,给定三个传感器每小时记录的温度数据，包含传感器ID、时间戳和温度值。计算每个传感器按时间升序排列后的累积最高温度，结果与原始数据长度相同，存储在变量result中。输入数据格式:sensor_id为字符串向量，timestamp为时间戳向量，temperature为整型向量。输出结果为与输入长度相同的浮点数向量。,"sensor_id = [""S1"",""S1"",""S1"",""S2"",""S2"",""S3""]
timestamp = [2023.01.01T08:00:00, 2023.01.01T07:00:00, 2023.01.01T09:00:00, 2023.01.01T08:30:00, 2023.01.01T09:30:00, 2023.01.01T10:00:00]
temperature = [28, 25, 30, 22, 24, 26]","result = contextby(cummax, temperature, sensor_id, timestamp)"
78,晨曦,,corrMatrix,物联网系统中记录了三个传感器节点（温度、湿度、光照）在5个时间点的监测数据，数据存储为5行3列的浮点矩阵sensorData。请计算这三组监测数据之间的关联程度量化矩阵，要求结果为3x3的对称矩阵并存储在result变量中。,"sensorData = matrix(rand(10.0,15), 5).rename!([""温度"",""湿度"",""光照""], axis=1)",result = corrMatrix(sensorData)
79,晨曦,,createCryptoOrderBookEngine,某交易所实时接收 ETHUSDT 的订单簿数据流，包含全量快照和增量更新两种数据类型。需要构建一个实时聚合引擎，输入表结构包含以下字段:symbol(SYMBOL)、updateTime(TIMESTAMP)、isSnapshot(BOOL)、bidPrices(DOUBLE[])、bidSizes(DOUBLE[])、askPrices(DOUBLE[])、askSizes(DOUBLE[])、prevSeq(LONG)、currSeq(LONG)。要求输出订单簿保留最优200档价格，当出现历史数据或乱序数据时通过日志记录，缓存窗口保留未来5秒数据，并为结果表设置8秒超时机制。,"colNames = [""symbol"", ""updateTime"", ""isSnapshot"", ""bidPrices"", ""bidSizes"", ""askPrices"", ""askSizes"", ""prevSeq"", ""currSeq""]
colTypes = [SYMBOL, TIMESTAMP, BOOL, DOUBLE[], DOUBLE[], DOUBLE[], DOUBLE[], LONG, LONG]
share(table(1:0, colNames, colTypes), `inputTable)
share(table(1:0, colNames, colTypes), `outputTable)

inputColMap = dict(
[""symbol"", ""eventTime"", ""isIncremental"", ""bidPrice"", ""bidQty"", ""askPrice"", ""askQty"", ""prevUpdateId"", ""updateId""],
[""symbol"", ""updateTime"", ""isSnapshot"", ""bidPrices"", ""bidSizes"", ""askPrices"", ""askSizes"", ""prevSeq"", ""currSeq""]
)
","def logError(coin, code):
if code in [1,2]:
writeLog(""收到异常序列数据，代码:"" + str(code))

result = createCryptoOrderBookEngine(
name=""ethDepth"",
dummyTable=inputTable,
inputColMap=inputColMap,
outputTable=outputTable,
depth=dict([""ETHUSDT""], [200]),
updateRule=""general"",
errorHandler=logError,
cachingInterval=5000,
timeout=8000,
cachedDepth=dict([""ETHUSDT""], [500])
)
"
80,晨曦,,createEqualJoinEngine,实时关联两个设备状态流，当设备ID匹配时输出最新传感器读数与对应告警阈值。输入表devices含设备ID、时间戳、温度值，表alerts含设备ID、阈值上限，要求输出包含匹配设备ID、最新温度、当前阈值及时间戳，存储在result变量中。,"devices = streamTable(
`deviceId`timestamp`temperature,
[STRING,TIMESTAMP,DOUBLE],
[]
)

alerts = streamTable(
`deviceId`threshold,
[STRING,DOUBLE],
[]
)
","ejEngine = createEqualJoinEngine(
name=""thresholdMonitor"",
leftTable=devices,
rightTable=alerts,
outputTable=result,
metrics=[""temperature"",""threshold"",""timestamp""],
matchingColumn=`deviceId,
timeColumn=`timestamp
)

subscribeTable(tableName=""devices"", actionName=""appendDevice"", handler=appendForJoin{ejEngine, true})
subscribeTable(tableName=""alerts"", actionName=""appendAlert"", handler=appendForJoin{ejEngine, false})
"
81,晨曦,,createNarrowReactiveStateEngine,"在物联网设备监控场景中，某平台需要实时统计各传感器的温度均值和平稳度指标。输入流数据表包含设备编号（deviceID）、采集时间（ts）、温度（temp）字段，要求按设备分组，每分钟输出包含时间戳、温度均值和方差指标的窄表，其中均值命名为avg_temp，方差命名为var_temp，输出表结构为(deviceID STRING,ts TIMESTAMP,metricName STRING,metricValue DOUBLE)，如何实现？","dummy = streamTable(1:0, [""deviceID"",""ts"",""temp""], [STRING,TIMESTAMP,DOUBLE])
outputTable = streamTable(1:0, [""deviceID"",""ts"",""metricName"",""metricValue""], [STRING,TIMESTAMP,STRING,DOUBLE])
","metrics = [<ts>, <mavg(temp,3)>, <mvar(temp,3)>]
engine = createNarrowReactiveStateEngine(
name=""iotMonitor"",
metrics=metrics,
metricNames=[""avg_temp"",""var_temp""],
dummyTable=dummy,
outputTable=outputTable,
keyColumn=[""deviceID""],
keepOrder=True
)

testData = table(
take([""D001"",""D002"",""D003""], 6) as deviceID,
2023.09.01T00:00:00.000 + 00:00:30 * 0..5 as ts,
[32.1, 33.4, 32.8, 34.0, 33.2, 32.9] as temp
)
engine.append!(testData)
result = select * from outputTable
"
82,晨曦,,createUser,"在证券交易系统中，需要为新入职的量化研究员建立账户，用户名为Quant2023，初始密码设置为符合最高安全标准的""1@AaBcdEf""，要求该账户同时归属于""algorithm""和""backtest""两个权限组，并具备系统管理员身份。已知账户需要绑定到已存在的权限组，各组ID对应的名称如下:algorithm组、backtest组。请构造对应的账户创建代码。","groups = [`algorithm, `backtest]\nlogin(""admin"", ""123456"")\n[createGroup(g) for g in groups]","result = createUser(`Quant2023, ""1@AaBcdEf"", groups, true)"
83,晨曦,,denseRank,在一个股票行情表中，需要按证券代码分组对价格进行降序连续排名（相同价格同排名且不跳号），并将结果追加到原始表中。已知表结构为t，包含两列:id（SYMBOL类型）和price（INT类型，存在NULL值）。其中NULL需要作为最小值参与排名。请生成包含id、price和名为dense_rank的排名列的查询结果。,"t = table(['A','A','B','B','A','B'] as id, [5,4,NULL,4,6,NULL] as price)
","result = select id, price, denseRank(price, ascending=false, ignoreNA=false) as dense_rank from t context by id
"
84,晨曦,,difference,"某工业传感器每隔3小时记录一次压力读数，连续四次数据存储在变量pressureData中（类型:浮点数组，值:[120.5, 125.3, 118.7, 122.4]）。请计算最初记录与最终记录的压力差值，并将结果保存到变量result（输出类型:标量数值）。","pressureData = [120.5, 125.3, 118.7, 122.4]",result = difference(pressureData)
85,晨曦,,eachPost,在金融数据分析中，给定一个3行4列的矩阵priceMatrix，每行代表三个连续交易日的股票收盘价，每列对应四只不同股票。请计算每只股票相邻交易日的价格差值（后一日减前一日），并将最后一个交易日的结果强制设置为0。输入数据格式为矩阵，变量名为priceMatrix，输出结果存储在变量result中，格式为3行4列矩阵。,"priceMatrix = matrix([100.5, 102.0, 103.2], [101.0, 103.5, 104.0], [98.3, 99.8, 100.5], [105.2, 106.1, 107.0]).transpose()","result = eachPost(-, priceMatrix, priceMatrix[2,])"
86,晨曦,,encodeShortGenomeSeq,在基因数据压缩任务中，有三个被测序的DNA片段需要处理。第一个由6个碱基组成（ATCGGA），第二个包含无效核苷酸字符（TTACX），第三个片段长达29个字符（GGGG...重复29次）。请将这三个序列转换为紧凑数值编码，无效序列返回空值。输入为字符串向量x，输出结果存入变量result。,"
x = [""ATCGGA"", ""TTACX"", take(""G"",29).concat()]
","
result = encodeShortGenomeSeq(x)
"
87,晨曦,,enlist,"在物联网设备监控场景中，有四个传感器的实时状态数据存储在一个数组中，每个元素为不同设备的整型读数集合（变量名status）。要求将设备状态集合整体封装成嵌套容器结构，最终输出结果变量名为result。输入数据格式为:status = [[5,7], [3], [], [9,2,4]]，输出格式应为包含四个子数组的元组。","status = array(INT[], 0, 4).append!([[5,7], [3], [], [9,2,4]])",result = enlist(status)
88,晨曦,,ewmStd,"某物联网平台采集了多个设备的每分钟温度数据，包含时间戳、设备ID和温度值。需要实时分析每个设备的温度波动情况:计算每个设备基于指数衰减权重的时间窗口标准差，处理缺失值时忽略无效记录。输入数据表名为sensor_data，结构为[timestamp: TIMESTAMP, device_id: SYMBOL, temperature: DOUBLE]，输出结果需保存到result，格式与输入表相同但仅保留数值列的标准差值。","sensor_data = table(
`2023-01-01T09:30:00.001 2023-01-01T09:31:00.002 2023-01-01T09:32:00.003 2023-01-01T09:33:00.004 as timestamp,
`D001`D001`D002`D001 as device_id,
[36.5, 37.1, , 38.0] as temperature
)
","result = ewmStd(X=sensor_data, com=0.8, ignoreNA=true).groupby(device_id)
"
89,晨曦,,ewmVar,"在物联网平台中，传感器每隔5秒采集一次环境温度并存储在表t_sensor中，表结构为[ts TIMESTAMP, sensor_id SYMBOL, temp DOUBLE]。现需要按传感器分组计算温度读量的指数加权移动方差，使用平滑系数0.3作为权重，计算时要求忽略空值且校正系统偏差，输出结果需保留原始时间戳和设备标识。","t_sensor = table(
[
2023.01.01T00:00:00.000 2023.01.01T00:00:05.000 2023.01.01T00:00:10.000 2023.01.01T00:00:15.000,
`S001`S001`S002`S002,
25.3 25.6 double() 24.8
] as `ts`sensor_id`temp
)
","result = select ts, sensor_id, ewmVar(temp, alpha=0.3, ignoreNA=true, bias=true) as exp_weighted_var from t_sensor group by sensor_id
"
90,晨曦,,exists,"在物联网设备数据存储中，系统将采集的温度数据存入CSV文件后，需要验证文件是否成功写入硬盘，并检测当日归档目录是否正常生成。已知数据文件路径为""/iot/20230515/temp_sensors.csv""，归档目录路径为""/iot/20230515/backup""。请编写代码判断这两个路径是否存在，输出结果存入变量result。","t = table(2023.05.15T09:00:00..2023.05.15T09:04:59 as ts, rand(35.7..42.3, 300) as temperature)
saveText(t, ""/iot/20230515/temp_sensors.csv"")","result = exists([""/iot/20230515/temp_sensors.csv"", ""/iot/20230515/backup""])"
91,晨曦,,exp,"在金融领域的连续复利计算中，假设年利率为5%（变量r），现有三个不同的持有期（变量t为长度为3的向量，值分别为1、2、3年）。请计算每个持有期对应的复利因子，结果存储在result中。输入数据为标量r=0.05和向量t=[1,2,3]，输出格式为与t同长度的向量。","r = 0.05
t = 1..3
","result = exp(r * t)
"
92,晨曦,,eye,在金融投资组合的协方差矩阵初始化中，需要创建一个4x4的特殊数值结构，其主对角线的元素均为1，非对角线元素保持0。已知当前有4只标的资产，请构造该数值结构并将计算结果存入result。输入参数为维度n=4，输出结果变量名为result的矩阵。,n = 4,result = eye(n)
93,晨曦,,getAuthenticatedUsers,某金融机构的实时监控系统需要核查当前所有已建立会话连接的终端用户，以便进行安全审计。已知系统采用向量形式存储活动会话的用户标识信息，请编写代码获取当前所有经过身份验证的活跃用户列表，并将结果存储在变量result中。,空,result = getAuthenticatedUsers()
94,晨曦,,getMachineFingerprint,"某金融交易系统需将当前服务器的唯一硬件标识符生成到指定目录下的授权文件中，用于软件许可验证。已知变量dir为字符串类型，表示目标文件夹路径""/opt/DolphinDB/license""。请编写代码将生成的硬件特征码文件存入该目录，并将操作结果保存到变量result中。","dir = ""/opt/DolphinDB/license""",result = getMachineFingerprint(dir)
95,晨曦,,getNodeHost,在物联网集群监控脚本中，需要获取当前设备的网络标识以便过滤本地节点信息。已知节点信息表nodesTable包含host(文本类型)、port(整型)字段，变量名为nodesTable。请创建远程节点列表remoteNodes，要求排除当前运行节点自身，输出结果为包含host和port字段的表并存储在result变量中。,"nodesTable = table([""10.6.0.6"", ""192.168.1.2"", ""10.6.0.7""] as host, [8000, 8001, 8002] as port)","currentHost = getNodeHost()
result = select host, port from nodesTable where host != currentHost"
96,晨曦,,getPKEYCompactionTaskStatus,某金融量化团队需要监控分布式存储中最近完成的3次主键合并任务状态，同时关注所有正在执行的任务。已知合并任务状态表包含存储卷路径、层级、分块ID、物理表名、涉及文件、触发类型、各阶段时间戳和错误信息。请编写代码获取符合条件的状态记录，结果存入变量result。,,result = getPKEYCompactionTaskStatus(3)
97,晨曦,,getSnapshotMsgId,"在某证券公司的实时交易系统中，高频策略引擎需要追踪最新的股票价格波动特征。现有响应式状态引擎已配置计算每笔交易的10毫秒滑动均价，当网络异常导致订阅中断后，运维人员需要获取引擎最近缓存的位置标识以便无缝续接数据流。已知输入数据表结构为[systime, symbol, price]，引擎实例变量名为stateEngine，请编写代码获取续接起始点标识并存入result变量。","stateEngine = createReactiveStateEngine(name=""priceMAEngine"", metrics=<msavg(price,10)>, dummyTable=table(100:0,`systime`symbol`price,[TIMESTAMP,SYMBOL,DOUBLE]), keyColumn=""symbol"", outputTable=table(10000:0,`systime`symbol`maPrice,[TIMESTAMP,SYMBOL,DOUBLE]))
","# 获取续接点标识并设置新的订阅起始位置
result = getSnapshotMsgId(stateEngine)
"
98,晨曦,,getTradingCalendarType,某公司新增了一个名为CUSTOM的交易日历，并在其中标记了2023年5月1日为休市日。请验证该日历是否采用假日日期存储模式，输入数据为市场标识符CUSTOM字符串，输出结果存入变量result。,"addMarketHoliday(`CUSTOM, 2023.05.01)","result = getTradingCalendarType(""CUSTOM"")"
99,晨曦,,imtForceGCRedolog,在实时交易系统中，发现事务编号为1005的交易记录未完成磁盘持久化，导致后续已落盘的1006、1007号交易日志无法自动回收。请解除该阻塞状态，让系统继续回收符合条件的后续日志。已知输入变量blockedTid=1005，将操作结果存入result。,blockedTid = 1005,result = imtForceGCRedolog(blockedTid)
100,晨曦,,integral,"某物联网设备的功耗函数为P(t)=0.5t²+3t+5，其中t为时间（小时）。计算该设备在时间区间[2,5]内的总能耗。请将结果存储在变量result中。输入数据为函数表达式，输出为积分结果。","def power_consumption(t) {
return 0.5 * pow(t, 2) + 3 * t + 5
}
","result = integral(power_consumption, 2, 5)
"
101,津枝,,invBeta,"在设备可靠性分析中，某组件的故障率服从参数为(5,2)的Beta分布。现需计算该分布在累积概率0.05和0.95处的临界值，用于建立置信区间。输入X为[0.05,0.95]的浮点向量，输出结果需保存到result变量中，数据类型为浮点型向量。",,"result = invBeta(5, 2, [0.05,0.95])"
102,津枝,,invNormal,"某投资组合收益率服从正态分布，已知年化平均收益率为5%，波动率为8%。在风险管理中需要计算不同置信水平下的最大可能损失分位点，请根据置信水平列表[5%, 10%, 15%]对应的累积概率，计算对应收益率分位值。输入数据格式为浮点型向量x=[0.05,0.1,0.15]，输出结果存入变量result的浮点型向量。","x = [0.05, 0.1, 0.15]","result = invNormal(5, 8, x)"
103,津枝,,isColumnarTuple,在设备监测系统中，表t包含设备编号（deviceID，整型向量）和传感器数值（sensorData，数组向量）。其中sensorData列已转为列式存储结构。请判断deviceID和sensorData这两列是否为列式元组，将结果按顺序存入result（布尔值列表）。,"deviceID = [1001, 1002, 1003]
sensorData = [[25,30], [18,22,24], [28,35]]
t = table(deviceID, sensorData)
t.sensorData.setColumnarTuple!()
","result = [isColumnarTuple(t.deviceID), isColumnarTuple(t.sensorData)]
"
104,津枝,,isLeapYear,"某物联网平台记录了多个设备的安装日期，存储于变量installDates中，格式为DATE类型数组[2020.02.29, 2021.03.15, 2024.12.01, 2100.01.01]。需要判断每个安装年份是否满足每四年一闰的规则，最终返回布尔结果数组存入result变量。","installDates = [2020.02.29, 2021.03.15, 2024.12.01, 2100.01.01]
","result = isLeapYear(installDates)
"
105,津枝,,isSpace,"物联网传感器日志中存在异常数据条目，其中某个字段可能仅由不可见空白字符组成。现有一个包含设备ID和原始内容字段的表t，其中content列的字符串可能包含空格、制表符、换行符或有效数据。请筛选出content字段中所有仅由空白类字符组成的记录，返回结果到result变量。输入表结构:t(id string, content string)，输出要求为包含满足条件记录的表格。","
t = table(`Device001`Device002`Device003`Device004 as id, [""\r\n\t"", ""NormalSignal"", string(), ""    ""] as content)
","
result = select * from t where isSpace(content)
"
106,津枝,,kendall,假设环境中部署了三个传感器，记录了10天的监测数据存储在矩阵sensorData中（列为A/B/C），同时采集的湿度数据存在部分缺失。如何分析每个传感器指标与湿度序列的非参数关联程度，并将计算结果存入result？,"sensorData = matrix(rand(100, 30), 10).rename!(1..3, `A`B`C)
humidity = [45, 52, NULL, 60, 55, NULL, 58, 62, 70, 65]","result = kendall(sensorData, humidity)"
107,津枝,,kroghInterpolate,"在材料力学实验中，某材料的位移数据在特定时间点记录了位移值和瞬时速度。已知时间点X包含重复值，其中重复位置的Y值依次表示位移和一阶导数值（速度）。例如X=[0,0,2,2,5]，对应的Y=[0.0,0.5,3.0,-0.2,4.0]。现需要在新的时间点newX=[1.0,2.5,4.0]处估算瞬时速度。输入数据为向量X、Y、newX，输出结果赋值给result。","X = [0,0,2,2,5]
Y = [0.0, 0.5, 3.0, -0.2, 4.0]
newX = [1.0, 2.5, 4.0]","result = kroghInterpolate(X, Y, newX, 1)"
108,津枝,,latestKeyedTable,"在物联网场景中，需要维护温度传感器设备的最新状态。每个设备有唯一标识符(deviceID)，每次采集包含时间戳(timestamp，TIMESTAMP类型)和温度值(temp，INT类型)。当同一设备多次上报时，仅保留时间戳最新的记录。现有初始数据表sensorData结构为[deviceID,timestamp,temp]，数据如下:D001在2023.01.01T09:00:00.000上报30度，D002在2023.01.01T09:00:01.000上报25度。随后插入新数据:D001在2023.01.01T09:00:02.000上报32度，D003在2023.01.01T09:00:03.000上报28度。请创建能自动更新最新状态的数据结构，并将最终结果存入变量result。","deviceID = `D001`D002
timestamp = [2023.01.01T09:00:00.000, 2023.01.01T09:00:01.000]
temp = [30, 25]
sensorData = table(deviceID, timestamp, temp)
","t = latestKeyedTable(`deviceID, `timestamp, sensorData)
insert into t values (`D001`D003, [2023.01.01T09:00:02.000, 2023.01.01T09:00:03.000], [32, 28])
result = t
"
109,津枝,,loadDistributedInMemoryTable,在物联网监控系统中，存在分布式存储的设备状态表dev_status，包含时间戳（ts）、设备编号（dev_id）、电压值（voltage）三个字段。现需要将该表加载到内存进行实时分析，如何操作？输入数据已按设备编号的哈希值分配到2个分区，要求返回内存表操作句柄到result变量。,"createDistributedInMemoryTable(`dev_status, `ts`dev_id`voltage, `TIMESTAMP`INT`DOUBLE, HASH, [INT, 2], `dev_id)
ts = 2024.05.01T00:00:00.000 + 0..59
dev_id = 0..59 % 10
voltage = rand(230.0, 60)
tmp = table(ts, dev_id, voltage)
status_table = loadDistributedInMemoryTable(`dev_status)
status_table.append!(tmp)
","result = loadDistributedInMemoryTable(""dev_status"")
"
110,津枝,,lowLong,在金融交易系统中，每条记录的全局唯一标识符由16字节的UUID构成。需将所有标识符的低8字节数据转换为长整数，用于简化后续查询。给定输入表t包含名为uid的UUID类型列，编写代码生成对应的长整数序列，存储到变量result。,"t = table(uuid([""e7d4a8f2-1d94-4f63-ae56-9cfb183c0000"", ""3a4eb6c0-a5d2-11ee-95e6-9eb6d9300000""]) as uid)
","result = lowLong(t.uid)
"
111,津枝,,mad,某物联网系统采集了三个设备连续四小时的噪声分贝数据，存储为矩阵noiseDB，其中每列对应一个设备。现在需要评估各设备噪声的稳定性，请基于中位数基准计算每个设备的离散程度指标，并将结果保留两位小数。输入数据为4行3列的矩阵，变量名为noiseDB，输出结果应存储在变量result中，格式为浮点型向量。,"noiseDB = matrix([35.2, 48.6, 42.1, 50.8], [28.9, 30.0, 32.4, 29.7], [55.0, 52.3, 53.9, 54.2])
","result = round(mad(noiseDB, true), 2)
"
112,津枝,,matrixRank,在分析一组物联网传感器的电压读数时，存在三个检测节点的数值矩阵sensorVoltage，其中前两列传感器存在线性比例关系，第三列为独立测量值。请确定该数据矩阵的有效独立维度数量，并将计算结果存储在变量result中。输入数据为3列3行的二维浮点矩阵，输出结果为整型标量。,"sensorVoltage = matrix([5.6, 3.8, 9.1], [11.2, 7.6, 18.2], [2.3, 4.7, 1.8])",result = matrixRank(sensorVoltage)
113,津枝,,milastNot,"在监测某设备运行状态时，每小时的读数存在缺失（NULL）。需要计算每个时刻最近4次读数中最后一个有效值的索引。若窗口内数据点不足2个，返回-1。给定读数向量sensorReadings为[NULL, 150, NULL, 200, 250, NULL, 300]，输出结果格式为向量result。","sensorReadings = [NULL, 150, NULL, 200, 250, NULL, 300]
","result = milastNot(sensorReadings, 4, 2)
"
114,津枝,,mode,某工厂记录了多台设备的故障代码，数据存储在表t中，包含两列:device_id（设备编号）和error_code（错误码）。请统计每台设备出现频率最高的有效错误码（忽略空值），将计算结果存储在result变量中。输入表包含以下数据:设备'A'出现3次100、2次200；设备'B'出现1次300、3次400；设备'C'出现3次500、1次600和1个空值。,"t = table(
`A`A`A`A`A`B`B`B`B`B`C`C`C`C as device_id,
[100,100,100,200,200,300,400,400,400,NULL,500,500,500,600] as error_code
)",result = select mode(error_code) as common_error from t group by device_id
115,津枝,,mskew,"假设有一个5天的股票价格矩阵priceMatrix，包含两列分别为开盘价和收盘价，数据格式为[[120.5,121.0],[121.3,120.8],[119.8,122.5],[122.0,123.0],[123.5,124.2]]。请基于3日滑动窗口计算每列数据的无偏斜度统计量，要求输出结果保留到变量result中。","priceMatrix = matrix([120.5, 121.3, 119.8, 122.0, 123.5], [121.0, 120.8, 122.5, 123.0, 124.2])","result = mskew(priceMatrix, 3, false)"
116,津枝,,mwavg,"在物联网环境监测中，某传感器每半小时采集一次气温数据（变量名为temp，值为[18.5,19.2,20.1,21.6,22.0,21.3]）和空气质量指数（变量名为aqi，值为[30,45,60,85,75,95]）。需要计算每个监测点前4个时段的气象加权均值，权重使用实时空气质量指数，且至少需要2个有效观测值。最终结果保存到result变量，输出格式应与输入数组长度一致。","temp = [18.5,19.2,20.1,21.6,22.0,21.3]
aqi = [30,45,60,85,75,95]","result = mwavg(temp, aqi, 4, 2)"
117,津枝,,nssPredict,某投资公司使用Nelson-Siegel模型进行国债收益率曲线建模。已知模型参数β0=0.048，β1=-0.015，β2=0.123，λ=1.85，现有两种国债剩余期限分别为6个月和3年。请创建对应的利率预测模型，计算这两种债券的预期收益率，并将结果存储在result变量中。输入模型字典名为model，期限数组变量名为maturity，输出为浮点型向量。,"model = dict(STRING, ANY)
model[`modelName] = ""ns""
model[`params] = [0.048, -0.015, 0.123, 1.85]
maturity = [0.5, 3.0]","result = nssPredict(model, maturity)"
118,津枝,,nullCompare,"计算正向资金流时，某股票的价格变动向量deltasTp中存在空值，要求当变动大于0时取对应交易量volume，否则取0，且在空值位置保留空值。给定deltasTp=[NULL,-0.5,1.2,NULL,3]、volume=[100,200,150,180,220]，如何生成正向资金流向量result？","deltasTp = [NULL, -0.5, 1.2, NULL, 3.0]\nvolume = [100, 200, 150, 180, 220]","result = iif(nullCompare(>, deltasTp, 0), volume, 0)"
119,津枝,,olsEx,"在物联网设备监控场景中，某分布式数据库存储了传感器读数表，包含设备编号（deviceID）、采集时间（timestamp）、温度（temperature）、湿度（humidity）和电池电压（voltage）。现需对温度超过30度的记录，以电压为因变量，湿度为自变量，包含常数项，执行线性回归分析，要求返回包含方差分析、回归统计和系数估计的完整报告。输入数据来自分区数据库""sensorDB""的""readings""表，Y列为voltage，X列为humidity，结果存入变量result。","n = 8000
deviceID = rand(100, n)
timestamp = 2023.06.01T00:00:00.000 + rand(86400000, n)
temperature = rand(25..45, n)
humidity = rand(10.0..95.0, n)
voltage = rand(3.0..4.2, n)
t = table(deviceID, timestamp, temperature, humidity, voltage)

if existsDatabase(""dfs://sensorDB""):
dropDatabase(""dfs://sensorDB"")
db = database(""dfs://sensorDB"", RANGE, 0 51 101)
loadTextEx(db, ""readings"", ""deviceID"", t)
","ds = sqlDS(<select humidity as X, voltage as Y from sensorDB::readings where temperature > 30>)
result = olsEx(ds, `Y, `X, true, 2)
"
120,津枝,,qclp,"某投资组合需配置三种资产，预期收益率分别为0.1、0.2、0.15。要求满足:(1)年化波动率不超过10%；(2)单资产配置比例在5%-60%之间；(3)总仓位100%；(4)各资产比例与基准配置[0.2,0.3,0.5]的偏离度总和不超过0.4。给定协方差矩阵V=[[0.04,-0.005,0.01],[-0.005,0.09,0.015],[0.01,0.015,0.06]]，求最大化预期收益的最优配置权重，结果存入result。","r = [0.1, 0.2, 0.15]
V = matrix([[0.04,-0.005,0.01], [-0.005,0.09,0.015], [0.01,0.015,0.06]])
k = pow(0.1, 2)
A = (eye(3) join (-eye(3))).transpose()
b = [0.6, 0.6, 0.6, -0.05, -0.05, -0.05]
Aeq = matrix([1,1,1], 1, 3)
beq = [1.0]
x0 = [0.2, 0.3, 0.5]
c = 0.4
","result = qclp(-r, V, k, A, b, Aeq, beq, x0, c)
"
121,津枝,,repartitionDS,在金融数据分析中，需要将分布式存储的股票交易记录按股票代码区间重新组织。给定分布式表tradeTable包含symbol(整型股票代码)、date(日期型)、price(双精度)字段，数据库按日期VALUE分区和symbol RANGE组合分区。现需创建三个数据源分别对应symbol在[0-30)、[30-60)、[60-100]区间，输入数据准备代码已创建对应结构的分布式表，请编写执行该分片操作的代码，结果存储在result变量。,"n = 1000
symbol = rand(100, n)
date = take(2023.01.01..2023.01.05, n)
price = rand(100.0, n)
t = table(symbol, date, price)

dbDate = database("""", VALUE, 2023.01.01..2023.01.05)
dbSymbol = database("""", RANGE, 0 30 60 100)
db = database(""dfs://stockDB"", COMPO, [dbDate, dbSymbol])
tradeTable = db.createPartitionedTable(t, `tradeTable, `date`symbol)
tradeTable.append!(t)
","result = repartitionDS(<select * from tradeTable>, `symbol, RANGE, [0,30,60,100])
"
122,津枝,,residual,在分析某设备连续五日的能耗时，已知每日电压、电流、温度三个影响因素存储为5行3列的矩阵X，实际能耗记录为向量Y。已通过线性回归获取模型系数params，需计算每日预测值与实际值的差异，结果存入长度为5的向量result。,"Y = [12.4, 14.1, 13.8, 15.7, 16.2]
X = matrix([220, 10, 25], [215, 12, 26], [218, 11, 24], [224, 9, 27], [210, 13, 28]).transpose()
params = ols(Y, X)","result = residual(Y, X, params)"
123,津枝,,rowCummax,"某金融系统记录了三个时间点各股票的实时价格，存储在矩阵m中，每行代表一个时间点，每列对应不同股票。需要计算每个时间点各股票价格在顺序遍历过程中出现的累积最大值，并将结果存入变量result。输入矩阵m的结构为:[[9.2,3.5,7.1],[2.8,4.3,5.0],[1.6,5.7,6.2]]，输出应为与输入维度相同的矩阵。","m = matrix([[9.2, 3.5, 7.1], [2.8, 4.3, 5.0], [1.6, 5.7, 6.2]])",result = rowCummax(m)
124,津枝,,rowCumsum,"现有列式元组变量tp存储两台设备每天的能耗数据，每台设备有三天的记录分别为[10,15,20]和[5,8,12]。需要生成每个设备每天的累计能耗报表，要求结果保留原始数据结构并存入result。","
tp = [[10, 15, 20], [5, 8, 12]]
tp.setColumnarTuple!()
","
result = rowCumsum(tp)
"
125,津枝,,rowImin,"在物联网传感器监测中，某设备每10分钟采集五个监测点的能耗值（energy1至energy5）和对应位置的温度值（temp1至temp5）。需要找出每组数据中能耗最低的监测点位置索引，并使用该索引获取对应的温度数值。给定输入表sensor_readings包含列:timestamp[时间戳],device_id[设备编号],energy1[DOUBLE],energy2[DOUBLE],energy3[DOUBLE],energy4[DOUBLE],energy5[DOUBLE],temp1[DOUBLE],temp2[DOUBLE],temp3[DOUBLE],temp4[DOUBLE],temp5[DOUBLE]。要求输出result为包含对应温度值的数组向量。","sensor_readings = table(
100:0,
`timestamp`device_id`energy1`energy2`energy3`energy4`energy5`temp1`temp2`temp3`temp4`temp5,
[TIMESTAMP,SYMBOL,DOUBLE,DOUBLE,DOUBLE,DOUBLE,DOUBLE,DOUBLE,DOUBLE,DOUBLE,DOUBLE,DOUBLE]
)
data = [
(2023.01.01T10:00:00, `DZ-003, 45.1, 44.8, 43.2, 46.5, 44.1, 28.3, 29.1, 27.8, 30.2, 28.9),
(2023.01.01T10:10:00, `DZ-003, 43.6, 42.9, 41.8, 44.3, 40.5, 27.9, 28.4, 26.1, 29.8, 25.3),
(2023.01.01T10:20:00, `DZ-003, 46.2, 47.1, 45.9, 48.0, 44.8, 29.5, 30.2, 28.7, 31.0, 27.6)
]
for row in data:
sensor_readings.append(row)
","result = select rowAt(matrix(temp1,temp2,temp3,temp4,temp5), rowImin(energy1,energy2,energy3,energy4,energy5)) as optimal_temp from sensor_readings
"
126,津枝,,rowSize,在物联网设备监控场景中，表device_readings包含三列传感器数据（含缺失值），请计算每行记录中包含的所有监测项数量。输入数据格式:表device_readings含id列（INT类型），sensor1（DOUBLE类型），sensor2（DOUBLE类型），sensor3（DOUBLE类型）。输出结果保存到变量result，要求结果为与输入行数相同的整型向量。,"device_readings = table(1..5 as id, [23.5, NULL, 45.1, NULL, 38.9] as sensor1, [NULL, 18.4, 22.3, 25.9, NULL] as sensor2, [19.8, 33.1, NULL, NULL, 40.5] as sensor3)
","result = rowSize(device_readings[`sensor1], device_readings[`sensor2], device_readings[`sensor3])
"
127,津枝,,select,"在物联网设备监控中，某表记录了各设备每小时温度（列名为temp1到temp5），要求查询所有温度数据并计算每行的平均温度，结果需保留原始温度列并新增平均值列avg_temp。输入表结构为deviceID SYMBOL, temp1 INT, temp2 INT, temp3 INT, temp4 INT, temp5 INT，最终将结果赋值给变量result。","deviceID = `D001`D002`D003
temp1 = 25 28 30
temp2 = 26 27 29
temp3 = 24 26 28
temp4 = 27 29 31
temp5 = 23 25 27
t = table(deviceID, temp1, temp2, temp3, temp4, temp5)","result = select temp1...temp5, (temp1+temp2+temp3+temp4+temp5)/5 as avg_temp from t"
128,津枝,,seq,在物联网监控系统中，传感器从2023年5月15日09:30开始到09:45结束每分钟采集一次数据。需要生成该时间段内所有的时间戳列表，并存储在result变量中。输入数据为起始时间startTime=2023.05.15T09:30和结束时间endTime=2023.05.15T09:45，格式为分钟精度的时间类型。输出结果为时间类型的向量。,"startTime = 2023.05.15T09:30
endTime = 2023.05.15T09:45",result = startTime..endTime
129,津枝,,setDatanodeRestartInterval,在物联网边缘计算场景中，管理员发现某网关节点偶发断连但能自行恢复。现需配置集群在节点失联5分钟后执行自动恢复，并验证参数是否生效。已知系统时间单位为秒，输入参数为整数型配置值，输出结果为验证数值存入result变量。,,"setDatanodeRestartInterval(300)
result = getDatanodeRestartInterval()
"
130,津枝,,setMemLimitOfAllTempResults,某证券公司的实时风控系统在执行大规模交易数据分析时，频繁出现内存溢出。为防止临时计算结果耗尽资源，需要将所有分布式查询中间结果的内存使用上限调整为1.2GB，并将确认生效的阈值存入result变量。编写解决方案代码（输入数据无需准备，输出结果为浮点数值）。,,"setMemLimitOfAllTempResults(1.2)
result = getMemLimitOfAllTempResults()"
131,津枝,,setPrefetchComputeNodeData,某金融机构在实时数据处理过程中，管理员发现计算节点在高负载时内存使用过高。为了缓解内存压力，需要临时禁用数据预取机制，并将调整后的配置状态保存到变量result中以供验证。请编写代码实现这一需求。（输入:布尔参数false，输出:布尔类型变量result）,,setPrefetchComputeNodeData(false)\nresult = getPrefetchComputeNodeData()
132,津枝,,setStreamTableTimestamp,"在物联网设备监控场景中，一个共享流表需要自动记录服务器接收数据的系统时间到指定列。已知流表结构为 [time TIMESTAMP, device_id SYMBOL, temperature DOUBLE, server_time TIMESTAMP]，变量名为 deviceStream。请构造一个操作:向表中插入一条设备A在2023.09.15T14:30:00上报的温度28.5度记录后，获取包含自动生成时间戳的完整数据，并将结果存储在result变量中。","# 创建共享流表并设置时间戳列
share streamTable(10000:0, `time`device_id`temperature`server_time, [TIMESTAMP,SYMBOL,DOUBLE,TIMESTAMP]) as deviceStream
setStreamTableTimestamp(deviceStream, `server_time)

# 清空可能存在的测试数据
try: deviceStream.drop() 
except: pass
","# 插入不含时间戳列的数据
insert into deviceStream values(2023.09.15T14:30:00, `A, 28.5)

# 查询最新数据并赋值结果
result = select * from deviceStream
"
133,津枝,,sqlDS,"某物联网平台按日期和设备编号对传感器数据进行复合分区存储，现需要并行处理2023.05.15当天所有设备的温度读数。已知分布式表名称为sensor_logs，包含字段（date, device_id, temp），请构造适用于分布式计算的数据源集合，并将结果存储在变量中。","
n=800
date=take(2023.05.14..2023.05.16,n)
device=take(`D001`D002`D003,n)
temp=rand(20.0..40.0,n)
t=table(date, device, temp)

db_date=database("""",VALUE,2023.05.14..2023.05.16)
db_device=database("""",VALUE,`D001`D002`D003)
db=database(""dfs://iot"",COMPO,[db_date,db_device])
sensors=db.createPartitionedTable(t,`sensor_logs,`date`device).append!(t)
","
result = sqlDS(<select device, temp from sensor_logs where date=2023.05.15>)
"
134,津枝,,strip,"在物联网设备监测场景中，传感器采集的温度值存在字符串首尾带有换行符和制表符的情况。给定包含设备ID和原始温度记录的表deviceTemp（两列:deviceID字符串类型，rawTemp字符串类型），请对rawTemp字段进行规范化处理，返回去除首尾空白控制符后的结果。输入表结构示例:(""D001"", ""\n36.7°C\t\n"")，要求输出结果存储在result变量中，格式与输入表相同但值已清洗。","deviceTemp = table([""D001"", ""D002""] as deviceID, [""\n36.7°C\t\n"", ""\t22.5°C\n\r""] as rawTemp)
","result = select deviceID, strip(rawTemp) as cleanedTemp from deviceTemp
"
135,津枝,,tmcount,物联网场景中，某传感器记录了不同时间点的温度数据，其中部分数据存在缺失。需要计算每个时间点过去两天的窗口内有效温度记录的次数。输入表sensorData包含时间列t（类型为DATE）和温度列x（存在NULL值），输出结果包含原表所有列及统计列result。,"sensorData = table(
[2023.01.01, 2023.01.02, 2023.01.03, 2023.01.05, 2023.01.06] as t,
[23.5, NULL, 24.0, 25.1, NULL] as x
)","result = select *, tmcount(t, x, 2d) as result from sensorData"
136,津枝,,tmcovarTopN,"在物联网设备监控场景中，某气象站每2小时采集一次风向数据（wind_dir）和气压数据（air_press），每个记录包含信号稳定性指标（stability）。现需计算每个采集时刻前6小时窗口中，稳定性最强的3条有效记录，求这两个气象指标的协方差，结果存入result。输入表结构:(timestamp[时间戳], wind_dir[浮点数], air_press[整数], stability[整型])。","timestamp = 2023.06.01T08:00:00 + 0..3*2
wind_dir = [12.3, 15.1, 14.8, 8.5, 9.2, 10.9]
air_press = [1002, 1005, 998, 1001, 995, 1008]
stability = [85, 92, , 78, 82, 95]
t = table(timestamp as timestamp, wind_dir as wind_dir, air_press as air_press, stability as stability)
","result = tmcovarTopN(timestamp, wind_dir, air_press, stability, 6, 3, false)
"
137,津枝,,tmmin,某物联网温度监测系统记录了五个时间点的设备温度数据，其中存在传感器异常导致的缺失值。请基于时间维度，为每个观测点计算过去三天内的最低有效温度值（包含当前行），缺失值不参与计算。输入数据表名为m，包含两列:日期类型的时间戳t（格式为YYYY.MM.DD）和浮点类型的温度值x。输出结果存储在result中要求保留原始数据并新增结果列。,"T = [2023.01.01, 2023.01.02, 2023.01.03, 2023.01.04, 2023.01.05]
X = [5.0, 3.5, NULL, 4.2, 6.1]
m = table(T as t, X as x)
","result = select *, tmmin(t, x, 3d) as min_temp from m
"
138,津枝,,updateOrderBookEngineParams,某交易日开盘前，需要为两只证券配置前一交易日收盘价分别为23.5和15.8，设置对应的涨停价为25.85（+10%）和17.38（+10%），跌停价为21.15（-10%）和14.22（-10%），且只处理代码为'600000.SH'的行情数据。已知引擎对象已创建为obEngine，请编写初始化配置代码。,"prevCloseDict = dict(['600000.SH', '000001.SZ'], [23.5, 15.8])
maxPriceDict = dict(['600000.SH', '000001.SZ'], [25.85, 17.38])
minPriceDict = dict(['600000.SH', '000001.SZ'], [21.15, 14.22])
targetCodes = ['600000.SH']
","result = updateOrderBookEngineParams(obEngine, prevClose=prevCloseDict, maxPrice=maxPriceDict, minPrice=minPriceDict, outputCodeMap=targetCodes)
"
139,津枝,,vectorNorm,"在金融风险评估中，给定一个包含资产收益率的2x2矩阵，需要计算该矩阵在双轴方向上的核范数，并保持结果维度与原数据一致。已知矩阵数据存储在变量x中，格式为[[1,3],[2,4]]，请生成计算结果并存储在result变量中。","x = matrix([[1,3],[2,4]])","result = vectorNorm(x, ord='nuc', axis=(0,1), keepDims=true)"
140,津枝,,window,假设有一个物联网传感器按时间戳记录温度数据，需要计算每个时间点未来1小时到未来3小时窗口内的最高温度。给定时间序列变量tempSeries，其索引为时间类型，值为温度数值，输出结果应存储在result变量中，格式与输入相同。,"timestamp = [2023.01.01T09:00:00, 2023.01.01T10:30:00, 2023.01.01T12:00:00, 2023.01.01T13:15:00, 2023.01.01T14:45:00]
temperature = [28.5, 30.1, 29.8, 31.5, 32.0]
tempSeries = indexedSeries(timestamp, temperature)
","result = window(max, tempSeries, 1h:3h)
"
141,津枝,,appendMsg,某物联网场景需要实时监测传感器数据，当温度连续3次超过45度时触发警报。输入表名为sensor_readings，包含时间戳(timestamp)、设备编号(device_id)、温度(temp)字段，要求将处理结果实时写入alert_output表。请写出流处理订阅部分的代码逻辑，其中输入数据变量为sensorData，输出变量名为result。,"share streamTable(10000:0, `timestamp`device_id`temp, [TIMESTAMP, SYMBOL, DOUBLE]) as sensor_readings
alert_output = table(10000:0, `timestamp`device_id`check_result, [TIMESTAMP, SYMBOL, BOOL])

engine2 = createReactiveStateEngine(
name=""alert_engine"",
metrics=[<temp > 45 && temp.prev > 45 && temp.prev.prev > 45>],
dummyTable=sensor_readings,
outputTable=alert_output,
keyColumn=""device_id"",
snapshotDir=""/data/snapshot/sensor"",
snapshotIntervalInMsgCount=50
)

n=200
timestampv = 2024.05.20T09:00:00.000 + 1..n
devicev = take(`D001,n//2) join take(`D002,n//2)
tempv = 43 + rand(3.0,n) + 10*(0..(n-1))%5//3
sensorData = table(timestampv as timestamp, devicev as device_id, tempv as temp).sortBy!(`timestamp)
","subscribeTable(
tableName=""sensor_readings"",
actionName=""alert_monitor"",
offset=0,
handler=appendMsg{engine2},
msgAsTable=true,
handlerNeedMsgId=true
)
sensor_readings.append!(sensorData)
result = select * from alert_output
"
142,津枝,,asinh,"在物联网数据处理中，某设备采集的3个传感器通道经过双曲变换后的数值存储在名为sensorReadings的2行3列矩阵中，数据为[[0.7647,0.8158,0.1407],[1.0942,1.4436,2.3124]]。请编写代码将其还原为原始测量值，并将计算结果存入变量result。","sensorReadings = matrix([0.7647,0.8158,0.1407],[1.0942,1.4436,2.3124])",result = asinh(sensorReadings)
143,津枝,,assert,"在物联网设备的单元测试中，需验证传感器温度读数的平均值是否符合预期。给定温度数据向量tempReadings为[25.3, 26.1, 24.8, 27.5, 23.9]，预期计算结果精确到两位小数为25.52。请编写测试代码，若计算正确则将平均值存入变量result。","tempReadings = [25.3, 26.1, 24.8, 27.5, 23.9]","avgTemp = avg(tempReadings); assert round(avgTemp, 2) == 25.52; result = avgTemp"
144,津枝,,atan,"物联网场景中，某设备记录了机械臂运动的三个关键斜率值slope_values=[0.1, 0.5, 1.0]，需要将这些数值转换为对应的倾斜角度（以度为单位）。已知输入数据为浮点型向量slope_values，要求计算结果保留四位小数，最终输出结果存储在变量result中。","slope_values = [0.1, 0.5, 1.0]","result = round(rad2deg(atan(slope_values)), 4)"
145,津枝,,bfill,在物联网系统中，某型号传感器的电流监测数据存在传输丢失问题。现有表格sensor_log包含时间戳（ts，TIMESTAMP类型）、设备编号（device_id，SYMBOL类型）和电流读数（current，DOUBLE类型），其中current列存在多个缺失值。请对每个设备的分组数据，使用后续有效电流值对缺失位置进行填充，且最多允许连续填充两次缺失。处理后结果存入result变量。,"ts = 2023.01.01T09:00:00 + 0..4
device_id = take(`D001`D002, 5)
current = [5.2, , , 6.8, ]
sensor_log = table(ts, device_id, current)
","result = select ts, device_id, bfill(current, 2) as current from sensor_log context by device_id
"
146,津枝,,bondAccrInt,某公司发行了一款面值为2000元的债券，结算日为2023年5月15日，到期日为2028年5月15日，年票息率为6%，每季度支付一次利息，采用实际/360日计数基准。现需要计算该债券自上次付息日到结算日期间累计的应付利息，并将结果存储在result变量中。已知输入变量名称:settlement_date（DATE类型）、maturity_date（DATE类型）、coupon_rate（DOUBLE类型）、freq（INT类型）、par_value（数值类型）、basis_type（INT类型）。,"settlement_date = 2023.05.15
maturity_date = 2028.05.15
coupon_rate = 0.06
freq = 4
par_value = 2000
basis_type = 2
","result = bondAccrInt(settlement=settlement_date, maturity=maturity_date, coupon=coupon_rate, frequency=freq, par=par_value, basis=basis_type)
"
147,津枝,,bondYield,某债券交易员需要评估两只债券的收益率。已知结算日分别为2023年5月20日和2023年5月20日，到期日为2028年12月15日和2028年12月15日，年票面利率均为4.5%，净价分别为98.5元和98.5元，赎回价均为100元，季度付息，日计数基准采用实际/365规则。要求使用Newton迭代法和Brent算法两种优化方法进行计算，并将结果合并为一个向量。输入数据均为标量（除method参数外），输出格式为DOUBLE类型的2元素向量，存储在变量result中。,"settlement = 2023.05.20
maturity = 2028.12.15
coupon = 0.045
price = 98.5
redemption = 100
frequency = 4
basis = 3
method = ['newton', 'brent']","result = bondYield(settlement, maturity, coupon, price, redemption, frequency, basis, method)"
148,津枝,,businessDay,在证券交易中，需要将一组日期调整为有效交易日（周一至周五），若非交易日则取最近的前一个交易日。同时设定调整周期从日期序列的起始点开始，每隔3个有效交易日更新一次基准日期。给定日期序列date为2023.05.06至2023.05.12（包含7个连续日期），请生成调整后的日期序列，存入result变量。输入数据为DATE类型向量，输出为相同长度的DATE向量。,date = 2023.05.06 + 0..6,"result = businessDay(date, min(date), 3)"
149,津枝,,cdfZipf,"在分析物联网设备故障次数的分布时，已知设备最大故障等级为5，形状参数为1.2。请计算设备故障等级为1、3、5时的累计发生概率。输入数据格式:数值型标量num=5，浮点型标量exponent=1.2，整型向量X=[1,3,5]，输出结果存入变量result。","num = 5
exponent = 1.2
X = 1 3 5","result = cdfZipf(num, exponent, X)"
150,津枝,,chiSquareTest,某电商平台收集了不同时段两种广告策略的点击分布数据，格式为3行2列的矩阵m。矩阵行标签为Morning/Afternoon/Evening表示三个时段，列标签为StrategyA/StrategyB表示两种策略，数值为对应时段的点击次数。请验证广告点击分布是否与时段无关，将检验结果存入result变量。,"m = matrix([120, 150], [80, 200], [200, 180])
m.rename!([""StrategyA"", ""StrategyB""], `Morning`Afternoon`Evening)",result = chiSquareTest(m)
151,涯明,,clearComputeNodeDiskCache,在物联网边缘计算场景中，某计算节点完成实时传感器数据聚合运算后，需要立即释放存储资源以便处理下一批数据流。请编写操作代码清除该节点上由磁盘缓存占用的物理空间，将执行结果保存在变量result中。输入数据无需额外准备，输出结果为操作状态。,,result = clearComputeNodeDiskCache()
152,涯明,,clip,"在物联网设备的温度监控中，每个传感器设置了统一最低温度阈值为10度，各设备独立的高温报警阈值存储在向量highs中。现采集到温度数据向量temps为[15.2, 22.5, -3.4, 40.1, 38.9]，各设备高温阈值分别为20/25/15/35/40。请将温度数据约束到有效区间范围（低于10度的设为10度，高于设备阈值的设为阈值温度），生成结果向量result。","temps = [15.2, 22.5, -3.4, 40.1, 38.9]
highs = [20,25,15,35,40]
low = 10
","result = clip(temps, low, highs)
"
153,涯明,,close,"在实时订单处理中，程序需要将一批交易数据临时保存到文件""order_log.tmp""中。已创建写入句柄conn并写入了一行数据（格式为订单ID,价格,数量），后续需要释放系统资源确保数据持久化。已知输入变量为文件句柄conn，要求输出操作结果到变量result。","
conn = file(""order_log.tmp"", ""w"")
conn.writeLine(""O1001,156.78,500"")
","
result = close(conn)
"
154,涯明,,createAnomalyDetectionEngine,在物联网设备监控场景中，需要实时检测温度传感器是否超过静态阈值以及是否高于最近5秒窗口的最大值。已知输入流表包含时间戳(time)、设备编号(deviceId)、温度(temp)字段，输出表需记录异常时间、设备ID、检测类型和描述。请编写流处理逻辑实现该需求。,"share streamTable(1000:0, `time`deviceId`temp, [TIMESTAMP, SYMBOL, DOUBLE]) as sensorStream
share table(1000:0, `time`deviceId`type`description, [TIMESTAMP, SYMBOL, INT, SYMBOL]) as alertOutput
","engine = createAnomalyDetectionEngine(
name=""iotMonitor"",
metrics=<[temp > 35, temp > max(temp)]>,
dummyTable=sensorStream,
outputTable=alertOutput,
timeColumn=`time,
keyColumn=`deviceId,
windowSize=5000,
step=5000,
anomalyDescription=[""Exceed fixed threshold"", ""Above window max""]
)
subscribeTable(tableName=""sensorStream"", actionName=""iotAlert"", handler=append!{engine}, msgAsTable=true)

tmpData = table(2023.09.15T09:00:00.000 + 1000..3000 as time, take(`D001`D002,3) as deviceId, [34.5, 36.2, 37.8] as temp)
insert into sensorStream values(tmpData.time, tmpData.deviceId, tmpData.temp)
result = select * from alertOutput
"
155,涯明,,createOrderBookSnapshotEngine,某券商需要实时监控上交所可转债市场的买卖盘口变化。输入数据包含以下字段:SecurityID（SYMBOL）、Time（TIME）、Type（INT）、Price（LONG）、Qty（LONG）、BSFlag（INT）、BuyNo（LONG）、SellNo（LONG）、ApplSeqNum（LONG）、ReceiveTime（NANOTIMESTAMP），数据结构存储为tradeStream表。要求每500毫秒生成十档买卖报价的快照，仅输出代码为123045.SH和113021.SH的数据，并对延迟超过2秒的异常数据进行强制处理。输出结果存储到result变量。,"colNames = `SecurityID`Time`Type`Price`Qty`BSFlag`BuyNo`SellNo`ApplSeqNum`ReceiveTime
colTypes = [SYMBOL, TIME, INT, LONG, LONG, INT, LONG, LONG, LONG, NANOTIMESTAMP]
tradeStream = table(1:0, colNames, colTypes)

prevClose = dict([""123045.SH"",""113021.SH""], [156.34, 203.75])
inputColMap = dict(
`codeColumn`timeColumn`typeColumn`priceColumn`qtyColumn`buyOrderColumn`sellOrderColumn`sideColumn`msgTypeColumn`seqColumn`receiveTime,
`SecurityID`Time`Type`Price`Qty`BuyNo`SellNo`BSFlag`Type`ApplSeqNum`ReceiveTime
)

outputColMap = [""code"",""timestamp"",""bidsPrice1"",""asksPrice1"",""bidVolumes1"",""askVolumes1""]
outputTable = table(100000:0, outputColMap, [SYMBOL,TIMESTAMP,DOUBLE,DOUBLE,LONG,LONG])
","engine = createOrderBookSnapshotEngine(
name=""bondMonitor"",
exchange=""XSHGBOND"",
orderbookDepth=10,
intervalInMilli=500,
date=2023.05.15,
startTime=09:30:00.000,
prevClose=prevClose,
dummyTable=tradeStream,
outputTable=outputTable,
inputColMap=inputColMap,
outputCodeMap=[""123045.SH"",""113021.SH""],
triggerType=""independent"",
forceTriggerTime=2000,
checkRestrict=false
)

result = select * from outputTable where timestamp >= 2023.05.15T14:55:00.000
"
156,涯明,,crmwCBond,某金融机构持有两份信用风险缓释凭证，标的债券均到期一次还本付息。第一份估值日为2025年1月15日，标的债券2025年7月15日到期，到期兑付108.5万元，创设机构收益率为年化6.2%，标的债券收益率为年化6.5%；第二份估值日为2025年2月20日，标的债券2025年8月20日到期，到期兑付112万元，创设机构收益率6.8%，标的债券收益率7.1%。请计算这两份凭证的估值价格，结果存储在变量result中。输入数据格式:DATE类型向量settlement和maturity，DOUBLE类型向量fv、ys、yd。输出格式:DOUBLE类型向量result。,"settlement = [2025.01.15, 2025.02.20]
maturity = [2025.07.15, 2025.08.20]
fv = [108.5, 112.0]
ys = [0.062, 0.068]
yd = [0.065, 0.071]
","result = crmwCBond(settlement, maturity, fv, ys, yd)
"
157,涯明,,cumavg,某工厂的两个温度传感器每半小时记录一次数据，传感器A的记录依次为10°C、15°C、缺失值、18°C，传感器B的记录依次为8°C、12°C、14°C、缺失值。将这些数据构建为一个4行2列的矩阵sensorMatrix，其中第1列对应传感器A，第2列对应传感器B。现在需要计算每个传感器每次记录的实时累积平均温度（缺失值不参与计算），最终将结果存储在变量result中。,"sensorMatrix = matrix([10,15,NULL,18], [8,12,14,NULL])",result = cumavg(sensorMatrix)
158,涯明,,cumfirstNot,"某物联网设备记录了温度传感器和湿度传感器的状态数据，其中温度列为[NULL, 25, NULL, 23, 22]，湿度列为[99, -99, -99, 95, 90]，-99表示无效值。请创建累计窗口函数，针对温度列查找首个非空值，针对湿度列查找首个非-99的值，生成填充矩阵。","
stateData = matrix(NULL 25 NULL 23 22, 99 -99 -99 95 90)
","
result = cumfirstNot(stateData, [NULL,-99])


// 输出结果为:
// #0      #1
// -----  -----
//        99  
// 25     99  
// 25     99  
// 23     95  
// 22     90"
159,涯明,,cumnunique,在物联网设备数据采集中，需要动态计算每个数据点之后累积出现的有效设备标识数量（排除NULL值）。已知表sensor_data包含列device_id（可能存在NULL无效值）和timestamp，其中device_id为字符串类型。输出结果到变量result，展示每行对应的累计有效设备种类数。,"sensor_data = table([NULL, ""DV001"", ""DV002"", NULL, ""DV001"", ""DV003""] as device_id, 2023.01.01T09:00:00..2023.01.01T09:00:05 as timestamp)
","result = select cumnunique(device_id, true) as cumVal from sensor_data
"
160,涯明,,cumstdp,"某物联网设备每隔两小时采集一次温度数据，存储为名为sensorReadings的向量，数据为[23.5, 24.1, NULL, 25.8, 23.9]。需要分析设备测量值的稳定性变化，请计算从第一个数据点开始逐步累积的总体离散程度指标，要求输出结果存储在变量result中。","sensorReadings = [23.5, 24.1, NULL, 25.8, 23.9]",result = cumstdp(sensorReadings)
161,涯明,,dot,"在投资组合分析中，三个组合的资产权重存储在3行2列的矩阵portfolioWeights中，每行对应一个组合的两个资产比例。资产收益率存储在长度为2的向量assetReturns中。请计算每个组合的加权收益总和，将结果存入result。其中输入矩阵数据按列填充为[0.5,0.6,0.7,0.5,0.4,0.3]，向量数据为[0.08,0.12]，输出为3行1列的向量。","portfolioWeights = [0.5, 0.6, 0.7, 0.5, 0.4, 0.3]$3:2
assetReturns = [0.08, 0.12]",result = portfolioWeights ** assetReturns
162,涯明,,dropAggregator,在实时股票分析场景中，先前创建了一个按股票代码分组计算价格均值的横截面计算引擎，引擎对象存储在crossEngine变量。现因业务调整需要释放该引擎资源，输入数据为已存在的引擎对象crossEngine，请编写销毁该实时计算引擎的代码并将执行结果存入result变量。,"tradeStream = streamTable(100:0, `timestamp`sym`price, [TIMESTAMP, SYMBOL, DOUBLE])
enableTableShareAndPersistence(table=tradeStream, tableName=`tradeStream, asynWrite=false, compress=true, cacheSize=100000)
outputStream = streamTable(100:0, `sym`avgPrice, [SYMBOL, DOUBLE])
crossEngine = createCrossSectionalEngine(
name=""crossEngine"",
metrics=<avg(price)>,
dummyTable=tradeStream,
outputTable=outputStream,
keyColumn=`sym,
triggeringPattern='keyCount',
triggeringInterval=1000
)
","result = dropAggregator(""crossEngine"")
"
163,涯明,,dropDatabase,"在基金净值归档场景中，需要彻底移除一个已完成迁移的分布式数据库。已知数据库路径为""dfs://fundDB""，内含净值表""nav_records""，存储结构包含基金代码（SYMBOL类型）、净值日期（DATE类型）和单位净值（DOUBLE类型）。请写出删除该数据库所有物理文件并将操作结果赋给result的完整代码。","dbName = ""dfs://fundDB""
tbName = ""nav_records""

if(existsDatabase(dbName)) {
dropDatabase(dbName)
}

db = database(dbName, VALUE, 2023.01.01..2023.01.31)
t = table(1:0, `fund_code`nav_date`unit_nav, [SYMBOL,DATE,DOUBLE])
db.createPartitionedTable(t, tbName, `nav_date)

data = table(
rand(`F0001`F0002`F0003, 100),
rand(2023.01.01..2023.01.31, 100),
rand(10.5..15.5, 100)
)

loadTable(dbName, tbName).append!(data)","result = dropDatabase(""dfs://fundDB"")"
164,涯明,,euclidean,"在股票分析中，已知两个指数矩阵stockA和stockB，行标签为不同日期，列名为'PE'和'PB'。stockA的数据日期为2023-01-02到2023-01-04，对应值分别为[[15,2.5],[16,2.6],[17,2.7]]。stockB的数据日期为2023-01-03到2023-01-05，对应值分别为[[16.5,2.6],[17.2,2.8],[18,2.9]]。请计算它们共有日期下各列的欧氏距离向量，结果存入变量result。","stockA = matrix([15,16,17], [2.5,2.6,2.7])
stockA.rename!(2023.01.02 2023.01.03 2023.01.04, `PE`PB)
stockA.setIndexedMatrix!()

stockB = matrix([16.5,17.2,18], [2.6,2.8,2.9])
stockB.rename!(2023.01.03 2023.01.04 2023.01.05, `PE`PB)
stockB.setIndexedMatrix!()
","result = euclidean(stockA, stockB)
"
165,涯明,,evalTimer,某个物联网平台记录了多个传感器的温度数据，格式为包含时间戳（timestamp）和温度（temperature）两列的表sensorData。需要验证两种数据处理方法的耗时:首先计算最近5个温度的移动平均值，其次找出温度超过38度的所有记录。请测量顺序执行这两个操作的总耗时（执行5次取平均值），最终结果存入result。,"timestamp = 2024.05.01T09:00:00.000 + 1..1000
temperature = norm(0.0, 5.0, 1000).cumsum() + 30
sensorData = table(timestamp, temperature)

def movingAvg():
return rolling(avg, sensorData.temperature, 5)

def findPeaks():
return sensorData[temperature > 38]
","result = evalTimer([movingAvg, findPeaks], 5)
"
166,涯明,,gaussianKde,在物联网设备监控场景中，采集了8台传感器设备在两个关键指标（温度波动和电压变化）的关联数据，存储为双列矩阵deviceMetrics。要求基于自定义带宽0.85和样本权重系数vectorWeights，构建联合概率密度模型。请写出创建该模型的核心代码。,"deviceMetrics = matrix(randNormal(0,1,8), randNormal(0,1,8))
vectorWeights = rand(1.0,8).normalizeSum()","result = gaussianKde(deviceMetrics, vectorWeights, 0.85)"
167,涯明,,getBackupMeta,"在物联网设备监控系统中，备份目录""/iot/backup""保存了数据库""dfs://sensorDB""的副本。现需核查2023年5月15日编号为DHT22的温湿度传感器在分区""/20230515/DHT22""的数据备份完整性，该分区对应表名为""readings""。请提取该分区的备份元数据详情（含数据模式、记录条数等核心信息），并将结果存入变量result。",,"result = getBackupMeta(""/iot/backup"", ""dfs://sensorDB"", ""/20230515/DHT22"", ""readings"")"
168,涯明,,getBackupStatus,"物联网平台的管理员需要查看用户""device_user""最近发起的所有文件拷贝类型备份任务的进度详情，包括数据库路径、表名称、任务开始时间及完成状态。已知该用户执行过数据库""dfs://sensorData""的表""readings""的并行备份。请将查询结果保存到变量result。","
login(""device_user"", ""iot123"")
dbPath = ""dfs://sensorData""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
create database dfs://sensorData partitioned by VALUE(2023.01.01..2023.01.03)
t = table(2023.01.01 as ts, ""SN001"" as deviceID, 25.8 as temperature)
pt = loadTable(dbPath, `readings)
pt.append!(t)
backup(""/iot_backups"", <select * from pt>, ,true)  // 触发文件拷贝方式备份
","
login(""admin"", ""admin123"")
result = select * from getBackupStatus(""device_user"") where type like ""%COPY_FILE%"" and dbName = ""dfs://sensorData""
"
169,涯明,,getComputeNodeCachingDelay,在金融实时交易系统中，节点的数据处理延迟配置需要被核查以确保符合低延迟要求。请编写代码获取当前节点生效的缓存延迟时间（单位为秒），结果存储到变量result中。输入数据无需额外准备，输出为整型标量。,,result = getComputeNodeCachingDelay()
170,涯明,,getConnections,在当前物联网设备监控节点中，需要列出所有客户端设备的活跃连接信息，包含本机服务地址、客户端地址和连接建立时间。请生成DolphinDB代码，将结果存入变量result，该变量为三列（server、client、startTime）的表结构。,,result = getConnections()
171,涯明,,getControllerElectionTick,在物联网集群的配置巡检中，需要获取当前控制节点选举机制的心跳周期基准参数。已知该参数已通过动态配置接口设置为180个时间单位，请编写代码查询当前生效的参数值并将结果存入变量result。,setRaftElectionTick(180),result = getControllerElectionTick()
172,涯明,,getGroupsByUserId,在证券交易系统的权限管理中，需要查询某用户所属的所有安全组。已知用户名为'trade_team'，对应的变量名为userId，格式为字符串。请编写代码获取该用户分配的组列表，结果为字符串数组，并赋值给变量result。,"userId = ""trade_team""",result = getGroupsByUserId(userId)
173,涯明,,getHomeDir,某金融交易系统需要将每日的结算报表自动保存到节点主目录下的“reports/2023”子目录中。请生成该目录的完整路径并将结果存入变量result，已知主目录由系统配置定义，无需额外输入数据。,,"result = getHomeDir() + ""/reports/2023"""
174,涯明,,getJobReturn,"在物联网数据分析系统中，用户提交了一个异步作业用于处理传感器温度数据集，作业标识符为""tempJob_2023Q3""。现需要确保程序在该数据处理任务执行完毕后获取计算结果，并将得到的双精度浮点数存储到result变量。已知输入数据包含字符串类型的作业ID和一个强制等待标识参数，输出结果为数值型数据。","def processTemperatureData(mutable rawData) {
filtered = rawData[rawData.temp > -50 && rawData.temp < 100]
return avg(filtered.temp)
}

sensorData = table(2023.06.01T00:00:00 + 1..100000 as timestamp, rand(-40..120, 100000) as temp)
jobID = submitJob(""tempJob_2023Q3"", ""sensor processing"", processTemperatureData, sensorData)","result = getJobReturn(jobID, true)"
175,涯明,,getStreamingLeader,"在物联网设备监控场景中，设备组ID为15的传感集群需要周期性查询当前负责协调数据接收的主控节点。已知输入参数为整型变量groupId=15，请编写代码获取主节点名称并存入result变量，输出结果为类似""DFS_NODE3""的字符串。",groupId = 15,result = getStreamingLeader(groupId)
176,涯明,,getSubscriptionTopic,"在物联网实时监控场景中，设备数据通过共享流表传输，需要获取某个实时告警订阅任务对应的主题标识和字段集合。已知流表名为""sensorData""，包含四列（timestamp[时间戳]、deviceID[设备编号]、temperature[温度值]、humidity[湿度值]），订阅任务名为""realTimeAlert""。请编写脚本获取该订阅的元信息，结果存入result变量。","'''
enableTableShareAndPersistence(table=streamTable(10000:0, `timestamp`deviceID`temperature`humidity, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE]), tableName=`sensorData, asynWrite=false)
'''","'''
result = getSubscriptionTopic(`sensorData, `realTimeAlert)
'''"
177,涯明,,gmm,"某物联网平台采集了10台设备的温度和振动强度数据，存储在一个2行10列的矩阵sensorData中，每列代表一台设备。为了识别设备的运行状态模式，需将数据聚类为3类，并使用预设的初始均值[[30, 150], [35, 180], [40, 200]]进行建模。要求最大迭代次数设置为200，收敛精度设为1e-5，固定随机种子456。请生成对应分析代码，结果存入变量result。","sensorData = transpose(matrix(28.1 32.4 29.8 37.6 35.2 41.8 30.9 38.2 39.5 36.7, 145 162 158 191 176 205 152 198 208 185))","result = gmm(sensorData, 3, 200, 1e-5, 456, transpose(matrix([30,150],[35,180],[40,200])))"
178,涯明,,ifirstHit,"在物联网设备监测场景中，某个温度传感器采集的数据存储在一个名为temps的向量里，其中包含了空值和以下数值:[NULL, 38.5, 41.2, 37.8, NULL, 43.0, 39.5, 40.0]。现在需要找到第一个温度超过40摄氏度的位置索引，并将结果赋值给变量result。输出应为整数。","temps = [NULL, 38.5, 41.2, 37.8, NULL, 43.0, 39.5, 40.0]
","result = ifirstHit(>, temps, 40.0)
"
179,涯明,,ifirstNot,"在分析股票数据时，需要确定第一个同时具有有效收盘价和成交量的时间点索引。已知收盘价序列close包含空值（如[空, 空, 45.0, 46.5, 空]），成交量序列volume也有空值（如[空, 200, 空, 480, 500]）。请编写DolphinDB代码找出首个两者均不为空的位置索引，并将结果存入变量result。","close = [NULL, NULL, 45.0, 46.5, NULL]
volume = [NULL, 200, NULL, 480, 500]","result = ifirstNot([close, volume])"
180,涯明,,ilike,"在股票代码列表中筛选出所有包含""tech""（不区分大小写）的公司。输入数据sym是一个向量，包含`AAPL`tECHCorp`TeslaTech`AMZN`nvidiaTECH`。要求输出布尔值向量result，标识符合条件的元素。",sym = `AAPL`tECHCorp`TeslaTech`AMZN`nvidiaTECH,"result = sym ilike ""%tech%"""
181,涯明,,indexedTable,"在物联网监控场景中，有三个传感器每小时上报多维环境数据。已知初始数据包含传感器ID（类型为SYMBOL的""S001"",""S002"",""S003""），上报时间戳为2023.10.08T12:00:00的三个时刻，温度数组分别为[18.5,18.7,18.6]、[22.3,22.1,22.4]、[19.8,19.9,19.7]，湿度数组分别为[65,63,64]、[58,57,59]、[62,61,60]。需要建立支持快速更新的存储结构，当收到相同传感器ID的新数据时覆盖旧记录。处理后续上报数据:S002和新增的S004在2023.10.08T13:00:00上报温度[23.0,23.2,23.1]和[20.5,20.7,20.6]，湿度[55,54,56]和[68,67,69]。最终输出包含所有最新记录的表，赋值到result。","
sensorID = `S001`S002`S003
timestamps = [2023.10.08T12:00:00, 2023.10.08T12:00:00, 2023.10.08T12:00:00]
temps = array(DOUBLE[]).append!([[18.5,18.7,18.6], [22.3,22.1,22.4], [19.8,19.9,19.7]])
humids = array(INT[]).append!([[65,63,64], [58,57,59], [62,61,60]])
","
t = indexedTable(`sensorID, sensorID, timestamps, temps, humids)
newID = `S002`S004
newTime = [2023.10.08T13:00:00, 2023.10.08T13:00:00]
newTemp = array(DOUBLE[]).append!([[23.0,23.2,23.1], [20.5,20.7,20.6]])
newHumid = array(INT[]).append!([[55,54,56], [68,67,69]])
insert into t values(newID, newTime, newTemp, newHumid)
result = t
"
182,涯明,,invLogistic,"在风险分析中，需要计算某资产回报率在不同置信水平下的风险阈值。已知回报率服从位置参数为5.2、离散度为1.8的S型分布。给定置信水平数组probabilities为[0.95, 0.8, 0.3, 0.05]，请生成对应的风险阈值并存储在result中，要求输入数组格式为浮点向量，输出结果存入变量result。","probabilities = [0.95, 0.8, 0.3, 0.05]","result = invLogistic(5.2, 1.8, probabilities)"
183,涯明,,invPoisson,"某IT公司需要评估服务器在高负载下每小时可能承受的最大请求次数。已知请求次数服从均值为5的泊松分布，技术团队希望求出不同置信水平（0.85, 0.89, 0.93, 0.97）对应的请求次数阈值。请编写DolphinDB代码，输入参数为均值lambda=5和置信水平数组[0.85, 0.89, 0.93, 0.97]，输出结果为各置信水平对应的请求次数整数集合，存储在result变量中。","lambda = 5
probabilities = [0.85, 0.89, 0.93, 0.97]","result = invPoisson(lambda, probabilities)"
184,涯明,,isMonotonicIncreasing,"在分析某物联网设备的日功耗数据时，序列中存在缺失值（空值），具体值为powerConsumption = [NULL, 12.5, 12.5, 13.0, 13.2]。需要判断该序列是否始终保持非递减趋势。请编写代码验证并将结果存入result。","powerConsumption = [double(), 12.5, 12.5, 13.0, 13.2]
","result = isMonotonicIncreasing(powerConsumption)
"
185,涯明,,isYearStart,在金融数据处理中，需要识别每年第一个交易日作为特殊时间节点。给定一个包含三个日期的DATE类型向量dates，分别为2023.01.01、2023.07.04和2024.01.01，请编写代码判断每个日期是否对应年度的起始日，并将布尔值判断结果存储在result变量中。,"dates = [2023.01.01, 2023.07.04, 2024.01.01]",result = isYearStart(dates)
186,涯明,,kama,在股票分析系统中，给定一个包含股票代码'sym'（'C'和'D'）、交易日'dt'、收盘价'close'的表t，需要为每只股票计算出能够动态适应价格波动的4日平滑指标。要求结果表包含股票代码和对应的平滑值列，最终结果存入变量result。,"t = table(take(['C','D'],10) as sym, 2023.06.01..2023.06.10 as dt, rand(100.0,10) as close)
","result = select sym, kama(close,4) as kama from t context by sym
"
187,涯明,,linearInterpolateFit,"某温度传感器在五个不同时间点采集了数据，但记录时间是无序的。已知时间点对应的时间戳（单位:分钟）存储在数组x=[5,3,7,1,9]，测得温度值存储在y=[25.0,22.5,27.8,20.0,30.5]。需要构建插值模型处理后续时间点查询:当查询时间小于最早记录时返回20.0，大于最晚记录时返回30.5，中间采用线性估算。请生成结果变量result，包含对[0,2,4,6,8,10]分钟的预测温度。","
x = [5,3,7,1,9]
y = [25.0,22.5,27.8,20.0,30.5]
","
model = linearInterpolateFit(x, y, (20.0,30.5), false)
xnew = [0,2,4,6,8,10]
result = model.predict(xnew)
"
188,涯明,,matchPhrase,"在物联网设备日志表中筛选出包含完整描述""传感器温度异常""的所有记录，输入数据包含设备ID、时间戳和日志内容列，输出结果为匹配行的设备ID、时间戳及原始日志信息。","logData = [
""设备1234在2023.05.03 09:00报告传感器温度异常，代码E001"",
""正常状态更新:压力传感器读数稳定"",
""传感器温度异常触发报警，设备5678于2023.05.03 09:05自动关机"",
""设备1234网络连接中断告警"",
""设备5678在2023.05.03 09:10恢复传感器温度正常范围""
]

t = table([1001,1002,1003,1001,1003] as deviceID, 
2023.05.03T09:00:00..2023.05.03T09:10:00 as timestamp, 
logData as logContent)

if(existsDatabase(""dfs://iotDB"")) dropDatabase(""dfs://iotDB"")
db = database(directory=""dfs://iotDB"", partitionType=VALUE, partitionScheme=[1001,1002,1003], engine=""PKEY"")
pt = createPartitionedTable(db, t, ""deviceLogs"", ""deviceID"", 
primaryKey=`deviceID`timestamp,
indexes={""logContent"":""textindex(parser=english, full=false, lowercase=false, stem=false)""})
pt.tableInsert(t)
","result = select deviceID, timestamp, logContent from pt where matchPhrase(logContent, ""传感器温度异常"")
"
189,涯明,,mimaxLast,在物联网监控中，两个设备每小时的采集数据存储在5行2列的矩阵sensor_data中，每列对应一个设备。请计算每个时间点过去3个记录窗口内的最大值最后一次出现的位置索引（从0开始计数，忽略缺失值），结果存入变量result。,"sensor_data = matrix(5 3 8 6 2, 4 6 5 7 3)","result = mimaxLast(sensor_data, 3)"
190,涯明,,minute,在物联网设备监控场景中，某批传感器记录了三个不同时间点的监测数据，时间戳存储在类型为时间向量的times变量中（具体值:2023.10.08T14:25:03、2023.10.08T15:40:22、2023.10.08T16:55:45）。现在需要从这些时间戳中获取对应的分钟数值，并将计算结果存入result变量。,"times = [2023.10.08T14:25:03, 2023.10.08T15:40:22, 2023.10.08T16:55:45]",result = minute(times)
191,涯明,,mod,"在物联网场景中，设备每5分钟采集一次数据。现在有连续10个采集时间点的分钟数（从0开始计数），需要将这些时间点按照5分钟周期进行分组标识。已知输入数据为分钟数向量minutes=[0,1,2,3,4,5,6,7,8,9]，请计算每个时间点对应的周期内位置编号，结果需要是0到4的循环序列，结果变量名为result。",minutes = 0..9,"result = mod(minutes, 5)"
192,涯明,,neville,"某物联网设备每隔45分钟记录一次温度数据，时间戳存储在变量x中，对应温度值存储在变量y。需要将温度数据按30分钟间隔插值，左闭区间，起始点为当天零点，最终生成连续的温度序列。输入x为时间类型的向量[2023.01.01T08:00:00, 2023.01.01T08:45:00, 2023.01.01T09:30:00]，y为数值类型向量[10.0,15.0,20.0]，输出result为插值后的数值向量。","x = [2023.01.01T08:00:00, 2023.01.01T08:45:00, 2023.01.01T09:30:00]
y = [10.0, 15.0, 20.0]
","result = neville(x, y, `30min, closed='left', origin='start_day')
"
193,涯明,,nss,"假设有一组国债的期限和对应的到期收益率数据，需要拟合一个包含六个参数的动态利率曲线模型。已知债券期限为0.5年、2年、5年、7年、10年、30年，对应的收益率分别是0.018、0.023、0.028、0.031、0.035、0.042。要求使用基于群体智能的优化算法进行参数估计，其中β系数初始猜测为[0.02, -0.01, 0.005, -0.008]，λ参数的初始值设为[1.2, 0.8]，并为参数设置合理边界确保λ1不超过2，β3不低于-0.1。输入数据结构为maturity数组变量和yield数组变量，最终将拟合结果存入result变量。","maturity = [0.5, 2, 5, 7, 10, 30]
yield = [0.018, 0.023, 0.028, 0.031, 0.035, 0.042]
","result = nss(maturity, yield, method='de', 
bounds=[[0,0.1], [-0.05,0.05], [-0.02,0.03], [-0.1,0.1], [0.5,3], [0.1,2]],
initialGuess=[0.02, -0.01, 0.005, -0.008, 1.2, 0.8],
seed=2023)
"
194,涯明,,parseInteger,"在物联网设备上报数据处理中，某批数据为字符串数组deviceData，格式示例为[""  +A3"", ""-FF"", ""12G""]。需将这些字符串按16进制转换为长整型数值，忽略前导空格和符号后的非法字符，最终结果保存到result。请写出相应代码。","deviceData = [""  +A3"", ""-FF"", ""12G""]
","result = parseInteger(deviceData, LONG, 16)
"
195,涯明,,pdfF,"在金融风险模型中，假设两个资产的收益率方差比服从自由度为3（分子）和15（分母）的F分布。需要计算该分布在0.5、1.5、2.5三个临界点处的密度值，结果保留到变量result中。给定输入变量numeratorDF=3，denominatorDF=15，X=[0.5,1.5,2.5]。","numeratorDF = 3
denominatorDF = 15
X = [0.5, 1.5, 2.5]","result = pdfF(numeratorDF, denominatorDF, X)"
196,涯明,,percentChange,某工厂在物联网平台上记录了三个传感器每五分钟的温度数据，数据格式如下:sensorData表包含两列（time_col时间戳，temperature温度值）和sensor_id标签。请将数据转换为矩阵格式（行按时间排序，每列对应一个传感器），计算每个传感器每隔15分钟（间隔3个数据点）的温度变化率百分比，结果存储在result变量中。输入矩阵变量名为tempMatrix，输出结果保留6位小数精度。,"time = 2024.06.01T09:00:00 + 0..8 * 5.minute
sensor1 = [25.8, 26.1, 26.5, 27.0, 27.2, 27.6, 28.0, 28.3, 28.7]
sensor2 = [30.5, 31.0, 30.8, 31.5, 31.2, 30.9, 31.8, 32.0, 32.4]
sensor3 = [22.4, 22.6, 22.9, 23.2, 23.5, 23.8, 24.0, 24.3, 24.6]
tempMatrix = matrix(sensor1, sensor2, sensor3).rename!(time, `sens1`sens2`sens3)
","result = tempMatrix.percentChange(3).round(6)
"
197,涯明,,piecewiseLinFit,在分析某只股票价格趋势时，需要将100个交易日的收盘价数据拟合为三段连续线性模型，并考虑某些日期的数据可信度更高。给定时间序列变量t为1到100的整数，价格数据price由随机数生成，权重向量w与误差倒数相关。要求优化过程中强制断点出现在第20至80日之间，生成符合条件的分段模型并将结果存入result。,"t = 1..100
price = norm(0, 1, 100).cumsum() + 100  # 生成随机价格序列
w = 1.0 / (0.5 + abs(0..99 % 7 - 3))    # 生成周期性权重向量
boundMatrix = matrix([20 80], [20 80])  # 两个断点的边界矩阵
","result = piecewiseLinFit(t, price, 3, bounds=boundMatrix, weights=w, seed=1357)
"
198,涯明,,predict,"在股票分析中，基于已有开盘价、最高价、最低价数据训练好的预测模型，如何批量推断次日收盘价位？已知输入表含以下字段:open_price (FLOAT), high (FLOAT), low (FLOAT)，数据存储在变量testSet中。要求输出长度为3的浮点向量存储在result变量。","testSet = table(
102.5 105.8 100.2 as open_price,
108.0 106.3 101.9 as high,
99.8 103.5 98.7 as low
)

model = randomForestRegressor(
sqlDS(<select * from trainingData>),
`target_close,
`open_price`high`low
)
","result = predict(model, testSet)
"
199,涯明,,quadprog,"某投资者计划在两个资产上分配资金，要求总投入为1，且每个资产的比例不超过50%。已知风险模型的二次项矩阵H为[[2,-1],[-1,4]]，线性收益项为[-3,-2]。如何计算满足约束的最小风险配置？","H = matrix([[2,-1],[-1,4]])
f = [-3, -2]
A = matrix([[1,0],[0,1]])
b = [0.5, 0.5]
Aeq = matrix([1,1])
beq = [1]","result = quadprog(H, f, A, b, Aeq, beq)"
200,涯明,,randPoisson,某银行需要模拟过去一小时内的柜台客户到达情况，已知平均每5分钟内有3.2人到场。请生成包含12个时间片段的离散事件发生次数序列，结果存储在result变量中。输入参数:均值参数为3.2的浮点数，时间片段数为12的整型；输出要求:长度为12的整型向量。,meanVal = 3.2\nperiods = 12,"result = randPoisson(meanVal, periods)"
201,晓瑜,,regexReplace,"处理一组日期字符串，将斜杠和点分隔符统一改为横杠。输入数据为字符串向量logs=[""2023/04/05"", ""2023.05.06"", ""2024.01.15""]，输出结果存储在变量result中，要求生成[""2023-04-05"",""2023-05-06"",""2024-01-15""]格式。","logs = [""2023/04/05"", ""2023.05.06"", ""2024.01.15""]","result = regexReplace(logs, ""[/.]"", ""-"")"
202,晓瑜,,removeNode,在物联网集群管理中，有两个处于运行状态的计算节点nodeX和nodeY需要立即移除，即使它们当前有任务执行。请编写代码强制删除这两个节点，并将结果存储在变量result中。输入数据分别为字符串数组aliasNames和布尔值forceFlag，输出结果存储在变量result中。,"aliasNames = [""nodeX"", ""nodeY""]
forceFlag = True
","result = removeNode(alias=aliasNames, force=forceFlag)
"
203,晓瑜,,removeTail_,某物联网传感器连续采集了7天的温度数据，存储在变量temperature中。但因后两天的数据存储故障导致异常，需要剔除最后两天的记录。请处理该数据并将结果赋值给result。输入数据格式为长度7的整型向量，输出为长度5的整型向量。,"temperature = 25..31
","result = temperature.removeTail!(2)
"
204,晓瑜,,removeTopicOffset,某物联网设备监控系统订阅了传感器实时数据流，启用偏移量持久化后需要清除某个订阅的最新处理位置以便重新消费数据。已知订阅主题存在变量topic中，请编写代码实现该操作。,"enableTableShareAndPersistence(table=streamTable(10000:0, `ts`device`value, [TIMESTAMP, SYMBOL, DOUBLE]), tableName=""sensorData"")
topic = subscribeTable(tableName=""sensorData"", actionName=""monitor"", offset=0, handler=print, msgAsTable=true, persistOffset=true)
","result = removeTopicOffset(topic)
"
205,晓瑜,,resetPwd,某金融机构的安全策略要求将风险管理系统的操作员账户登录凭证更新为至少包含一个大写字母和特殊符号的12位新口令。已知用户标识符为'RiskControlAdmin'，按照规范设定新验证码为'Secure@2023'（包含大写字母S和特殊字符@）。请编写代码完成此项安全更新任务，将操作结果存储在result变量中。输入数据由系统内置用户表提供，不需要额外准备数据表。,,"result = resetPwd(""RiskControlAdmin"", ""Secure@2023"")
"
206,晓瑜,,revoke,"物联网平台的管理员需要移除组""engineers""在计算组""AI_Cluster""上运行任务的权限，请编写代码执行该操作。输入组名为字符串类型，权限类型为计算组执行权限，对象为指定计算组名称，输出结果存储在变量result中。",// 无需数据准备，权限操作直接在系统层面执行,"result = revoke(""engineers"", COMPUTE_GROUP_EXEC, ""AI_Cluster"")"
207,晓瑜,,rolling,"在物联网监测场景中，设备每分钟采集一次环境湿度数据并生成带时间戳的记录表。现有湿度值向量humidity为[45.2,46.8,47.5,48.0,47.2,46.5,45.9,44.8,45.5,46.1]，对应时间戳ts为2024.03.15T09:00:00递增的10个时刻。需要计算每3个数据点窗口内数值波动的离散程度（方差），每次向后滑动2个数据点进行分析，要求输出结果矩阵保留原始时间标签。","ts = 2024.03.15T09:00:00 + 0..9*60
humidity = [45.2,46.8,47.5,48.0,47.2,46.5,45.9,44.8,45.5,46.1]
m = matrix(humidity).rename!(ts, `humidity)","result = rolling(var, m, 3, 2)"
208,晓瑜,,rowAt,给定一个设备传感器表，包含id（INT类型）、温度值数组temps（DOUBLE类型数组，长度5）和状态标记数组flags（INT类型数组，长度5，1表示正常，0表示异常）。请为每行提取所有正常状态标记对应的温度值组成新数组（若无正常标记则返回空数组），将结果存储在变量result中，输出类型为数组向量。,"sensorReadings = table(1:0, `id`temps`flags, [INT, DOUBLE[], INT[]])
insert into sensorReadings values(1001, [35.4, 36.1, 0.0, 34.9, 35.2], [1,1,0,1,1])
insert into sensorReadings values(1002, [0.0, 0.0, 0.0, 0.0, 0.0], [0,0,0,0,0])
insert into sensorReadings values(1003, [28.5, 29.0, 28.7, 0.0, 0.0], [1,1,1,0,0])
","result = select rowAt(temps, flags) as result from sensorReadings
"
209,晓瑜,,rowCumprod,"某物联设备记录了三个传感器在三个时间点的效率系数（每行代表一个传感器），存储为矩阵m，结构为:第一行[1.1,0.95,1.02]，第二行[0.98,1.05,1.07]，第三行[1.03,1.08,0.97]。需要计算各传感器在不同时间段的运行效率累积乘积（每个时间点显示从启动到当前时刻的总效率），结果存入result。","m = matrix([1.1 0.95 1.02], [0.98 1.05 1.07], [1.03 1.08 0.97])",result = rowCumprod(m)
210,晓瑜,,rowMove,"某物联网设备每小时采集三个传感器的读数，存储为数组sensorReadings，其中每个内层数组包含三个整数。为了分析需要，现在要将每个内层数组的元素左移两位，空余位置用0填充，得到结果数组result。已知sensorReadings格式为[[数值，数值，数值],...]，变量名sensorReadings，要求输出结果赋值给变量result。","sensorReadings = array(INT[], 0, 10).append!([[35,42,50], [38,45,52], [40,48,55]])","result = rowMove(sensorReadings, -2)"
211,晓瑜,,segment,在设备运行状态监测中，某表格包含状态码`status`和运行时长`time`两列。当状态码连续相同时视为同一工作阶段，阶段变化时生成新分组。请生成每个阶段内的时间累计值，结果保留原表所有列并新增累计列`cumTime`。输入数据为表格变量`t`，输出结果赋值给变量`result`。,"status = [0,0,1,1,0,0,2,2,2]
time = [5,3,4,2,6,1,8,7,9]
t = table(status, time)
","result = select *, cumsum(time) as cumTime from t context by segment(status, false)
"
212,晓瑜,,setColumnComment,物联网平台中有一个分布式表存储设备监测数据，包含列deviceID（SYMBOL类型）、timestamp（DATE类型）、temperature（DOUBLE类型）、humidity（DOUBLE类型）。需要为这些字段分别添加中文注释:设备唯一编号、数据记录时间、温度传感器读数（摄氏度）、湿度传感器读数（百分比）。请将操作后的表结构元信息赋值给result。,"n=500
deviceID=rand(`D1001`D1002`D1003,n)
timestamp=datetimeAdd(2023.05.01T00:00:00,rand(86400,n),'s')
temperature=rand(35.0,n)+10
humidity=rand(100.0,n)
t=table(deviceID,timestamp,temperature,humidity)

db1=database("""",VALUE,2023.05.01..2023.05.07)
db2=database("""",VALUE,`D1001`D1002`D1003)
db=database(""dfs://sensor_db"",COMPO,[db1,db2])
deviceData=db.createPartitionedTable(t,`deviceMetrics,`timestamp`deviceID).append!(t)","setColumnComment(deviceData, {deviceID:""设备唯一编号"",timestamp:""数据记录时间"",temperature:""温度传感器读数（摄氏度）"",humidity:""湿度传感器读数（百分比）""})
result=schema(deviceData).colDefs"
213,晓瑜,,shapiroTest,某传感器记录了最近60次温度监测的误差值，数据存储在变量x中，其数据格式为数值向量。需要检验这些误差值是否服从均值为0的正态分布。请编写代码进行检验，并将结果存入变量result中，输出结果为包含method/pValue/W的字典。,"// 模拟生成60个来自标准差为1.5的正态分布误差值
x = norm(0, 1.5, 60)","// 执行正态性检验并存储结果
result = shapiroTest(x)"
214,晓瑜,,splrep,"假设您正在处理物联网设备采集的温度数据，时间点x为1到9（整数向量），对应的温度值y为[20,22,25,28,30,32,34,35,36]。需生成三次样条曲线的节点、系数和次数描述，并使用预定义的内部节点位置[3,5,7]。请编写代码实现这一需求，要求输入数据存入变量x、y、t，输出结果存入变量result。","
x = 1..9
y = [20,22,25,28,30,32,34,35,36]
t = [3,5,7]
","
result = splrep(x, y, t=t)
"
215,晓瑜,,svd,"假设有一个4行3列的股票收益率矩阵stockReturns，每行代表一只股票，每列代表连续三天的收益率。现需提取该矩阵的核心特征值，无需分解后的左右向量，直接得到降序排列的奇异值列表。请编写代码实现，结果存入result变量。输入矩阵格式为:
stockReturns = matrix([[0.05,-0.02,0.03],[0.01,0.04,-0.01],[-0.03,0.02,0.05],[0.02,0.03,0.01]])","stockReturns = matrix([[0.05,-0.02,0.03],[0.01,0.04,-0.01],[-0.03,0.02,0.05],[0.02,0.03,0.01]])","result = svd(stockReturns, false, false)"
216,晓瑜,,tableUpsert,在金融交易系统中，有一个按交易日分区的分布式表trade_records，结构为股票代码sym（STRING）、日期date（DATE）、时间time（TIME）、价格price（DOUBLE）、成交量qty（INT）。已有数据:sym=`A`B`C，date=2023.01.01，time=09:30:00 09:31:00 09:32:00，price=100 101 102，qty=1000 2000 3000。新数据包含三行:sym=`B`C`D，date=2023.01.01，time=09:31:30 09:32:30 09:33:00，price=NULL 105 NULL，qty=2500 NULL 4000。要求将新数据合并到表中，保留原表中非空字段的值，同一交易日的数据按时间排序，统计新增和更新的记录数。,"db = database(""dfs://trade_db"", VALUE, 2023.01.01..2023.01.03)
sym = `A`B`C
date = take(2023.01.01, 3)
time = 09:30:00 09:31:00 09:32:00
price = 100 101 102
qty = 1000 2000 3000
t = table(sym, date, time, price, qty)
pt = db.createPartitionedTable(t, `trades, `date)
pt.append!(t)

newData = table(`B`C`D as sym, take(2023.01.01,3) as date, 09:31:30 09:32:30 09:33:00 as time, NULL 105 NULL as price, 2500 NULL 4000 as qty)
","result = tableUpsert(pt, newData, ignoreNull=true, keyColNames=`sym`date, sortColumns=`time)
"
217,晓瑜,,til,某物联网设备从2023-05-01 08:00:00开始，每隔15分钟采集一次环境数据，共进行8次采样。采集的温度值为20到35之间的随机浮点数。请创建包含timestamp（精确到分钟）和temperature两列的表格，其中timestamp列要基于起始时间自动生成。将结果赋值给result。,"|
m = 8
temperatureData = rand(20..35, m)","|
baseTime = 2023.05.01T08:00:00
timeIntervals = til(m) * 15 * 60000  // 将索引转换为15分钟间隔的毫秒数
result = table(baseTime + timeIntervals as timestamp, temperatureData as temperature)"
218,晓瑜,,tmavgTopN,在物联网环境监测中，设备每6小时采集一次温度和环境质量指数数据。需要计算每个时间点过去24小时内，排除空值后按环境质量由高到低排序，取前2名的温度平均值。输入表包含时间戳（time列，TIMESTAMP类型）、温度（temp列，INT类型）、质量指数（quality列，INT类型，存在空值），输出结果保存到变量result。,"time = 2023.01.01T00:00:00 + 6*0..5*3600000
temp = [10,15,12,18,20,25]
quality = [80,75,NULL,85,70,90]
t = table(time as time, temp as temp, quality as quality)","result = select tmavgTopN(time, temp, quality, 24h, 2, false) as topAvg from t"
219,晓瑜,,tmcorrTopN,在股票分析中，给定时间序列数据包含股价、成交量和排序信号，请基于5天窗口期，根据信号值筛选有效数据后取前两位有效样本，计算股价与成交量滚动相关性。输入表包含列:time（DATE类型）、price（INT类型）、volume（INT类型）、signal（INT类型含空值），输出结果变量需存储在result中，格式为包含topCorr（DOUBLE类型向量）列的表格。,"time = 2023.01.05 + 1..6
price = [5, 2, 6, 4, 3, 1]
volume = [3, 7, 2, 8, 5, 4]
signal = [8, , 3, 5, 2, 1]
t = table(time as time, price as price, volume as volume, signal as signal)","result = select tmcorrTopN(time, price, volume, signal, 5, 2) as topCorr from t"
220,晓瑜,,tmvarpTopN,"在物联网设备的电池电压监控中，需要计算每台设备最近3小时窗口内，按照信号强度降序选取前2个有效电压读数的总体方差。给定时间序列T为时间戳数组[2023-01-01 08:00:00, 2023-01-01 09:15:00, 2023-01-01 10:30:00, 2023-01-01 11:45:00]，电压值X为[3.2, 3.4, 3.1, 3.5]，信号强度S为[72, 85, , 90]，其中空值表示信号丢失。要求输出结果变量名为result。","T = [2023.01.01T08:00:00, 2023.01.01T09:15:00, 2023.01.01T10:30:00, 2023.01.01T11:45:00]
X = [3.2, 3.4, 3.1, 3.5]
S = [72, 85, int(), 90]
","result = tmvarpTopN(T, X, S, window=3*60, top=2, ascending=False)
"
221,晓瑜,,union,某物联网系统需要整合两个传感器采集的时间戳序列，其中传感器A记录的变量名为sensor1_times（格式:时间类型的集合，内容:2023.01.01T08:00 2023.01.01T10:00），传感器B记录的变量名为sensor2_times（格式:时间类型的集合，内容:2023.01.01T09:00 2023.01.01T10:00 2023.01.01T12:00）。请生成包含所有唯一时间戳的合并序列，存储到result变量（格式:时间类型的升序集合）。,"sensor1_times = set([2023.01.01T08:00, 2023.01.01T10:00])
sensor2_times = set([2023.01.01T09:00, 2023.01.01T10:00, 2023.01.01T12:00])","result = sort(union(sensor1_times, sensor2_times).keys())"
222,晓瑜,,vanillaOption,某投资者持有一个美式看涨期权，标的当前价格45美元，行权价42美元，无风险利率5%，年化股息率1%，波动率30%。交易日为2023.06.01，到期日2024.06.01，估值日2023.05.30。使用Actual/360日计数基准和纽交所日历，采用有限差分法结合Black-Scholes模型进行估值，空间网格数200，时间网格数100，阻尼步骤5。要求返回净现值及希腊字母指标，数据存储在result变量。输入变量为spot（浮点）、strike（浮点）、riskFree（浮点）、divYield（浮点）、volatility（浮点）、isCall（布尔）、style（字符串）、basis（整型）、calendar（字符串）。,"settlement = 2023.06.01
maturity = 2024.06.01
evalDate = 2023.05.30
spot = 45.0
strike = 42.0
riskFree = 0.05
divYield = 0.01
volatility = 0.3
isCall = true
style = 'american'
basis = 2
calendar = 'NYSE'
kwargs = dict(`xGrid`200, `tGrid`100, `dampingSteps`5)
","result = vanillaOption(settlement, maturity, evalDate, spot, strike, riskFree, divYield, volatility, isCall, style, basis, calendar, method='FDBS', kwargs=kwargs, mode=1)
"
223,晓瑜,,wj,在股票分析中，针对每笔交易记录的时间点，需要计算该时间点前3秒至当前时刻同一股票的最高成交价和累计成交量。左表包含交易记录（股票代码、时间戳、成交价），右表包含市场行情（股票代码、时间戳、申报价、成交量）。请生成包含原始交易数据及对应时间窗口内最高申报价和成交量总和的结果表。,"tradeRecords = table(['A', 'B', 'A'] as sym, 09:55:03 09:55:07 09:55:05 as time, [45.3, 76.2, 44.8] as price)
marketData = table(take(['A','B'],6) as sym, 09:55:00 09:55:02 09:55:04 09:55:01 09:55:03 09:55:06 as time, [45.1,45.5,44.9,76.0,76.4,44.7] as bid_price, [100,200,150,300,250,180] as volume)
","result = wj(tradeRecords, marketData, -3:0, <[max(bid_price), sum(volume)]>, `sym`time)
"
224,晓瑜,,wsum2,在物联网设备校准过程中，三个传感器的测量误差分别为2.5、3.0、1.8（变量sensorErrors），对应的校正系数为0.5、1.2、0.9（变量coeffs）。请计算每个误差平方乘以其系数后的总和，将结果存入变量result。,"sensorErrors = 2.5 3.0 1.8
coeffs = 0.5 1.2 0.9","result = wsum2(sensorErrors, coeffs)"
225,晓瑜,,xor,"在某物联网平台中，设备监测系统记录了deviceA和deviceB两个传感器的异常状态（true表示异常，false表示正常）。现需要找出存在单一设备异常的时间点，要求返回布尔型结果向量。已知deviceA的监测序列为[true,false,true,false]，deviceB的监测序列为[false,true,true,false]，输出结果存入变量result。","deviceA = [true, false, true, false]
deviceB = [false, true, true, false]","result = xor(deviceA, deviceB)"
226,晓瑜,,accumulate,"在农业研究中，每日记录植物的生长因子（相对于前一天的倍数），需要计算从初始值1开始的累积乘积。给定输入growthFactors为向量[1.2, 1.5, 1.3, 0.9]，变量名为growthFactors，输出结果为各时间点的累积乘积存入result，格式为长度为4的向量。写出实现代码。","growthFactors = [1.2, 1.5, 1.3, 0.9]","result = accumulate(mul, growthFactors, 1)"
227,晓瑜,,acos,"某物联网设备采集了一组角度传感器的余弦值，格式为向量[0.5, 1.0, 0.0]，变量名为sensor_data。需要计算这些值对应的实际角度（以度为单位），结果保留两位小数。请编写DolphinDB代码实现该需求，将最终计算结果赋值给result。",sensor_data = 0.5 1.0 0.0,"result = round(acos(sensor_data) * 180 / pi(), 2)"
228,晓瑜,,addGpFunction,在股票因子挖掘中，现有遗传引擎需要扩展自定义算子，实现以下逻辑:对价格和成交量的过去2期协方差加上价格过去2期的总和，取余弦值。输入数据为price（10个随机浮点数，初始值100.0左右）和volume（10个随机整数，初始值1000左右），变量名对应。请编写代码实现该功能，并将结果引擎对象赋值给result。,"price = 100.0 + 100.0 * rand(1.0, 10)
volume = 1000 + 1000 * rand(1.0, 10)
engine = createGPLearnEngine(`symbol, price, volume, , 100, 2, 3)","def f(x, y){
return cos(mcovar(x, y, 2) + msum(x, 2))
}
result = addGpFunction(engine, f)"
229,晓瑜,,asfreq,在物联网场景中，传感器数据以不固定的时间间隔采集，时间点为2023-07-01T09:15、2023-07-01T09:30、2023-07-01T09:45、2023-07-01T10:00，对应的数值为100、200、300、400，存储在时间索引序列s中。请将这些数据转换为每半小时对齐的时间节点（如09:00、09:30、10:00等），生成新的序列result，其中每个半小时节点保留原始时间点对应的数值，若该节点无原始数据则填充空值。,"index = [2023.07.01T09:15, 2023.07.01T09:30, 2023.07.01T09:45, 2023.07.01T10:00]
s = indexedSeries(index, [100, 200, 300, 400])
","result = s.asFreq(""30min"")
"
230,晓瑜,,attributeValues,在物联网设备管理中，现有一个设备实例包含编号ID、设备型号model、工作状态status三个属性。请编写代码获取该对象的属性名称及其对应值的字典结构，要求输入对象变量名为sensor1，结果存储在result中。,"class Sensor {
id :: STRING
model :: STRING
status :: BOOL
def Sensor(id_, model_, status_) {
id = id_
model = model_
status = status_
}
}
sensor1 = Sensor(""DT-001"", ""MultiScan-H7"", true)
","result = attributeValues(sensor1)
"
231,晓瑜,,cdfStudent,在分析某证券收益率的假设检验中，需要计算自由度为3的t分布在观测值-1.5、-0.8、0、1.2、2.4处的累积分布概率。已知输入数据存储在浮点型向量obs_values中，请编写代码计算并将结果存入变量result。,"df = 3
obs_values = [-1.5, -0.8, 0, 1.2, 2.4]","result = cdfStudent(df, obs_values)"
232,晓瑜,,compress,在物联网场景中，某传感器每5秒采集一次环境温度数据（数值保留三位小数），现需要将最近采集的10000条数据进行无损压缩存储。给定浮点型向量sensorData存储原始数据，要求使用适合小数的高效压缩方式生成压缩对象，并将结果保存到变量result。请写出数据准备和压缩代码，要求输入数据格式为vector<DOUBLE>类型，输出格式为compressed vector。,"sensorData = round(rand(100.0,10000),3)","result = compress(sensorData, 'chimp')"
233,晓瑜,,convertTZ,某物联网设备在洛杉矶记录的事件时间为2023.09.15T16:30:00（本地时区），需要将该时间转换为柏林时区时间进行国际协同分析。给定datetime类型变量eventTime存储原始时间，创建对应的柏林时区时间并存入result变量。,eventTime = 2023.09.15T16:30:00,"result = convertTZ(eventTime, ""America/Los_Angeles"", ""Europe/Berlin"")"
234,晓瑜,,createSchema,在金融资产分类场景中，现有数据库路径为dfs://asset_db，现需要将其关联到名为asset_catalog的分类目录下，并使用别名equity表示。请编写相关代码，并将结果赋值给变量result。输入数据库路径为字符串标量，变量名为内置路径无需声明，输出结果存储到result变量。,,"result = createSchema(""asset_catalog"", ""dfs://asset_db"", ""equity"")"
235,晓瑜,,cumcorrTopN,"某物联网设备每5秒采集一次温度和湿度，并按采集时间戳排序。在累计窗口内，每次取前3个时间最新的数据（若时间戳相同则保留最早出现的记录），计算温度与湿度的相关系数。已知温度数据X=[28.5,29.1,30.2,27.8,26.3,25.9]，湿度数据Y=[65,63,68,72,75,77]，时间戳S=[2023.09.01T08:00:00,2023.09.01T08:00:05,2023.09.01T08:00:05,2023.09.01T08:00:15,2023.09.01T08:00:20,2023.09.01T08:00:25]，要求输出结果变量名为result。","X = [28.5,29.1,30.2,27.8,26.3,25.9]
Y = [65,63,68,72,75,77]
S = [timestamp('2023.09.01T08:00:00'),timestamp('2023.09.01T08:00:05'),timestamp('2023.09.01T08:00:05'),timestamp('2023.09.01T08:00:15'),timestamp('2023.09.01T08:00:20'),timestamp('2023.09.01T08:00:25')]
","result = cumcorrTopN(X, Y, S, 3, ascending=false, tiesMethod='oldest')
"
236,晓瑜,,decimal32,"有一组物联网传感器采集的电压原始数据以字符串格式存储在向量中，需要统一转换为保留3位小数的定点数值类型。输入数据为[""15.7899"", ""2.34567""]存储在变量voltageStrs中，输出结果变量名为result的DECIMAL32类型向量，要求四舍五入到千分位。","voltageStrs = [""15.7899"", ""2.34567""]","result = decimal32(voltageStrs, 3)"
237,晓瑜,,deleteChunkMetaOnMasterById,某金融公司的OLAP引擎中，历史行情数据的分布式表存储结构发生变更，需要清理控制节点上指定路径为'/olap_value/9/50o'且标识符为'22e56e3e-b996-8d88-d152-43473g4500e8'的过期数据块元信息。已知输入变量chunkPath存放路径字符串，chunkId存放数据块唯一标识，请编写能返回清理结果的代码，要求将操作结果存储在result变量。,"chunkPath = ""/olap_value/9/50o""
chunkId = ""22e56e3e-b996-8d88-d152-43473g4500e8""","result = deleteChunkMetaOnMasterById(chunkPath=chunkPath, chunkId=chunkId)"
238,晓瑜,,dropDistributedInMemoryTable,"某物联网平台在内存中创建了一个分布式共享表用于临时存储传感器温度数据，表结构为（ts TIMESTAMP, deviceId INT, temp FLOAT），按设备ID的值分区为2个区，表变量名sensorsTable。测试完成后需要立即释放该表的资源，请编写相关操作代码。","sensorsTable = createDistributedInMemoryTable(`sensors, `ts`deviceId`temp, `TIMESTAMP`INT`FLOAT, VALUE, [INT, 2], `deviceId)
ts = 2023.06.01T00:00:00 + 1..10
deviceId = take(1..2,10)
temp = rand(36.5..38.5,10)
data = table(ts, deviceId, temp)
sensorsTable = loadDistributedInMemoryTable(`sensors)
sensorsTable.append!(data)
","dropDistributedInMemoryTable(`sensors)
result = ""分布式共享表已成功删除""
"
239,晓瑜,,eqPercent,"在物联网设备数据校验中，给定两个3x2的传感器测量矩阵X和Y，其中X为[[9.985, 15.02], [20.0, 25.0], [NULL, 34.995]]，Y为[[10.0, 15.0], [20.0, 25.0], [INT(NULL), 35.0]]。需要验证当误差阈值为0.15%时，所有有效数值是否在容许范围内相等，且NULL值处理是否符合规范。请输出布尔型校验结果到变量result。","
X = matrix([[9.985, 15.02], [20.0, 25.0], [double(), 34.995]])
Y = matrix([[10.0, 15.0], [20.0, 25.0], [int(), 35.0]])
","
result = eqPercent(X, Y, 0.15)
"
240,晓瑜,,floor,在物联网设备监控中，某传感器记录的电压值矩阵voltData包含两行三列，其中元素分别为3.7V、5.2V、-2.3V在第一行，1.1V、-4.8V、9.9V在第二行。请将每个电压值转换为不大于原始值的最大整数电压，并将转换后的整数矩阵存入变量result。,"voltData = matrix([3.7,5.2,-2.3],[1.1,-4.8,9.9])",result = floor(voltData)
241,晓瑜,,fminLBFGSB,"在优化一个单变量二次函数f(x)=(x-3)² +5的最小值时，已知初始猜测为x=0，且参数x的取值范围限制在0到5之间。请使用适当的方法找到该函数的最小值，并将包含最优解、最小值及梯度信息的结果存入变量result。输入数据:目标函数接收参数params（单元素向量），返回标量误差；初始值向量为[0.0]；边界矩阵为[[0,5]]。","def fun(params) {
x = params[0]
return (x - 3.0).square() + 5.0
}","result = fminLBFGSB(fun{}, [0.0], , matrix([[0,5]]))"
242,晓瑜,,fTest,在金融分析中，需要验证股票A和B的日收益率波动是否满足0.8的方差比例。已知股票A（X）包含25个正态分布的观测值，股票B（Y）包含15个正态分布的观测值，要求使用统计学方法计算三种备择假设下的检验结果，并将包含自由度、F统计量和置信区间等信息的字典存入result变量（置信水平95%）。,"X = norm(0.05, 0.02, 25)
Y = norm(0.03, 0.018, 15)","result = fTest(X, Y, 0.8, 0.95)"
243,晓瑜,,gaussianKdePredict,在工业设备监测中，已使用设备A的3组二维振动特征数据（trainData，3行2列矩阵）建立了概率密度模型。现采集到2组新的振动特征数据（testData，2行2列矩阵），请计算新数据点的概率密度估计值，结果存入浮点型向量result。,"trainData = matrix([[2.8, 340], [3.1, 355], [2.9, 348]])
testData = matrix([[2.95, 345], [3.05, 352]])
model = gaussianKde(trainData)
","result = gaussianKdePredict(model, testData)
"
244,晓瑜,,getChunksMeta,"某物联网平台需要检查分布式数据库中存储设备状态表的存储块元信息。已知数据库路径为""dfs://sensorDB""，包含按设备ID范围分区（1-50）的分区表dev_status。请获取该库所有存储块元数据，仅返回前3条记录，并将结果存入变量result。输入数据包含库路径变量db及分区表变量t，输出为一个包含site、chunkId、dfsPath等列的表。","
login(""admin"",""123456"")
if(existsDatabase(""dfs://sensorDB"")) dropDatabase(""dfs://sensorDB"")
db = database(""dfs://sensorDB"", RANGE, 1 26 51)
n = 50000
t = table(rand(1..50, n) as dev_id, rand(36.5..42.0, n) as temperature, rand(70..100, n) as humidity)
db.createPartitionedTable(t, ""dev_status"", ""dev_id"").append!(t)
","
result = getChunksMeta(""/sensorDB%"", 3)
"
245,晓瑜,,getCurrentSessionAndUser,在实时监控物联网设备连接状态时，需要获取当前通信链路的关键信息。请编写代码提取当前会话的唯一编号、认证账户名（未认证时返回guest）、设备来源IP及通信端口号，并将结果存入变量result。输入数据无需准备，输出格式为四元素元组。,,result = getCurrentSessionAndUser()
246,晓瑜,,getDfsRecoveryConcurrency,在分布式数据库集群维护期间，管理员需要检查当前允许同时执行的分区恢复任务的最大数量，以评估系统恢复效率。请编写代码获取该参数值，并将结果存储在变量result中。输入无参数，输出结果为整数类型。,,result = getDfsRecoveryConcurrency()
247,晓瑜,,getGroupAccess,某金融机构管理员需检查两个用户组“devOps”和“dataScience”在当前系统的访问权限配置情况。已知输入数据为包含这两个组名的字符串向量groupNames，请编写代码获取权限信息并将结果字典保存到result变量。,"groupNames = [""devOps"", ""dataScience""]",result = getGroupAccess(groupNames)
248,晓瑜,,getStreamTables,在实时交易监控场景中，系统创建了持久化流表sensor1（已加载）、持久化流表sensor2（未加载）以及一个非持久化的共享流表tempMetrics。请编写脚本提取内存中所有持久化流数据表的元信息（包含表名、共享状态、持久化标记、加载状态、列数量），结果存入变量result。,"share streamTable(10:0, `timestamp`device`reading, [TIMESTAMP, SYMBOL, DOUBLE]) as sensor1
enableTablePersistence(sensor1, true)
sensor2 = streamTable(100:0, `ts`id`value, [TIMESTAMP, SYMBOL, INT])
enableTablePersistence(sensor2, true)
undef(`sensor2, VAR)
share streamTable(10:0, `time`metric`val, [TIMESTAMP, SYMBOL, FLOAT]) as tempMetrics",result = getStreamTables(1)
249,晓瑜,,getUserAccess,"某金融公司管理员需要审计用户""userA""及其所属组的权限叠加后的最终生效配置，包括内存限制和数据库操作权限。已知输入包括用户表（userId为""userA""）和组表（groups为""groupB""），其中用户拥有单独的表读取权限，所属组拥有数据库管理权限。请输出包含用户最终权限详情的结构化结果。","
login(""admin"", ""123456"")
createUser(""userA"", ""password"", ""normal"")
createUser(""groupB"", ""password"", ""group"")
addGroupMembership(""groupB"", ""userA"")
grant(""userA"", TABLE_READ, ""*"")
grant(""groupB"", DB_MANAGE, ""db1"")
","
result = getUserAccess(`userA, true)
"
250,晓瑜,,getUserList,在物联网设备管理系统中，需要获取当前所有非管理员用户账户的名称并按字母升序排列以便进行权限审核。已知管理员用户名为admin，密码为sensor2023。请编写代码实现并将排序后的结果存储在变量result中（输出为字符串向量）。,,"login(`admin, ""sensor2023""); result = getUserList().sort()"
251,雨彤,,gpPredict,"在量化因子预测场景中，现有输入表input_data包含交易日(trade_date)、资产编号(asset_id)及四个归一化后的特征值(f1-f4)，格式为[TRADE_DATE:DATE, ASSET_ID:SYMBOL, F1:FLOAT, F2:FLOAT, F3:FLOAT, F4:FLOAT]。需要对每个资产采用适应度最高的两个数学表达式进行分组预测，生成包含两个预测结果列的表格，结果保存到result变量中。如何实现？","input_data = table(2023.10.01..2023.10.05 as trade_date, `001`002`001`002`001 as asset_id, rand(1.0,5) as F1, rand(1.0,5) as F2, rand(1.0,5) as F3, rand(1.0,5) as F4)","result = gpPredict(engine, input_data, 2, ""asset_id"")"
252,雨彤,,gram,"在物联网监控系统中，某设备记录了三个传感器的时序指标数据（温度、湿度、气压），数据存储在表sensor_metrics中，结构为(temperature, humidity, pressure)。现需要分析三个传感器数据的关联程度，计算格拉姆矩阵时不进行均值中心化处理，要求输出结果为名为result的矩阵。","
sensor_metrics = table(-5.4 3.2 9.1 2.8 as temperature, 48 52 60 57 as humidity, 101.3 102.1 100.7 99.9 as pressure)
ds = sqlDS(<select * from sensor_metrics>)
","
result = gram(ds, subMean=false)
"
253,雨彤,,hmac,"某物联网设备需要为传感器数据生成认证码确保传输完整性。已知密钥为""device_123_secret""，待加密信息为JSON格式字符串'{""sensor"": ""temp"", ""value"": 26.5}'，请使用SHA512算法生成对应的认证码并将结果存储在变量result中。输入密钥变量名为key，信息变量名为msg，输出要求为字符串格式的哈希值。","|
key = ""device_123_secret""
msg = '{""sensor"": ""temp"", ""value"": 26.5}'","|
result = hmac(key, msg, ""sha512"")"
254,雨彤,,invGamma,"在设备可靠性分析中，已知某部件的寿命服从形状参数为3.0、尺度参数为1.5的分布模型。现需计算该部件在5%低风险阈值、50%中位寿命及95%高可靠性阈值对应的具体使用时长，输入概率值为[0.05,0.5,0.95]。请根据给定参数（shape_param=3.0，scale_param=1.5，概率数组变量名为probabilities）进行计算，结果存入result变量。","shape_param = 3.0
scale_param = 1.5
probabilities = [0.05, 0.5, 0.95]
","result = invGamma(shape_param, scale_param, probabilities)
"
255,雨彤,,isMonthStart,"某金融公司需要筛选出每月首日的交易日期进行分析。给定一个日期序列dates = [2023.01.01, 2023.01.15, 2023.02.01, 2023.03.05]，请创建一个布尔型向量result，准确标识每个日期是否是当月的首日。","dates = [2023.01.01, 2023.01.15, 2023.02.01, 2023.03.05]",result = isMonthStart(dates)
256,雨彤,,isQuarterStart,某物联网平台需要筛选设备在季度首日上传的数据。给定一个包含日期值的向量dates，其元素为2023.01.01、2023.03.15、2023.04.01和2023.07.01，数据类型为DATE。请识别这些日期中哪些属于季度开始的第一天，并将判断结果存储为布尔型向量result。,"dates = [2023.01.01, 2023.03.15, 2023.04.01, 2023.07.01]",result = isQuarterStart(dates)
257,雨彤,,jsonExtract,物联网设备的状态信息以JSON格式存储在表的status列中，每个JSON包含设备ID和嵌套的传感器数据，其中温度传感器的最新三次读数存储在temp数组里。如何提取每个设备最近一次的温度值并转换为整型，结果存入result变量？,"deviceData = [
'{""deviceID"": ""D001"", ""sensors"": {""temp"": [23.7, 22.1, 24.3], ""pressure"": 101}}',
'{""deviceID"": ""D002"", ""sensors"": {""temp"": [19.6, 18.9], ""humidity"": 50}}'
]
t = table(deviceData as status)
","result = jsonExtract(t.status, [""sensors"", ""temp"", -1], ""int"")
"
258,雨彤,,loadBackup,某期货交易平台需从备份文件恢复2023年10月黄金期货交易数据。已知备份存放在/home/backup/futures目录，数据库路径为dfs://futures，分区路径为/2023M10/GOLD，表名为contracts。要求加载该分区备份生成一个包含日期(date)、合约代码(contractID)、收盘价(closePrice)三列的数据表，并将结果存入变量result。,,"result = loadBackup(""/home/backup/futures"", ""dfs://futures"", ""/2023M10/GOLD"", ""contracts"")"
259,雨彤,,loadNpz,"在物联网监控系统中，一个npz文件存储了设备序列号列表（device_tags，一维字符串数组）和传感器采集的三维时序数据（sensor_readings，包含浮点数及空值）。如何读取该文件并将结果存入变量result？文件路径为""/iot/sensor_data_2023q3.npz""。","path = ""/iot/sensor_data_2023q3.npz""",result = loadNpz(path)
260,雨彤,,matchAll,"在设备故障分析场景中，如何从物联网设备日志表里筛选出同时包含""系统错误""和""过热""告警的记录？输入表deviceLogs包含三列:设备编号deviceId（LONG）、日志编号logId（INT）、日志内容logMessage（STRING），要求输出结果存储在result变量中。","logMessages = [
""设备001发生系统错误，温度正常"",
""设备002检测到过热告警，未发现系统错误"",
""设备003同时出现系统错误和过热故障"",
""设备004主控芯片过热导致系统错误"",
""设备005所有指标均在正常范围"",
""系统错误与过热同时发生于设备006"",
""设备007温度偏高但未达告警阈值"",
""设备008的过热问题已触发系统错误保护机制""
]

deviceLogs = table([1001,1002,1003,1004,1005,1006,1007,1008] as deviceId, 1..8 as logId, logMessages as logMessage)

if(existsDatabase(""dfs://iotDB"")){
dropDatabase(""dfs://iotDB"")
}
db = database(directory=""dfs://iotDB"", partitionType=VALUE, partitionScheme=[1001,1004,1007], engine=""PKEY"")
pt = createPartitionedTable(db, deviceLogs, ""pt"", ""deviceId"", primaryKey=`deviceId`logId, 
indexes={""logMessage"":""textindex(parser=english, full=false, lowercase=true, stem=false)""})
pt.tableInsert(deviceLogs)
","result = select * from pt where matchAll(logMessage, ""错误 过热"")
"
261,雨彤,,matchPhraseSuffix,在物联网设备日志表中筛选出所有触发警报且触发设备名称以特定后缀结尾的记录。输入数据表包含设备消息列（message），每条消息为字符串格式，输出结果保存在变量result中，格式与输入表相同。,"login(""admin"", ""123456"")
if(existsDatabase(""dfs://iotDB"")) dropDatabase(""dfs://iotDB"")
db = database(directory=""dfs://iotDB"", partitionType=VALUE, partitionScheme=[1001,1002], engine=""PKEY"")

deviceLogs = [
""Node1001-dev triggered alert CODE123"",
""Sensor1002 triggered low battery warning"",
""Hub1003-dev detected alert STATUS_CRITICAL"",
""Device1004 reported normal operation"",
""Terminal1005-dev issued alert TEMP_OVERFLOW""
]

t = table([1001,1002,1003,1004,1005] as deviceID, deviceLogs as message)
pt = createPartitionedTable(dbHandle=db, table=t, tableName=""pt"", 
partitionColumns=""deviceID"",primaryKey=`deviceID,
indexes={""message"":""textindex(parser=english, full=false, lowercase=true, stem=true)""})
pt.tableInsert(t)
","result = select * from pt where matchPhraseSuffix(message, ""dev"", ""alert"")
"
262,雨彤,,matchUnorderedSpan,"某物联网设备日志表device_log包含字段deviceId（设备编号）、timestamp（时间戳）、logMessage（日志信息，已设置英文分词索引）。需要查找日志信息中包含""sensor""和""error""两个词汇（词序不限），且两个词之间或前后最多允许存在1个其他词汇的记录，结果集存入变量result。","deviceId = [1001,1002,1003,1001,1002]
timestamp = [2023.08.01T09:30:00, 2023.08.01T09:32:15, 2023.08.01T09:35:00, 2023.08.01T09:37:30, 2023.08.01T09:40:00]
logMessage = [
""Temperature sensor reports error code E102"",
""Error detected in motion sensor unit"",
""Sensor calibration completed successfully"",
""Network error: sensor gateway timeout"",
""Error occurred while reading pressure sensor data""
]

schema = table(
array(INT,0) as deviceId,
array(DATETIME,0) as timestamp,
array(STRING,0) as logMessage
)

dbName = ""dfs://iotDB""
if existsDatabase(dbName): dropDatabase(dbName)
db = database(dbName, VALUE, 1000..1005, engine=""PKEY"", atomic=""CHUNK"")
pt = db.createPartitionedTable(schema, ""device_log"", ""deviceId"", 
indexes={""logMessage"":""textindex(parser=english, full=false, lowercase=true, stem=true)""})
pt.append!(table(deviceId, timestamp, logMessage))
","result = select * from pt where matchUnorderedSpan(logMessage, ""sensor error"", 1)
"
263,雨彤,,mavgTopN,"某个物联网平台收集了多个传感器的运行数据，包括时间戳、温度读数及电池电量。请为每个传感器，基于最近5次记录中温度最高的前两次，计算对应电池电量的移动平均值。输入表名为sensor_data，结构为(sensor_id, time, temperature, battery)，输出结果存入result变量。","sensor_data = table(take([""A"",""B"",""C""],6) as sensor_id, 2023.01.01T00:00:00 + 1..6 as time, rand(40.0..80.0,6) as temperature, rand(100,6)+50 as battery)
","result = select sensor_id, time, mavgTopN(battery, temperature, 5, 2, false) as avg_top2_battery from sensor_data context by sensor_id
"
264,雨彤,,mkurtosis,某证券公司的量化团队需要分析两只股票收益率的分布尾部风险。给定一个包含过去5个交易日收益率的矩阵，列名为stock1和stock2，时间索引为2023.01.01到2023.01.05。要求为每个股票计算最近3个交易日的无偏峰度值，结果存储在result变量中。输入矩阵数据格式:2列5行的矩阵，变量名为ret，输出为与输入维度相同的矩阵。,"
dates = 2023.01.01..2023.01.05
ret = matrix(-0.02 0.017 -0.035 0.043 0.012, 0.015 -0.028 0.031 -0.019 0.025)
ret.rename!(dates, `stock1`stock2)
ret.setIndexedMatrix!()
","
result = mkurtosis(ret, 3d, false)
"
265,雨彤,,movingTopNIndex,"在物联网传感器监测系统中，传感器每半小时采集一次温度数据。现有连续10次采集到的温度值存储在向量sensorTemps中，格式为[25,22,23,22,24,21,20,22,23,24]。要求以5次采集为一个分析窗口，在每个窗口中找出温度最低的3个读数对应的采集时点序号（升序排列）。当温度相同时，选择出现时间更早的传感器数据。输出结果需要保持每行固定3个元素，不足部分用空值填充。最终结果存储在变量result中，输出格式为数组向量。","sensorTemps = [25, 22, 23, 22, 24, 21, 20, 22, 23, 24]","result = movingTopNIndex(X=sensorTemps, window=5, top=3, ascending=true, fixed=true, tiesMethod=""oldest"")"
266,雨彤,,mTopRange,"在物联网设备监测场景中，计算每个温度读数前3个观测点内连续递增的有效记录数。给定时间索引的温度序列X（含空值），其中X由2023.01.01至2023.01.05期间5个数据点组成，数值依次为[NULL, 25.8, NULL, 26.1, 26.5]。要求输出结果为与原数据对齐的连续递增计数序列。","date = 2023.01.01 + 0..4
temperature = [NULL, 25.8, NULL, 26.1, 26.5]
X = indexedSeries(date, temperature)
","result = mTopRange(X, window=3)
"
267,雨彤,,mvccTable,"在股票高频交易场景中，需要创建一个支持并发写入且持久化存储的行情数据表。该表需包含纳秒级时间戳、资产代码、最新价、成交量四个字段，其中资产代码使用高效存储类型。要求表结构初始分配100万行容量，创建时预分配0行，数据保存在""/data/market""目录下的""realtime_quotes""表中，并为所有数值字段设置禁止空值。请编写实现该需求的代码。","

prepareCode: """""," 
colDefs = [`timestamp`symbol`price`volume]
typeDefs = [NANOTIMESTAMP,SYMBOL,DOUBLE,LONG]
result = mvccTable(1000000:0, colDefs, typeDefs, ""/data/market"", ""realtime_quotes"", [00:00:00.000000000,`,0,0], [false,true,false,false])
"
268,雨彤,,or,在物联网环境中，传感器监测数据表device_log包含时间戳timestamp、状态码code和电压voltage三个字段。需要获取状态码为5或者电压小于等于3的记录，输入数据格式为timestamp是DATETIME类型，code和voltage是整型，输出结果存入变量result。,"device_log = table(2023.01.01T09:00:00 2023.01.01T09:05:00 2023.01.01T09:10:00 as timestamp, 5 2 8 as code, 4 3 2 as voltage)
","result = select * from device_log where code == 5 || voltage <= 3
"
269,雨彤,,plot,"假设有一个股票价格表包含三个公司的每日收盘价（AAPL、MSFT、GOOG）和对应日期，需要绘制每个公司使用独立纵轴的柱形图展示2023年5月前5个交易日的价格走势。其中输入表变量名为stockPrices，包含date、AAPL、MSFT、GOOG列，数值类型均为DOUBLE。要求图表主标题为""Stock Price Trends""，X轴标题""Trading Days""，Y轴标题""Price""，输出变量名为result。","stockPrices = table(2023.05.01..2023.05.05 as date, 
172.3 175.1 177.9 174.5 176.8 as AAPL,
307.2 310.5 309.8 312.4 315.1 as MSFT,
118.4 119.9 122.6 121.3 123.5 as GOOG)
","result = plot([stockPrices.AAPL, stockPrices.MSFT, stockPrices.GOOG], 
stockPrices.date, 
[""Stock Price Trends"",""Trading Days"",""Price""], 
chartType=COLUMN, 
extras={multiYAxes:true})
"
270,雨彤,,polyPredict,"某物联网平台使用三次多项式模型预测设备温度随时间的变化。已知模型系数按升幂排列为[25, -0.8, 0.03, -0.001]，需要计算设备在0、5、10、15、20分钟时的预测温度。给定时间序列变量t为[0,5.0,10.0,15.0,20.0]，模型变量名为coeffs，输出结果保存到result。","coeffs = [25, -0.8, 0.03, -0.001]
t = [0,5.0,10.0,15.0,20.0]","result = polyPredict(coeffs, t)"
271,雨彤,,print,在物联网系统中，实时采集了10条传感器温度数据，存储于表sensorData，包含timestamp（时间戳）、sensorId（传感器编号）和temperature（温度值）三列。请计算各传感器的平均温度并将结果输出。输入数据格式为内存表，变量名sensorData；输出结果需赋值给变量result，格式为表。,"sensorData = table(2023.01.01T00:00:00 + 0..9 as timestamp, take(`S1`S2,10) as sensorId, rand(30.0..40.0,10) as temperature)","avgTemp = select avg(temperature) as avgTemp from sensorData group by sensorId
result = print(avgTemp)"
272,雨彤,,pwlfPredict,在股票价格分析中，我们使用三段式线性模型对历史数据进行拟合，现需对新的时间点进行趋势预测。给定10个等间隔时间点（变量timePoints）对应的归一化价格（变量prices），以及需要预测的20个均匀间隔时间点（变量testTimes）。请根据已训练的三段线性回归模型（变量model），预测测试时间点的价格走势，要求返回浮点数向量保存在result变量中。,"def linspace(start, end, num, endpoint=true){
return start + (end - start)/(num - endpoint?1:0) * 0..(num-1)
}
timePoints = linspace(0.0, 5.0, 10)
prices = [2.3, 2.8, 3.1, 3.5, 3.7, 3.9, 4.2, 4.0, 4.5, 4.8]
model = piecewiseLinFit(timePoints, prices, 3)
testTimes = linspace(0.0, 5.5, 20)","result = pwlfPredict(model, testTimes)"
273,雨彤,,qr,在物联网设备的信号处理中，传感器阵列采集了四个参数在三个采样周期的数据，存储为3行4列的矩阵sensorData。现需对该矩阵进行正交矩阵分解并仅提取上三角矩阵成分，将计算结果存入变量result。输入矩阵格式为:三行四列浮点型矩阵，变量名sensorData；输出结果为上三角矩阵，变量名result。,"sensorData = matrix([2.1,4.8,3.6], [5.5,7.2,1.9], [9.3,0.4,2.7], [3.8,6.1,8.4])","result = qr(sensorData, mode='r')"
274,雨彤,,randMultivariateNormal,"在物联网设备监控场景中，需要生成两个具有相关性的传感器（温度、湿度）仿真数据。给定温度均值为3.5℃，湿度均值为65%RH，协方差矩阵为[[1.0,-0.2],[-0.2,0.5]]。要求构造1000个二维样本，每个样本按列排列存入矩阵，最终结果存储在变量result中。输入数据格式为:均值数组temp_humid_mean=3.5 65.0，协方差矩阵cov_matrix=[1.0,-0.2,-0.2,0.5]$2:2，输出为1000列2行的二维矩阵。","temp_humid_mean = [3.5, 65.0]
cov_matrix = [1.0, -0.2, -0.2, 0.5]$2:2","result = randMultivariateNormal(temp_humid_mean, cov_matrix, 1000, false)"
275,雨彤,,refCount,在物联网设备管理中，多个设备节点共享同一份传感器配置对象。需要检查当前该配置对象被多少个变量引用。已知初始配置变量为sensorConfig，设备节点变量device01-device03都指向该配置。请编写代码统计引用数量，并将结果存入result。,"sensorConfig = dict()
device01 = sensorConfig
device02 = sensorConfig
device03 = sensorConfig",result = refCount(`sensorConfig)
276,雨彤,,regexCount,"在物联网设备监控中，需要统计每条日志记录内特定错误码的出现次数。错误码格式为""ERR""后接3位数字。给定字符串向量logs，例如[""Log1: ERR001 found"", ""ERR123 and ERR456"", ""No errors""]，统计每个元素中符合该错误码模式的次数，结果存入result。","logs = [""Log1: ERR001 found"", ""ERR123 and ERR456"", ""No errors""]","result = regexCount(logs, ""ERR\\d{3}"")"
277,雨彤,,renameCatalog,"在金融分析平台中，当前存在一个名为""stockData2021""的分布式数据目录，其中包含按日期分区的交易表trades，表结构为日期（date）和价格（price）。现需要将该目录更名为""equityData2021""以适应新的数据分类标准。请编写代码执行此操作，并将结果存储在变量result中。","db = database(""dfs://stockData2021"", VALUE, 2021.01.01..2021.12.31)
t = table(take(2021.01.01, 100) as date, rand(100.0, 100) as price)
pt = db.createPartitionedTable(t, ""trades"", `date)
pt.append!(t)","result = renameCatalog(""stockData2021"", ""equityData2021"")"
278,雨彤,,repmat,某基金管理公司需要分析季度收益模式，原始数据为包含两种策略在三个月的收益率矩阵(2行3列格式)，存储在变量quarterReturns中。现需要创建一个对比视图:纵向复制2次以比较半年数据，横向复制3次以模拟同类策略集群。请生成目标矩阵并将结果存入result。,"quarterReturns = matrix(0.05 0.03 0.02, 0.04 0.06 0.01)","result = repmat(quarterReturns, 2, 3)"
279,雨彤,,rowCumwsum,有三个传感器记录了三个时间点的测量值，存储为3行3列的矩阵measurements，每行对应一个传感器。每个时间点有不同的权重，存储在同结构的矩阵weights中。计算每个传感器在各时间点的累积加权和，结果存入变量result。,"measurements = matrix([3.5, 4.2, 2.8], [5.1, 6.3, 7.4], [2.0, 3.1, 4.5])
weights = matrix([0.8, 0.7, 0.6], [1.2, 1.1, 1.0], [0.9, 1.0, 0.8])","result = rowCumwsum(measurements, weights)"
280,雨彤,,rowEuclidean,"在物联网设备监测中，设备采集了三组不同维度的运行参数。第一组参数序列为[[2.3,4.8],[5.1,7.6],[9.2,3.5]]，第二组对应的对比参数序列为[[1.8,5.2],[4.9,8.1],[10.0,2.7]]。需要计算每组对应维度参数之间的差异幅度值，要求结果为浮点型数组存储在result变量中。","a = array(DOUBLE[], 0, 10)
a.append!([[2.3,4.8], [5.1,7.6], [9.2,3.5]])
b = array(DOUBLE[], 0, 10)
b.append!([[1.8,5.2], [4.9,8.1], [10.0,2.7]])","result = rowEuclidean(a, b)"
281,雨彤,,rowGroupby,在物联网监控场景中，存在一个3行3列的传感器温度矩阵m（行代表采集时点，列代表设备编号），以及对应的3行3列状态编码矩阵g。需要按照每个采集时点内的状态编码对温度进行分组，计算每组温度的总和，要求结果以字典形式返回（'key'为升序排列的状态组，'value'为对应的温度总和），结果存入变量result。,"m = matrix([10.1 20.3 15.5, 22.0 18.5 24.0, 17.3 19.8 16.2])
g = matrix([1 2 2, 2 2 3, 3 3 3])","result = rowGroupby(func=sum, funcArgs=m, groupingCol=g, mode='dict')"
282,雨彤,,rowImax,某物联网设备记录了每小时三个传感器的温度数据，存储在表device_temp中，包含列timestamp（TIMESTAMP）、sensor1（DOUBLE）、sensor2（DOUBLE）、sensor3（DOUBLE）。请找出每小时哪个传感器读数最高，返回对应的传感器编号（0表示第一个传感器，1表示第二个，2表示第三个），将结果存入变量result。,"
device_temp = table(
2023.01.01T09:00:00 2023.01.01T10:00:00 2023.01.01T11:00:00 as timestamp,
[34.5, 35.1, 33.8] as sensor1,
[35.8, 34.9, 34.2] as sensor2,
[36.1, 35.5, 37.0] as sensor3
)
","
result = select rowImax(sensor1, sensor2, sensor3) as max_sensor_idx from device_temp
"
283,雨彤,,rowSkew,"假设有一个物联网设备传感器采集了3台设备在4个时间点的温度数据，存储为一个DolphinDB表，列名为T1到T4，变量名为deviceReadings。其中设备A的温度记录为[32.5,33.1,31.8,32.9]，设备B为[28.9,29.5,NULL,30.2]，设备C为[35.0,35.6,36.2,35.3]。请逐行计算每个设备温度读数的分布偏斜程度，要求忽略缺失值并将计算结果存储在result变量中。","deviceReadings = table(
[32.5,33.1,31.8,32.9] as T1,
[28.9,29.5,NULL,30.2] as T2,
[35.0,35.6,36.2,35.3] as T3
)
","result = rowSkew(deviceReadings, biased=false)
"
284,雨彤,,rowStd,在物联网设备监控中，某设备每小时内采集了三个传感器的读数（sensor1、sensor2、sensor3），形成表table1，包含三列数值型数据。请计算每个小时三个传感器读数的离散程度，保存为result变量。,"table1 = table([23.5, 24.1, 22.8] as sensor1, [45.3, 46.0, 44.9] as sensor2, [101.2, 102.5, 100.3] as sensor3)
","result = rowStd(table1)
"
285,雨彤,,rowSum,某物联网监测系统每小时采集三个不同传感器的环境湿度数据，存储于表t的sensorA、sensorB、sensorC列。需要计算每小时三个传感器的湿度总和用于环境评估，输入数据包含三列数值型数组，输出结果为各行的总和向量并赋值给result变量。,"t = table([68.5,72.3,65.9] as sensorA, [70.1,69.8,71.2] as sensorB, [69.7,71.5,68.4] as sensorC)","result = rowSum(t.sensorA, t.sensorB, t.sensorC)"
286,雨彤,,rowSum2,某工厂监测三台设备每小时产生的噪音分贝值，数据存储为表noiseData，包含deviceA、deviceB、deviceC三列浮点数值。请计算每小时三台设备噪音值的平方总和，结果存入变量result。,"noiseData = table([68.5, 72.3, 65.9] as deviceA, [71.2, 69.8, 74.1] as deviceB, [63.4, 67.1, 70.5] as deviceC)
","result = rowSum2(noiseData)
"
287,雨彤,,rowWavg,某物联网平台记录了三个传感器在不同时间点的监测数值（矩阵sensor_data，每行对应一个传感器）和对应的采集间隔分钟数（矩阵interval_weights）。请计算每个传感器在所有时间点的加权平均值，其中权重为间隔分钟数，结果存储在变量result中。,"sensor_data = matrix([56.7, 58.2, 55.9], [62.1, 59.8, 61.3], [53.4, 54.8, 52.6])
interval_weights = matrix([15, 30, 45], [20, 25, 35], [10, 40, 50])","result = rowWavg(sensor_data, interval_weights)"
288,雨彤,,secondOfMinute,在股票高频交易场景中，系统记录了多笔交易的精确时间戳存储在TIMESTAMP类型的向量tradeTimes里。如何提取每个时间点所在分钟的秒数（忽略毫秒部分），将结果存入整型向量result？,"tradeTimes = [2023.03.15T09:30:15.456, 2023.03.15T09:31:30.123, 2023.03.15T09:32:45.789]",result = secondOfMinute(tradeTimes)
289,雨彤,,setTSDBCacheEngineSize,在实时分析高频传感器数据的物联网系统中，当前需要将时序数据库的缓存池容量调整为2.8GB以提升写入吞吐量。请编写代码完成动态扩容操作并检查配置生效情况，将最终生效的缓存容量数值存储在result变量中。输入数据格式为数值型变量memSize=2.8，输出结果为浮点型数值。,memSize = 2.8,"setTSDBCacheEngineSize(memSize)
result = getTSDBCacheEngineSize()"
290,雨彤,,short,某物联网平台接收到一组设备的状态代码，以符号形式存储在变量codes中，具体为`120.9`32767`32768`-32768。需要将这些状态转换为16位有符号整数类型存储，无法转换的异常值转为空。请输出结果为SHORT类型的向量并存入result变量。,codes = `120.9`32767`32768`-32768,result = short(codes)
291,雨彤,,signbit,"在物联网设备监测中，某传感器记录了当前状态为复数形式""-3.5+4.2i""，存储在变量sensorData中。如何检测该数据的实部是否为负数，要求将检测结果存入变量result（输入数据格式:标量复数，输出数据格式:布尔值）","sensorData = complex(-3.5, 4.2)",result = signbit(lowDouble(sensorData))
292,雨彤,,sqlDelete,"某物联网系统中有两张表:设备状态表device_status（包含设备编号device_id和状态status）和报警记录表alerts（包含设备编号device_id、报警时间alert_time和描述信息）。现需要清理报警数据，删除所有状态为'faulty'的设备对应的报警记录。已知device_status结构为[device_id:SYMBOL, status:SYMBOL]，alerts结构为[device_id:SYMBOL, alert_time:DATETIME, description:STRING]，请编写处理代码并将更新后的alerts表赋值给result。","device_status = table(`D001`D002`D003 as device_id, `normal`faulty`normal as status)
alerts = table(`D001`D002`D003`D002 as device_id, 2023.01.01T00:00:00 + 0 1 2 3 as alert_time, [""电压异常"",""温度过高"",""通讯中断"",""湿度超标""] as description)","sqlDelete(alerts, <status=`faulty>, <ej(alerts, device_status, `device_id)>).eval()
result = alerts"
293,雨彤,,stringFormat,"在物联网设备监控场景中，需要将网关编号、当前电压值和最近检测时间组合成状态报告。给定字典变量device包含三个键值对:gateway是字符串""D23_WEST""，voltage是浮点数12.384，check_time是2023.12.05T14:30:00.008的时间戳。要求输出字符串满足以下格式:网关编号左对齐占8字符宽度，电压保留两位小数右对齐占6字符宽度，时间戳精确到毫秒。最终结果存储在result变量中。","device = dict(`gateway`voltage`check_time, ""D23_WEST"", 12.384, 2023.12.05T14:30:00.008)","result = stringFormat(""网关:%%(gateway)-8W | 电压:%6.2fV | 检测:%%T"", device.voltage, device.check_time) % device"
294,雨彤,,temporalFormat,"在物联网设备监控场景中，现有两个精确到毫秒的设备上报时间戳（2023年5月15日09:45:23.456和14:30:15.789），需要将其转换为""年/月/日 时:分:秒.毫秒""格式的机器可读字符串。给定时间向量deviceTimes包含这两个TIMESTAMP类型数据，请生成对应的格式化字符串数组并存入result变量。","deviceTimes = [2023.05.15T09:45:23.456, 2023.05.15T14:30:15.789]","result = temporalFormat(deviceTimes, ""yyyy/MM/dd HH:mm:ss.SSS"")"
295,雨彤,,throw,"在物联网设备监控系统中，现有温度传感器采集到的数据序列为[98.5, 102.3, 97.8, 105.0]。请编写异常处理代码，当检测到温度超过100度时主动触发报警信息，并将生成的异常对象存储在变量result中。输入数据格式为名为temperatures的浮点型向量，输出结果为包含错误描述的字典对象。","temperatures = [98.5, 102.3, 97.8, 105.0]","try {
for (t in temperatures) {
if (t > 100) {
throw(""温度超过安全阈值"")
}; 
}
} catch(ex) {
result = ex
};"
296,雨彤,,toCharArray,某物联网设备将采集的传感器数据压缩后以二进制格式传输。已知数据块y是BLOB类型，开头包含4字节长度标识。现在需要将有效载荷（不含长度头）写入文件，并返回实际写入的字节数。给定y为压缩后的1~50整数序列，请写出处理代码。,"y = blob(compress(1..50).concat())
","f = file(""payload.bin"", ""w"")
result = f.write(y.toCharArray())
f.close()
"
297,雨彤,,triggerNodeReport,"在物联网边缘计算场景中，边缘节点恢复在线后出现元数据不同步的情况。已知节点别名为""edgeNode-05""，请编写代码强制该节点向控制中心上报最新的存储分块状态信息，要求输入为字符串类型的节点别名变量nodeAlias，输出结果为触发操作的状态信息并存储在变量result中。","nodeAlias = ""edgeNode-05""",result = triggerNodeReport(nodeAlias)
298,雨彤,,unsubscribeTable,"在系统维护期间，需要停止对实时物联网传感器数据表""sensorStream""的订阅任务""monitorTask""，并清除已持久化的最新处理进度。已知订阅时通过连接句柄conn（连接到10.0.0.5:9000）建立，且启用了进度持久化功能。请编写代码实现该需求，返回结果存入变量result。","conn = xdb(""10.0.0.5"", 9000)
sensorBuffer = streamTable(100:0, `ts`device`temp`humidity, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE])
subscribeTable(server=conn, tableName=""sensorStream"", actionName=""monitorTask"", handler=sensorBuffer, persistOffset=true)","result = unsubscribeTable(conn, ""sensorStream"", ""monitorTask"", removeOffset=true)"
299,雨彤,,cancelRebalanceTask,"在一个分布式数据库系统中，管理员需要批量取消三个已提交但尚未开始执行的存储优化任务。已知待处理的任务标识符分别为:""rebalance_2023_001""、""rebalance_2023_002""和""rebalance_2023_003""。请编写代码实现任务撤销操作，操作结果需存储在名为result的变量中。输入数据为字符串数组格式的pendingTasks，输出结果为操作执行状态。","pendingTasks = [""rebalance_2023_001"", ""rebalance_2023_002"", ""rebalance_2023_003""]",result = cancelRebalanceTask(pendingTasks)
300,雨彤,,cancelRecoveryTask,"在物联网平台的数据恢复过程中，系统管理员发现有3个等待状态的冗余数据重建任务需要中止，已知任务标识符分别为""node_rcvry_001""、""node_rcvry_002""和""node_rcvry_003""，其中前两个任务尚未开始执行。请编写代码终止这些待处理任务，并将操作结果存储在变量result中。输入数据为字符串向量形式，变量名为pendingTasks。","pendingTasks = [""node_rcvry_001"", ""node_rcvry_002"", ""node_rcvry_003""]",result = cancelRecoveryTask(pendingTasks[0..1])
301,雪莲,,checkBackup,"某证券系统使用组合分区的分布式数据库存储交易记录和客户持仓表，每日自动进行增量备份。现需验证2023年7月25日所有交易表分区的备份文件完整性，已知数据库路径为""dfs://tradeDB""，交易表名为""trade""，备份存储在""/backup/trade""，如何检测异常备份信息并将结果存入变量？","login(""admin"", ""123456"")
dbName = ""dfs://tradeDB""
backupDir = ""/backup/trade""

n=10000
symbol = rand([""AAPL"",""TSLA"",""MSFT""],n)
date = take(2023.07.25..2023.07.28, n)
price = rand(100.0..300.0, n)
qty = rand(10..1000, n)
trade = table(symbol, date, price, qty)

if(existsDatabase(dbName)) dropDatabase(dbName)
dateDB = database(, VALUE, 2023.07.25..2023.07.28)
symbolDB = database(, HASH,[SYMBOL, 3])
db = database(dbName, COMPO,[dateDB, symbolDB])
pt = db.createPartitionedTable(trade, `trade, `date`symbol).append!(trade)
client = table(rand([""C1001"",""C1002"",""C1003""],n) as cid, trade.symbol, trade.date, trade.qty)
db.createPartitionedTable(client, `client, `date`symbol).append!(client)

backup(backupDir, dbName, tableName=`trade, parallel=true)
backup(backupDir, dbName, tableName=`client, parallel=true)","result = checkBackup(backupDir, dbName, ""trade"", ""%/2023.07.25"")"
302,雪莲,,clearTablePersistence,"在物联网设备监控场景中，某个流表持续记录传感器上传的温度数据。现需中断该表的磁盘存储功能并擦除所有已存档数据，但需保留内存中的表框架以便后续重启采集。已知输入表sensorStream包含三列（deviceId [SYMBOL], ts [TIMESTAMP], temp [DOUBLE]），请编写满足要求的操作代码并将执行结果存入result。","sensorStream = streamTable(100:0, `deviceId`ts`temp, [SYMBOL, TIMESTAMP, DOUBLE])
enableTableShareAndPersistence(table=sensorStream, tableName=`sensorData, cacheSize=500000)
for (i in 1..50) {
data = table(take(string('D00')+(1..10), 100) as deviceId, now() - 100 + 0..99 as ts, rand(80.0, 100) as temp)
sensorStream.append!(data)
}",result = clearTablePersistence(sensorStream)
303,雪莲,,closeSessions,在物联网设备管理中，需要定期清理所有在2023年9月1日前最后活跃的过期连接会话。给定当前系统会话信息表包含sessionId（长整型）、lastActiveTime（时间戳）等字段，变量名为deviceConnections，请编写代码关闭符合条件的会话并将结果存入变量result。,deviceConnections = getSessionMemoryStat(),"expiredSessions = deviceConnections[deviceConnections.lastActiveTime < 2023.09.01T00:00:00.000].sessionId
result = closeSessions(expiredSessions)"
304,雪莲,,crossStat,"在物联网监测系统中，设备采集了两个环境参数序列:参数C的有效读数存储在数组paramC中为[5.2,空值,3.8,4.5]，参数D的有效读数存储在数组paramD中为[空值,72,68,70]。需要统计有效数据配对的数量、参数C的总和、参数D的总和、参数C的平方和、参数D的平方和，以及两参数的乘积之和，结果存入result变量。","paramC = [5.2, NULL, 3.8, 4.5]
paramD = [NULL, 72, 68, 70]","result = crossStat(paramC, paramD)"
305,雪莲,,cumbetaTopN,"在实时监测系统中有三组数据:设备电压波动值（X）、环境温度变化值（Y）和采集时间戳（S），要求在每个新数据到达时，按时间升序取最近4个有效观测点，计算温度变化对电压波动的敏感度指标。输入数据X=[5.1,3.8,7.0,6.2], Y=[2.3,1.5,3.0,2.8], S=[2023.08.01,2023.08.03,2023.08.02,2023.08.05]，输出结果存入result。","X = [5.1, 3.8, 7.0, 6.2]
Y = [2.3, 1.5, 3.0, 2.8]
S = [2023.08.01, 2023.08.03, 2023.08.02, 2023.08.05]
","result = cumbetaTopN(X, Y, S, 4, ascending=true)
"
306,雪莲,,cumcorr,"假设某物联网设备记录了最近5分钟的温度数据（保存为向量temp）和相应的湿度读数（保存为humidity）。需要实时输出这两个指标从采集开始到每个时间点的连续关联程度指标，最终结果保存为result。已知输入数据格式为:temp = [22.1, 23.5, 24.3, 25.0, 23.8]，humidity = [45, 50, 55, 60, 58]，要求输出格式为向量。","temp = 22.1 23.5 24.3 25.0 23.8
humidity = 45 50 55 60 58","result = cumcorr(temp, humidity)"
307,雪莲,,cumstdpTopN,在实时监控3只股票的交易数据时，如何根据过去所有时段的成交量为排序依据，动态筛选出每个时点成交量最大的前5条记录，并计算这些选中价格的总体标准差？已知输入表结构为:stockID(整型)、tradeVolume(整型)、price(浮点型)，结果变量名为result。,"stockID = rand(1..3, 10)
tradeVolume = rand(100..200, 10)
price = round(rand(50.0..150.0, 10), 2)
t = table(stockID as stockID, tradeVolume as tradeVolume, price as price)
","result = select cumstdpTopN(price, tradeVolume, 5, false) as result from t
"
308,雪莲,,decodeShortGenomeSeq,"在基因测序数据解析中，给定一个整数向量encoded_values包含三个元素:第一个是对长度为4的有效编码，第二个是无效的空值，第三个是超过长度限制的无效编码。请将其转换为对应的DNA字符串序列，结果为result。输入数据格式为[28983, NULL, 123456789]，输出应为[""ATCG"", """", """"]。","encoded_data = [28983, int(), 123456789]",result = decodeShortGenomeSeq(encoded_data)
309,雪莲,,dropFunctionView,"在量化策略开发中，用户创建了名为""alpha""的模块用于存放实验性因子函数（视图名称格式为alpha::因子名），包含momentum、volatility、liquidity三个临时函数。现需批量清理该命名空间下的所有历史实验函数。输入数据为已注册的这三个函数视图（变量名为factors），输出结果为删除操作后该模块下的函数清单，赋值到变量result。","login(""admin"", ""123456"")
def momentum(){return 100}
def volatility(){return 200}
def liquidity(){return 300}
addFunctionView(momentum, ""alpha::momentum"")
addFunctionView(volatility, ""alpha::volatility"")
addFunctionView(liquidity, ""alpha::liquidity"")","dropFunctionView(""alpha"", true)
result = exec name from getFunctionViews() where name like ""alpha::%"""
310,雪莲,,eachLeft,"在金融分析中，一个字典equityRates包含股票代码`X`Y`Z作为键，对应的值为各股票过去三日的波动率数组（例如X的数组为[0.12, 0.15, 0.09]）。风险补偿参数compensation为向量[0.02, 0.03, 0.01]，需为每只股票的每日波动率增加对应的补偿值，生成补偿后的波动率字典result。输入字典equityRates和向量compensation，输出字典result。","equityRates = dict(`X`Y`Z, [[0.12, 0.15, 0.09], [0.08, 0.11, 0.13], [0.10, 0.14, 0.07]])
compensation = [0.02, 0.03, 0.01]",result = equityRates add:L compensation
311,雪莲,,enableTableShareAndCachePurge,"在物联网场景中，实时采集的设备温度数据需要按照时间条件自动清理旧记录，仅保留最近3分钟的观测值。已知输入表sensorData结构为[time: DATETIME, deviceId: SYMBOL, temperature: DOUBLE]，变量名为sensorData，要求设置5分钟触发检查的时间间隔，执行清理动作后返回当前缓存偏移量到result。","sensorData = streamTable(1000:0, `time`deviceId`temperature, [DATETIME, SYMBOL, DOUBLE])
enableTableShareAndCachePurge(table=sensorData, tableName=`sharedSensor, cachePurgeTimeColumn=`time, cachePurgeInterval=5m, cacheRetentionTime=3m)

baseTime = datetime(2024.01.01T10:00:00)
time = temporalAdd(baseTime, 1..1000, ""s"")
deviceId = take(`D001`D002, 1000)
temperature = rand(36.5..39.8, 1000)
insert into sensorData values(time, deviceId, temperature)
","newTime = temporalAdd(baseTime, 600, ""s"")
insert into sensorData values(newTime, `D003, 38.2)
result = getStreamTableCacheOffset(sensorData)
"
312,雪莲,,ffill,在股票交易数据中，某只股票的某些时间点的交易量和价格存在缺失值。现在需要针对每只股票分组，在每组内用最近的有效数值填充缺失，但最多向前填充两次。假设已有表t包含日期(date)、股票代码(sym)、价格(price)、成交量(qty)四列，其中price和qty列存在连续空值。请生成处理后的表，并将结果保存到result。,"
date = 2023.01.01 2023.01.01 2023.01.02 2023.01.03 2023.01.04
sym = `AAPL`MSFT`AAPL`MSFT`MSFT
price = 150.5 300.0 NULL NULL 310.2
qty = 1000 5000 NULL 8000 NULL
t = table(date, sym, price, qty)
","
result = select date, sym, price.ffill(2) as price, qty.ffill(2) as qty from t context by sym
"
313,雪莲,,flip,某物联网系统采集了三个传感器在三个时间点的监测数值，存储为包含时间戳、s1、s2、s3列的表sensorData。现在需要将数据结构转换为以传感器为行、时间点为列的形式，方便按设备进行时序分析，请写出转换代码。,"
timestamp = 2023.06.01T09:00:00 + 0..2
s1 = rand(100.0,3)
s2 = rand(100.0,3)
s3 = rand(100.0,3)
sensorData = table(timestamp, s1, s2, s3)
","
result = flip(sensorData)
"
314,雪莲,,flushOLAPCache,在量化交易场景中，OLAP引擎缓存了某股票日内成交数据到内存（库路径dfs://stockTick，表名tickData，结构含symbol、ts、price、qty字段）。现需在系统维护前立即将所有待落盘数据刷入物理存储，请写出保证数据持久化的操作代码，将执行结果存入result变量。,"
if(existsDatabase(""dfs://stockTick"")) dropDatabase(""dfs://stockTick"")
db = database(""dfs://stockTick"", VALUE, 2023.10.01..2023.10.07)
schema = table(1:0, `symbol`ts`price`qty, [SYMBOL,TIMESTAMP,DOUBLE,INT])
db.createPartitionedTable(schema, ""tickData"", ""ts"").append!(
table(`AAPL`MSFT as symbol, [2023.10.01T09:30:00.000, 2023.10.01T09:30:00.001] as ts, [178.93, 332.45] as price, [1000, 500] as qty)
)
",result = flushOLAPCache()
315,雪莲,,getChunkPath,"某物联网平台在分布式数据库中以日期为分区维度存储传感器数据。现需要获取2023年1月2日至1月4日期间采集数据所在的所有物理分区路径。已知数据库名""sensorDB""，分区列为日期类型字段collect_date，目标表为sensor_records，请写出完整实现代码。输入数据格式:数据库包含[collect_date DATE, deviceID INT, temp FLOAT]结构表，输出要求字符串数组存入result。","if existsDatabase(""dfs://sensorDB""):
dropDatabase(""dfs://sensorDB"")

db = database(""dfs://sensorDB"", RANGE, [2023.01.01, 2023.01.05, 2023.01.10])
n = 8
dates = 2023.01.01..2023.01.08
t = table(rand(dates, n) as collect_date, rand(1000..9999, n) as deviceID, rand(35.0..42.0, n) as temp)
pt = db.createPartitionedTable(t, `sensor_records, `collect_date).append!(t)
","ds = sqlDS(<select * from sensor_records where collect_date between 2023.01.02 and 2023.01.04>)
result = getChunkPath(ds)
"
316,雪莲,,getConsoleJobs,在金融交易系统中，运维人员需要实时监测当前节点上所有正在执行的高优先级数据处理任务的状态信息，包括任务ID、用户归属、接收时间和进度指标。输入数据无需手动构造，直接调用相关接口获取。输出结果存储在变量result中，格式为包含节点名称、任务标识、用户ID、接收时间戳、已完成任务量、总任务量以及任务队列类型等字段的表结构。,,result = getConsoleJobs()
317,雪莲,,getDFSTablesByDatabase,在物联网设备监控场景中，存在一个分布式数据库路径为dfs://iot，其中包含存储传感器时序数据的temperature_records表和设备状态日志的equipment_status表。现需要获取该数据库下所有分布式数据表的完整路径列表，并将结果存入变量result。输入数据为数据库结构描述，输出要求为字符串数组格式。,"login(""admin"", ""123456"")
if existsDatabase(""dfs://iot"") {
dropDatabase(""dfs://iot"")
}
db = database(""dfs://iot"", VALUE, 2023.01.01..2023.01.03)
sensorSchema = table(1:0, `ts`deviceID`temp, [TIMESTAMP, STRING, DOUBLE])
statusSchema = table(1:0, `logTime`equipID`state, [TIMESTAMP, STRING, STRING])
db.createPartitionedTable(sensorSchema, ""temperature_records"", `ts)
db.createPartitionedTable(statusSchema, ""equipment_status"", `logTime)","result = getDFSTablesByDatabase(""dfs://iot"")"
318,雪莲,,getLicenseExpiration,在金融交易系统的日常维护中，运维人员需要快速核查当前 DolphinDB 服务节点的许可证有效期以确保系统合规性。请编写代码获取当前节点的许可证过期时间，并将结果存储在变量中。已知节点环境已初始化，无需准备输入数据，输出结果为日期类型变量，变量名为 result。,,result = getLicenseExpiration()
319,雪莲,,getLoadedPlugins,在系统维护过程中，需要查看当前节点各用户安装的扩展模块及其加载时间，包括模块名称、版本、执行安装的用户和具体时间。已知admin用户加载了MySQL插件，user2用户加载了ODBC插件。请编写代码获取相关记录的表格，并将结果保存到变量result中。结果应包含四列:插件名称(plugin)、版本(version)、操作用户(user)、加载时间(time)。,"login(""admin"", ""123456"")
loadPlugin(""mysql"")
logout()
login(""user2"", ""123456"")
loadPlugin(""odbc"")",result = getLoadedPlugins()
320,雪莲,,getPersistenceMeta,"物联网平台需要验证某个设备状态共享流表是否配置了异步写入和压缩存储。已知输入表devices_stream包含两列[ts,device_id]，类型为[TIMESTAMP,SYMBOL]，变量名为tb_stream。请获取该表的持久化元数据，并检查异步模式和压缩标志位的状态。","
colName = [""ts"",""device_id""]
colType = [""TIMESTAMP"",""SYMBOL""]
tb_stream = streamTable(1000:0, colName, colType)
enableTableShareAndPersistence(
table=tb_stream,
tableName=`deviceStatus,
cacheSize=500000,
preCache=10000,
asynchronous=true,
compression=true
)
login(""admin"",""123456"")
append!(tb_stream, 2023.12.01T09:00:00.000 + 1..1000 as timestamp, take(`CAM001`TEMP003,1000) as symbol)
","
result = getPersistenceMeta(tb_stream)
"
321,雪莲,,ilastNot,"物联网场景中三个传感器监测同一设备不同指标，数据存在部分缺失（NULL值），需确定最后一次所有传感器均有效记录的时间点位置。输入为向量s1=[NULL,25,NULL,34,28]，s2=[NULL,60,65,70,NULL]，s3=[100,NULL,110,120,130]，输出结果为整型变量result。","s1 = [NULL, 25, NULL, 34, 28]
s2 = [NULL, 60, 65, 70, NULL]
s3 = [100, NULL, 110, 120, 130]","result = ilastNot([s1,s2,s3])"
322,雪莲,,imr,"在物联网场景中，多个温度传感器节点持续采集数据。需要实现逐步估算全局平均温度值的算法，当连续两次估算结果差值小于0.01时停止计算。已知各节点存储的温度数据为node1_data=[24.5,25.1,24.8]，node2_data=[25.3,24.7,25.0]，要求最终将计算结果存入变量result，输出格式为标量数值。","
node1 = array(DOUBLE).append!([24.5,25.1,24.8])
node2 = array(DOUBLE).append!([25.3,24.7,25.0])
ds = [sqlDS(<select * from node1>), sqlDS(<select * from node2>)]
","
def mapFunc(data, prevAvg){
return avg(data)
}

def finalFunc(prev, current){
return current / size(ds)
}

def termFunc(prev, current){
return abs(current - prev) < 0.01
}

result = imr(ds, 0.0, mapFunc, +, finalFunc, termFunc)
"
323,雪莲,,invExp,"在物联网设备故障预测中，已知某型号传感器的平均故障间隔时间为120小时。现有四个累积概率值0.2、0.4、0.6、0.8，需要计算出对应的故障时间分位点。请根据给定的平均时间参数和概率数组，计算对应的故障时间数值，结果存入result变量。输入数据格式:标量mean=120.0，浮点型向量X=[0.2,0.4,0.6,0.8]，输出为浮点型向量。","mean = 120.0
X = [0.2, 0.4, 0.6, 0.8]","result = invExp(mean, X)"
324,雪莲,,lassoBasic,"某零售公司分析广告投放费用和线下活动次数对季度销售额的影响。输入数据包括7个季度的观测记录:广告费用(万元)为[5,8,12,15,20,25,30]，促销次数为[2,3,5,6,8,9,10]，对应销售额(百万元)为[15,20,25,30,35,42,50]。需要建立惩罚回归模型，要求输出包含系数估计值、标准误差、t统计量和p值的统计表格，其中L1正则化强度参数设为0.8，进行特征标准化处理并保留截距项。输入数据存储在变量adCost、promoCount、sales中，最终结果存入变量result。","adCost = [5,8,12,15,20,25,30]
promoCount = [2,3,5,6,8,9,10]
sales = [15,20,25,30,35,42,50]","result = lassoBasic(sales, (adCost,promoCount), mode=1, alpha=0.8, normalize=true)"
325,雪莲,,lassoCV,"在分析物联网设备的能耗数据时，我们收集了10个样本的目标变量能耗值（列名energy），两个传感器特征参数（列名sensorA、sensorB）以及样本权重（列名weight）。需要建立一个能自动选择正则化强度的回归模型，要求考虑不同L1惩罚系数[0.2,0.5,1.5]，处理时需包含截距项并应用样本权重，最终将模型结果存储在变量result中。输入数据存储在表t中，包含四列DOUBLE类型数据。","energy = [18.3, 22.1, 15.8, 24.6, 19.7, 21.5, 16.9, 23.8, 17.2, 20.4]
sensorA = [1.45, 2.33, 0.98, 2.76, 1.89, 2.05, 1.12, 2.64, 1.03, 1.77]
sensorB = [0.67, 1.02, 0.53, 1.45, 0.82, 0.95, 0.61, 1.38, 0.71, 0.89]
weight = [1.2, 0.8, 1.5, 0.7, 1.1, 0.9, 1.3, 0.6, 1.4, 0.5]
t = table(energy, sensorA, sensorB, weight)
","result = lassoCV(t, ""energy"", [""sensorA"",""sensorB""], alpha=[0.2,0.5,1.5], intercept=true, swColName=""weight"")
"
326,雪莲,,linprog,在物联网设备的能源管理中，设备甲每小时消耗3单位能源，设备乙每小时消耗4单位能源。两设备总运行时间需不低于10小时，甲最多运行5小时，乙最多8小时，运行时间不可为负数。求最小总能耗。输入数据格式:f是长度为2的向量，A是1x2矩阵，b是标量，ub和lb是长度为2的向量。输出结果存储在变量result中。,"f = [3, 4]
A = matrix([-1, -1])
b = [-10]
ub = [5, 8]
lb = [0, 0]","re = linprog(f, A, b, , , lb, ub)
result = re[0]"
327,雪莲,,lj,"给定两张股票数据表，左表包含股票代码、行业和价格，右表包含股票代码、日期和收益率。需要将所有股票信息与符合条件的收益率记录合并，保留左表的所有股票，过滤掉左表中行业为'金融'的股票，且右表收益率需大于3%。最终结果包含股票代码、行业、价格、收益率，变量名为result。左表变量名为stock_info，右表为stock_returns，结构如下:
stock_info: id [SYMBOL], industry [STRING], price [DOUBLE]
stock_returns: symbol [SYMBOL], date [DATE], return_rate [DOUBLE]","stock_info = table(`A`B`C`D as id, ['科技','金融','消费','能源'] as industry, [25.3, 18.7, 42.1, 36.8] as price)
stock_returns = table(`A`B`D`E as symbol, 2023.01.01 2023.01.01 2023.01.02 2023.01.02 as date, [0.035, 0.028, 0.041, 0.025] as return_rate)
","result = lj(stock_info, stock_returns, `id, `symbol, stock_info.industry != ""金融"", stock_returns.return_rate > 0.03)
"
328,雪莲,,lpad,"在物联网设备管理中，需要将设备ID统一格式化为8位长度，不足部分在左侧用字符'0'填充。现有设备ID列表device_ids为[""A123"", ""B4567"", ""C89""]，请生成处理后的结果并赋值给变量result。","device_ids = [""A123"", ""B4567"", ""C89""]
","result = lpad(device_ids, 8, '0')
"
329,雪莲,,lshift,在物联网设备状态解析中，需要将设备原始状态值转换为更高精度的数据。已知设备记录表device_data包含设备编号device_id(INT)和原始值raw_value(INT)两列，要求将原始值按二进制左移3位生成校准数据。请输出包含设备编号和校准后数值的结果表，结果变量名为result。,"device_data = table(1001..1005 as device_id, 12 25 7 33 19 as raw_value)","result = select device_id, raw_value << 3 as calibrated_value from device_data"
330,雪莲,,ltrim,"在处理物联网设备上传的传感器编号时，发现部分编号左侧带有不规则空格。给定字符串向量deviceIDs包含[""   DHT22"",""   SHT35"","" BMP280""]，要求清除每个编号左侧的所有空白字符，并将处理后的结果存入变量result。","deviceIDs = [""   DHT22"",""   SHT35"","" BMP280""]
","result = ltrim(deviceIDs)
"
331,雪莲,,mkdir,在物联网平台中，设备按小时归档传感器数据，需在现有路径 '/iot/2023' 下为10月新增一个子目录 '1004' 存储当天的原始文件。请编写实现该操作的代码，要求将执行结果赋值给变量 result。已知父目录已存在，输出结果需为新目录的实际创建状态。,"# 父目录已存在，无需额外准备数据
","result = mkdir(""/iot/2023/1004"")
"
332,雪莲,,msum2,在物联网设备监控场景中，给定一个传感器数据表sensor_data，包含timestamp（时间戳，按秒递增）、device_id（设备编号，包含D1和D2两种）、value（浮点数值，存在空值）。请对每个设备按时间排序，计算其读数在最近3个数据点中的平方和，当窗口内至少有一个有效值时立即输出结果。结果存储在变量result中，包含原始时间戳、设备编号和计算结果。,"sensor_data = table(2023.10.01T09:00:00 + 1..6 as timestamp, take(`D1`D2, 6) as device_id, [2.1, NULL, 3.3, 4.8, NULL, 5.0] as value)","result = select timestamp, device_id, msum2(value, 3, 1) as result from sensor_data context by device_id csort timestamp"
333,雪莲,,multinomialNB,在物联网场景中，某设备传感器采集了温度、振动频率、电流三个特征数据，每个样本对应正常(0)、高温(1)、故障(2)三种状态标签。现有训练数据集deviceData表包含100条样本（列名为temp、vibration、current），对应的状态向量存储在deviceStatus变量。如何使用基于多项式概率分布的分类算法训练状态识别模型，设置平滑参数为0.5，并将训练结果存入result？,"deviceData = table(
rand(normal(50,5),100) as temp, 
rand(20.0..80.0,100) as vibration,
rand(1.5..3.5,100) as current
)
deviceStatus = take(0 1 2,100).shuffle()
","result = multinomialNB(deviceStatus, deviceData, 0.5)
"
334,雪莲,,nextState,"在物联网设备监控中，某传感器采集了两个指标的数据并存储在矩阵deviceMetrics中。第一列为温度序列[25.0,25.0,25.0,24.8,NULL,24.7]，第二列为湿度状态[NULL,60,NULL,60,60,55]。请找出每个数据点之后的首个状态变化值，若当前为空则取最近的有效状态，结果要求存入变量result。","deviceMetrics = matrix(
[25.0,25.0,25.0,24.8,NULL,24.7],
[NULL,60,NULL,60,60,55]
)",result = nextState(deviceMetrics)
335,雪莲,,objectChecksum,"某物联网设备分两次上传了两组温度监测数据，每组包含5个浮点数值。第一组存储在变量tempPart1中为[20.5, 21.3, 22.0, 19.8, 20.2]，第二组存储在tempPart2中为[23.1, 24.5, 20.9, 21.7, 22.3]。请验证这两个数据片段的整体完整性特征值，并将最终计算结果存入result。","tempPart1 = 20.5 21.3 22.0 19.8 20.2
tempPart2 = 23.1 24.5 20.9 21.7 22.3","cs1 = objectChecksum(tempPart1)
result = objectChecksum(tempPart2, cs1)"
336,雪莲,,oneHot,在分析股票交易记录时，存在一个包含股票代码（字符串类型，变量名stock，取值为'AAPL'、'MSFT'、'GOOG'）、交易方向（字符串类型，变量名action，取值为'BUY'、'SELL'）、成交量（整型，变量名volume）的10行内存表。需要将股票代码和交易方向两个特征转换为二进制标识列，每个特征的不同取值生成对应的0/1标记新列，最终生成的结果表需保留原始的非编码列，并将转换结果存储在result变量中。,"t = table(take(`AAPL`MSFT`GOOG, 10) as stock, take(`BUY`SELL, 10) as action, rand(100,10) as volume)
","result = oneHot(t, `stock`action)
"
337,雪莲,,pcall,在物联网场景中，某设备采集了15万个温度传感器的读数，数据存储在名为sensor_data的表中，包含两列:id（整型）和value（浮点型）。需要快速计算所有传感器读数的平方根并将结果存入变量result，要求使用并行处理方法并确保输出顺序与输入一致。,"
sensor_data = table(1..150000 as id, rand(100.0, 150000) as value)
","
result = pcall(sqrt, sensor_data.value)
"
338,雪莲,,prevState,"在工业设备监控中，设备状态记录为运行（1）、停止（0）或缺失（NULL）。给定变量status的数值向量[1,1,0,NULL,0,1]，生成一个新变量result，表示每个时刻的上一个有效状态（忽略NULL，连续相同状态视为同一阶段）。输出格式应为数值向量，变量名为result。","status = [1, 1, 0, NULL, 0, 1]",result = prevState(status)
339,雪莲,,rdp,某物联网设备每秒钟采集一次位置坐标，形成轨迹点。现有轨迹点向量trackPoints包含1000个点，其中x坐标为递增时间戳（1到1000），y坐标为正弦曲线叠加随机噪声（振幅±5，噪声±0.5）。需要使用矢量压缩算法以阈值0.5进行轨迹简化，保留关键点位。输入数据格式为POINT类型向量trackPoints，输出结果为压缩后的POINT向量result。,"n = 1000
x = 1..n
y = sin(x/100.0)*5.0 + rand(-0.5, 0.5, n)
trackPoints = point(x, y)","result = rdp(trackPoints, 0.5)"
340,雪莲,,remoteRunWithCompression,"某物联网平台需要从边缘节点采集最近24小时内超过5000条传感器日志记录，并确保传输效率。远程节点已建立连接句柄conn，数据表名为sensor_logs，包含timestamp、device_id、metric三列。如何高效获取满足device_id为""S123""且时间在2023.06.01 00:00:00到2023.06.02 00:00:00之间的记录，最终结果存入变量result？","conn = dummy_connection  # 假设已建立的有效连接
# 远程节点存在格式为(table timestamp, device_id SYMBOL, metric DOUBLE)的分布式表
","query_script = '''select * from sensor_logs 
where device_id=""S123"" 
and timestamp between 2023.06.01T00:00:00 : 2023.06.02T00:00:00'''
result = remoteRunWithCompression(conn, query_script)
"
341,雪莲,,renameSchema,"某物联网平台需要将数据仓库中名为""device_2023""的存储架构更名为""device_latest""，该架构属于分类目录""sensorCatalog""。已知当前目录中存在该架构，请编写代码完成重命名操作，结果存储在变量result中。输入数据为字符串格式，输出结果需赋值给result。",,"result = renameSchema(""sensorCatalog"", ""device_2023"", ""device_latest"")"
342,雪莲,,reverse,,,
343,雪莲,,rowDenseRank,"某物联网系统记录了三个传感器每小时的三次温度采集数据，存储在3行3列的矩阵sensorData中（数据为[23,28,NULL]、[25,NULL,22]、[NULL,27,24]）。请对每小时的三次测量值进行逆向密集排名（数值大的排位靠前，空值不参与计算），要求返回与原始矩阵相同维度的整数排位结果。","sensorData = matrix([23 28 NULL, 25 NULL 22, NULL 27 24])","result = rowDenseRank(sensorData, false)"
344,雪莲,,rshift,"在分析物联网设备状态码时，存在一个2行3列的矩阵m，第一行为传感器A的3次采样值[1024,512,256]，第二行为传感器B的3次采样值[128,64,32]。需要将所有数值进行二进制位层面的3格右移操作来压缩数据空间，请实现该转换并将结果存入result。","m = matrix([1024 512 256], [128 64 32])",result = m >> 3
345,雪莲,,runScript,"需要在日志分析系统中动态加载不同项目下的自定义函数模块到配置字典中。已知模块路径为""/modules/DDBLogAnalyser/riskMetrics/projects/portfolioA""下存有maCalc.dos和volatility.dos两个函数文件，要求将这些函数加载到configDict的riskMetricsFunctions键中。输入模块名称""riskMetrics""，项目名称""portfolioA""，配置键名""riskMetricsFunctions""，输出结果存储在result变量。","login(""admin"", ""123456"")
configDict = dict(STRING, ANY)
moduleDir = getHomeDir() + ""/modules/DDBLogAnalyser/riskMetrics/projects/portfolioA""
mkdir(moduleDir, recursive=true)
writeFile(moduleDir + ""/maCalc.dos"", ""def maCalc::projects::portfolioA::maCalc::maCalc(data,window){return mavg(data,window)}"")
writeFile(moduleDir + ""/volatility.dos"", ""def volatility::projects::portfolioA::volatility::volatility(data){return mstd(data)}"")","result = addFunctionsToConfigDict(""riskMetricsFunctions"", ""riskMetrics"", ""portfolioA"")"
346,雪莲,,savePartition,假设某物联网平台需要将传感器采集的设备温度数据存储到分布式数据库中，要求按设备ID进行哈希分区。已知内存表tempData包含字段DeviceID（整型）和Temperature（浮点型），请将其保存到数据库句柄hdl对应的分区表SensorData中，并查询最终总记录数赋值给变量result。,"
login(`admin, `123456)
hdl = database(""dfs://iot_HashDB"", HASH, [INT, 3])
DeviceID = 1..1000
Temperature = rand(40.0..120.0, 1000)
tempData = table(DeviceID, Temperature)
schemaTbl = hdl.createPartitionedTable(tempData, ""SensorData"", ""DeviceID"")
","
savePartition(hdl, tempData, `SensorData)
result = exec count(*) from loadTable(hdl, ""SensorData"")
"
347,雪莲,,seasonalEsd,某物联网温度传感器每半小时采集一次数据，形成连续10天的监测序列。数据包含周期性波动和随机噪声，其中在部分时段存在异常高温。现需基于周期性检测算法找出最多20%的异常点。输入数据为长度240的浮点向量temp_data，要求输出包含异常值索引和数值的表格result。,"n = 240
trend = 0.5 * sin(1..n / 50.0)
seasonal = 8 * sin(pi / 12 * 1..n)
residual = rand(1.5, n) - 0.75
temp_data = trend + seasonal + residual
temp_data[30, 80, 150] += [18.3, 15.7, 17.1]
","result = seasonalEsd(temp_data, 24, true, 0.2, 0.01)
"
348,雪莲,,setMemLimitOfQueryResult,在某个实时监控系统中，为防止大规模设备状态查询导致内存溢出，需要将每次查询返回结果的内存上限设置为1.5GB。已知系统总内存配置满足该限制要求，请编写代码实现此配置，并将最新生效的内存限制值存入变量result。,,"setMemLimitOfQueryResult(1.5)
result = getMemLimitOfQueryResult()"
349,雪莲,,sleep,"模拟温度传感器每隔0.5秒采集一次数据，共采集3次。输入数据temperatureReadings是一个包含3个浮点数的数组（格式:[23.1, 23.3, 23.5]），输出结果result是一个由元组组成的数组，每个元组包含采集时间戳（TIMESTAMP类型）和对应的温度值（FLOAT类型）。请编写数据采集代码。","temperatureReadings = [23.1, 23.3, 23.5]","result = []
for(data in temperatureReadings){
sleep(500)
result.append!(now()::data)
}"
350,雪莲,,sortBy_,"某工厂设备采集的温度数据表device_temp包含列（device_id, timestamp, temperature, status_code）。需要先按设备型号逆序排列，同一设备下再按时间戳由早到晚排序，生成处理后的表格。输入表结构为device_id SYMBOL, timestamp TIMESTAMP, temperature DOUBLE, status_code INT，变量名为dt。请写出实现代码。","dt = table(
take(`DeviceA`DeviceB`DeviceC, 1000) as device_id,
2023.01.01T00:00:00 + 1..1000 as timestamp,
rand(35.5..42.0, 1000) as temperature,
rand(100..599, 1000) as status_code
)
","sortBy!(dt, `device_id`timestamp, [0, 1])
result = dt
"
351,文文,,spline,"某物联网设备每隔一天记录一次温度读数，时间变量X为[2023.05.01T08:00:00, 2023.05.02T08:00:00, 2023.05.03T08:00:00]，对应温度Y为[18.5,20.1,22.3]。需要以每8小时为间隔进行连续温度曲线重建，同时获取重采样时间点和三次插值结果。请输出包含时间序列和温度值的双元素元组到变量result。","X = [2023.05.01T08:00:00, 2023.05.02T08:00:00, 2023.05.03T08:00:00]
Y = [18.5, 20.1, 22.3]","result = spline(X, Y, `8H, outputX=true)"
352,文文,,square,"在物联网传感器数据分析中，现有一个2行3列的矩阵变量sensorReadings，包含数值[1,2,3]和[4,NULL,6]。需要得到每个传感器读数的二次方值矩阵，空值位置保持不变，并将计算结果存储在result变量中。","sensorReadings = matrix([[1,2,3], [4,NULL,6]])",result = square(sensorReadings)
353,文文,,substru,"给定一个包含股票代码的字符串向量symList，每个元素由2位市场代码和6位数字组成。请提取每个股票代码的前两位市场代码，并将结果存储在变量result中。输入数据示例为[""SH600000"",""SZ000001"",""BJ833454""]，输出应返回[""SH"",""SZ"",""BJ""]格式的字符串向量。","symList = [""SH600000"",""SZ000001"",""BJ833454""]
","result = substru(symList, 0, 2)
"
354,文文,,sum4,"在股票收益率分析中，需要统计三支股票的收益率波动特征。给定表t包含时间戳(time)、股票代码(stock_id)、收益率(return)三个字段，其中return列为DOUBLE类型且存在空值。请为每支股票计算收益率值的四次方总和，空值数据不参与计算，结果存储在result变量中。输入表结构示例:[732ms timestamp, ""A""] as time, [""A"",""B"",""C""] as stock_id, [1.0,-2.0,NULL] as return；输出结果为包含stock_id和四次方总和两列的表。","t = table(2023.01.01T09:30:00 2023.01.01T09:31:00 2023.01.01T09:32:00 as time, 
`A`B`C as stock_id, 
[1.0, -2.0, 3.0] as return 
union all 
table(2023.01.01T09:30:00 2023.01.01T09:31:00 2023.01.01T09:32:00, 
`B`C`A, [NULL, 1.5, 2.0]) 
union all 
table(2023.01.01T09:30:00 2023.01.01T09:31:00 2023.01.01T09:32:00, 
`C`A`B, [5.0, NULL, NULL])
)
","result = select sum4(return) as quartic_sum from t group by stock_id
"
355,文文,,tanimoto,在物联网传感器数据分析中，有两个设备采集的时序数据集，sensorSetA为一个3行2列的索引矩阵，行标签为2023-03-01到2023-03-03，列名是PM25和CO2；sensorSetB为一个3行2列的索引矩阵，行标签为2023-03-01、2023-03-03、2023-03-05，列名相同。请计算这两个设备在相同时间节点的环境指标相似度，忽略缺失时间节点，将计算结果存入变量result。,"sensorSetA = matrix(32.1 450, 28.7 412, 35.9 498)
sensorSetA.rename!(2023.03.01..2023.03.03, `PM25`CO2)
sensorSetA.setIndexedMatrix!()

sensorSetB = matrix(31.8 447, 34.2 510, 29.9 403)
sensorSetB.rename!(2023.03.01 2023.03.03 2023.03.05, `PM25`CO2)
sensorSetB.setIndexedMatrix!()","result = tanimoto(sensorSetA, sensorSetB)"
356,文文,,tmcorr,"在物联网监控系统中，传感器每小时采集温度（temp）和湿度（humidity）数据，存储在表m中，包含时间列t（TIMESTAMP类型），数值列temp和humidity。请计算每个时间点前2小时窗口内温度与湿度的相关系数，将结果存入变量result。输入数据格式:表m包含[t: TIMESTAMP, temp: INT, humidity: INT]，输出结果列名为result。","
T = [2023.10.01T08:00, 2023.10.01T09:00, 2023.10.01T10:00, 2023.10.01T11:00, 2023.10.01T12:00]
X = [25, 26, 24, 23, 22]
Y = [60, 58, 62, 65, 63]
m = table(T as t, X as temp, Y as humidity
","
select *, tmcorr(t, temp, humidity, 2h) as result from m
"
357,文文,,tmove,某物联网设备每隔两天采集一次温度数据，但由于网络问题存在缺失记录。请为每个采集时间点查找前移4天对应的温度值；若该时间点无数据，则返回前一个有效温度。已知输入表m包含时间列t（DATE类型）和温度列x（INT类型，允许NULL），输出结果保存到result变量。,"m = table(
[2023.01.02, 2023.01.02, 2023.01.04, 2023.01.06, 2023.01.10, 2023.01.14] as t,
[25, 28, NULL, 22, 27, 24] as x
)
","result = select *, tmove(t, x, 4d) as tmove_temp from m
"
358,文文,,tmvarTopN,在物联网监控场景中，设备每半小时采集一次环境数据。现有时间序列包含时间戳（time）、温度读数（temp）和质量评分（score），其中评分越高表示数据可信度越高。需要为每条记录计算其前3小时窗口内，按质量评分倒序选取最可靠的2个温度读数的波动值，最终结果存储在result变量中。输入数据格式:time为时间类型的向量，temp为整型向量，score为整型向量（含空值）。,"time = 2023.06.15T09:00:00 + 0..6 * 30m
temp = [25, 28, , 30, 26, 27, 24]
score = [80, 92, 75, , 89, 94, 81]
","result = tmvarTopN(time, temp, score, 3h, 2, false)
"
359,文文,,toJson,在物联网监测系统中，有一个设备状态表deviceData，包含三行数据，列为timestamp（时间戳类型）和temperature（浮点类型）。请将其转换为标准的JSON字符串格式，结果存储在变量result中。,"deviceData = table([2023.01.01T00:00:00, 2023.01.01T00:05:00, 2023.01.01T00:10:00] as timestamp, [36.5, 37.0, 36.8] as temperature)",result = toJson(deviceData)
360,文文,,tTest,在量化策略回测中，某因子在股票上的信息系数样本数据存储在表ic_data中，包含ic列共30条记录。现在需要检验该因子的IC均值是否显著不为零，使用95%置信水平。编写代码执行检验并将结果存储在result中。（输入数据格式:内存表ic_data包含数值列ic；输出数据格式:字典result存储检验结果）,"ic_data = table(rand(norm(0.05, 0.1, 30), 30) as ic)","result = tTest(ic_data.ic, , 0, 0.95)"
361,文文,,wc,"某物联网平台采集了一批设备日志，每条日志为字符串格式。已知变量logs=[""Sensor7 TempAlert: 85C"", ""PressureCheck passed at 15:30""], 请分别计算每条日志中的单词数量，将结果存储在result中。","logs = [""Sensor7 TempAlert: 85C"", ""PressureCheck passed at 15:30""]",result = wc(logs)
362,文文,,weekday,"在处理某证券市场的交易数据时，需要将一组日期转换为以周一作为一周起始的星期序号（0代表周一，依次类推到6代表周日）。给定交易日期的向量tradeDates为[2023.03.13, 2023.03.14, 2023.03.15]，编写代码计算对应的序号，并将结果存入变量result。","tradeDates = [2023.03.13, 2023.03.14, 2023.03.15]
","result = weekday(tradeDates, false)
"
363,文文,,write,"在物联网场景中，某设备每隔1小时采集一次环境温度和对应时间戳。现有时间戳数据（datetime类型，变量名为ts，格式为[2023.10.01T08:00:00, 2023.10.01T09:00:00]）和温度数据（double类型，变量名为tempData，格式为[25.3, 26.1]），需要将这些数据以小端模式写入二进制文件，并返回成功写入的数据单元总数。输出结果应存储在result变量中。","
ts = [datetime(2023.10.01T08:00:00), datetime(2023.10.01T09:00:00)]
tempData = [25.3, 26.1]
","
h = file(""iot.bin"", ""w"", true)
result = h.write(ts) + h.write(tempData)
"
364,文文,,add,"在物联网监控场景中，某设备三个区域的传感器每小时会记录基准值和温度波动值。已知基准数据存储在3x2矩阵base中，第一小时波动值存储在相同维度的increment矩阵中，如何计算每个传感器的实际检测值？输入矩阵base=[[10,25],[15,30],[20,35]]，increment=[[2,3],[1,4],[0,5]]，输出结果存储在result中。","
base = matrix([[10,25],[15,30],[20,35]])
increment = matrix([[2,3],[1,4],[0,5]])
","
result = add(base, increment)
"
365,文文,,atImax,"某物联网系统监控三个设备每小时的最大负载数据（矩阵格式，每列代表一个设备），同时记录对应的响应时间。如何找出每个设备在负载达到峰值时对应的响应时间？输入数据:负载数据矩阵data_load为[5.2 3.8 6.1, 4.5 5.3 7.0, 6.0 4.9 5.8]，响应时间矩阵data_response为[120 150 130, 115 145 125, 118 140 128]。输出结果存入变量result，格式为向量。","data_load = matrix([5.2, 4.5, 6.0], [3.8, 5.3, 4.9], [6.1, 7.0, 5.8])
data_response = matrix([120, 115, 118], [150, 145, 140], [130, 125, 128])","result = atImax(data_load, data_response)"
366,文文,,bitNot,"在物联网设备管理中，每个设备的状态寄存器值以矩阵形式存储。假设存在一个2x2的整型矩阵变量data，其中元素分别为[[5, 12], [7, 0]]。现需要对所有寄存器执行二进制位反转操作，生成新的状态矩阵。请写出转换代码并将结果存储在result变量中。","data = matrix([[5, 12], [7, 0]])",result = bitNot(data)
367,文文,,cacheDSNow,"某物联网平台需要立即缓存最近3天的传感器数据源以便快速分析，输入数据表SensorData包含字段Timestamp（时间戳）、DeviceID（设备ID）、Temperature（温度）、Humidity（湿度），数据库路径为""/iot/db""，数据源变量名为ds，要求执行立即缓存操作并将结果保存在result。请编写相关处理代码。","PTNDB_DIR = ""/iot/db""
dbName = database(PTNDB_DIR + ""/sensorDB"")
SensorData = dbName.loadTable(`SensorData)
ds = sqlDS(<select Timestamp,DeviceID,Temperature,Humidity from SensorData where Timestamp > now()-3*86400000>)
","result = ds.cacheDSNow()
"
368,文文,,clearAllIOTDBStaticTableCache,某金融交易平台每日收盘后需要清理所有静态表的缓存以释放系统资源。请编写DolphinDB代码执行此操作，执行结果存储在变量result中。输入数据无需准备，输出结果存入变量result。,,result = clearAllIOTDBStaticTableCache()
369,文文,,contextSum,"在处理股票数据时，给定连续5个交易日的收盘价序列x（格式为浮点向量，包含空值:[12.5, NULL, 15.3, 17.0, NULL]）和成交量序列y（格式为整数向量，包含空值:[1000, 2000, NULL, 1500, 3000]），需要找出两个序列同一交易日数据均有效的日期，并计算这些有效日期对应的收盘价总和，将计算结果存入变量result（结果为标量29.5）。","x = [12.5, NULL, 15.3, 17.0, NULL]
y = [1000, 2000, NULL, 1500, 3000]","result = contextSum(x, y)"
370,文文,,copyReplicas,在物联网系统中，需要将源节点'sensor_nodeA'上存储路径包含'2023.10'时间片段的所有数据块副本复制到备用节点'backup_nodeB'，实现关键时段数据冗余备份。已知数据块元信息表可通过系统函数获取，输入数据格式为字符串向量，变量名为chunkList，输出结果存入变量result。,"chunkList = exec chunkId from pnodeRun(getChunksMeta) where node=""sensor_nodeA"" and path like ""%2023.10%""
","result = copyReplicas(""sensor_nodeA"", ""backup_nodeB"", chunkList)
"
371,文文,,cumskewTopN,在物联网监控场景中，设备每分钟采集温度数据并附带采集时间戳。现需按设备分组，对每个记录点计算其历史累计窗口中时间最近的6个温度值分布形态指标（要求时间越新排序越靠前）。输入表含三列:设备编号deviceId(字符串类型)，温度值temperature(整数)，时间戳ts(时间类型)。输出列为各时刻对应的统计指标result(双精度浮点)。,"deviceId = take(['A','B','C'], 10).sort()
temperature = rand(100, 10)
ts = 2024.01.01T09:00:00 + 1..10 * 60
t = table(deviceId, temperature, ts)
","result = select cumskewTopN(temperature, ts, 6, ascending=false) as result from t context by deviceId
"
372,文文,,cumsum2,"某物联网平台每半小时采集一次两台传感器在三个时间点的振动强度数据，存储在名为vibration的向量中，数据为[1.5, 2.3, 0.8]。需要实时计算每个采集点时（包含当前）所有历史振动值的平方累计和，并将计算结果存入变量result。输入数据格式为向量，输出结果格式为相同长度的向量。","vibration = [1.5, 2.3, 0.8]",result = cumsum2(vibration)
373,文文,,cumvar,某物联网系统监测两个设备的温度波动，设备A近四日读数依次为22.5、23.0、22.8、23.5，设备B对应读数为20.1、19.8、20.5、19.9。请将数据存入4行2列的矩阵sensorData，并计算各设备从首日到当日温度变化的稳定性指标（基于样本波动程度），结果存入result。,"sensorData = matrix([22.5, 23.0, 22.8, 23.5], [20.1, 19.8, 20.5, 19.9])",result = cumvar(sensorData)
374,文文,,datetime,"在物联网设备日志中，我们有一个整型数组timestamps记录了设备启动的秒级时间戳（如[1609459200, 1612137600]），如何将这些数值转换为包含年月日时分秒的完整时间格式？输入数据为长度2的整型向量，输出需要存储在DATETIME类型的变量result中。","timestamps = [1609459200, 1612137600]",result = datetime(timestamps)
375,文文,,deleteGroup,"某证券公司的量化交易系统升级后，需清理冗余权限分组。现需撤销名称为""AlphaStrategyGroup""的投研群组权限配置，请编写代码实现删除操作并将执行状态存入变量。输入数据为字符型群组标识，输出为清除操作返回值。",,result = deleteGroup(`AlphaStrategyGroup)
376,文文,,dictUpdate_,在物联网设备管理中，字典deviceMaxTemp初始记录设备X和Y的历史最高温度分别为50和60。现收到新上报数据表格，包含设备X、Y、Z对应的温度值55、65、70。请将字典中每个设备的温度更新为当前最大值，新设备首次处理时初始温度设为0后再比较。输入数据为字典deviceMaxTemp及新参数表，输出更新后的字典result。,"deviceMaxTemp = dict(ANY)
deviceMaxTemp[`X] = 50
deviceMaxTemp[`Y] = 60","dictUpdate!(deviceMaxTemp, max, `X`Y`Z, [55, 65, 70], x->0)
result = deviceMaxTemp"
377,文文,,existsPartition,在物联网设备监控系统中，设备信息按ID范围分为[1-4]、[5-9]、[10+]三个存储区域，数据存储在dfs://iotDB库的deviceData表中。现需要验证ID区间为5-9的数据分区是否已正确创建（路径为dfs://iotDB/5），请输出检查结果到result变量。输入数据包含deviceID、timestamp、sensor三列，其中deviceID字段为5到9的随机整数。,"n = 500
deviceID = rand(5..9, n)
timestamp = 2023.06.01T09:00:00 + 1..n
sensor = rand(100.0, n)
t = table(deviceID, timestamp, sensor)

if existsDatabase(""dfs://iotDB""):
dropDatabase(""dfs://iotDB"")
db = database(""dfs://iotDB"", RANGE, [1,5,10])
pt = db.createPartitionedTable(t, `deviceData, `deviceID)
pt.append!(t)
","result = existsPartition(""dfs://iotDB/5"", `deviceData)
"
378,文文,,existsSubscriptionTopic,在实时监控股票交易价格的应用中，需要检测某个异常波动告警订阅任务是否已经激活。给定一个名为stockTrades的共享流数据表，包含timestamp(时间戳)、symbol(股票代码)、price(价格)字段，以及订阅任务名称为priceAlert。请验证该订阅主题是否存在，结果存入变量result。,"stockTrades = streamTable(10000:0, `timestamp`symbol`price, [TIMESTAMP, SYMBOL, DOUBLE])
share(stockTrades, ""stockTrades"")
subscribeTable(tableName=""stockTrades"", actionName=""priceAlert"", offset=0, handler=append!{null}, msgAsTable=true)
","result = existsSubscriptionTopic(tableName=""stockTrades"", actionName=""priceAlert"")
"
379,文文,,fflush,"在物联网系统中，传感器数据写入文件后需立即持久化以确保后续读取。现有传感器数据表包含时间戳和测量值两列，已写入文件""sensor.log""但未关闭。请强制将缓存数据写入系统并读取全部记录，将数据行数存入result。输入数据表变量名为sensorData，文件变量名为f，输出变量为result。","filename = ""sensor.log""
sensorData = table(2023.01.01T00:00:00 + 0..9 as ts, rand(100.0, 10) as val)
f = file(filename, ""w"")
f.writeRecord(sensorData)
","f.fflush()
t = table(1:0, `ts`val, [TIMESTAMP, DOUBLE])
fRead = file(filename)
fRead.readRecord!(t)
result = t.size()
"
380,文文,,fminBFGS,"在传感器校准中，已知四个真实温度值x_data为[10.0, 20.0, 30.0, 40.0]，对应的读数y_data为[12.0, 22.0, 32.0, 43.0]。需要调整线性模型y=a*x + b的参数a和b，使得预测值与实际值的平方和最小。初始参数猜测为[1.0, 0.0]。请编写代码求解最优参数，结果存入result。","x_data = [10.0, 20.0, 30.0, 40.0]
y_data = [12.0, 22.0, 32.0, 43.0]

def cost_func(params, x, y) {
a = params[0]
b = params[1]
return sum((a * x + b - y) * (a * x + b - y))
}

def gradient_func(params, x, y) {
a = params[0]
b = params[1]
grad_a = 2.0 * sum((a * x + b - y) * x)
grad_b = 2.0 * sum(a * x + b - y)
return [grad_a, grad_b]
}

x0 = [1.0, 0.0]","result = fminBFGS(cost_func{, x_data, y_data}, x0, gradient_func{, x_data, y_data})"
381,文文,,fminNCG,"在物联网设备校准过程中，需要通过优化算法调整两个参数使校准误差最小。当前初始参数为二维向量initialParams=[0.0,0.0]，目标函数为errorFunc(x)=pow(x[0]-3,2)+pow(x[1]+1,2)。请编写代码计算参数最优解，要求输出包含优化结果字典，其中xopt为参数最优值，fopt为最小误差值，并记录各环节调用次数。","def errorFunc(x) {
return pow(x[0]-3,2) + pow(x[1]+1,2)
}

def errorGrad(x) {
return [2*(x[0]-3), 2*(x[1]+1)]
}

def errorHess(x) {
return matrix([[2,0],[0,2]])
}

initialParams = [0.0, 0.0]","result = fminNCG(errorFunc, initialParams, errorGrad, errorHess, 1e-6, 100)"
382,文文,,genericStateIterate,"在物联网设备监控中，需要根据传感器采集的振动幅度和电压数据计算设备健康指数。前3个周期直接使用电压值作为初始健康指数，后续每个时刻的健康指数为前3个健康指数的中位数与当前振动幅度的乘积。已知设备D002在5个时间点的数据:时间戳（timestamp）为[2023.03.01T08:00:00, 08:05:00, 08:10:00, 08:15:00, 08:20:00]，振动幅度（vibration）为[12.8, 13.2, 14.0, 15.5, 12.0]，电压（voltage）为[4.8, 4.7, 4.9, 4.6, 4.8]。请生成计算健康指数的代码，结果存储为result。","def prepareCode():
timestamp = [2023.03.01T08:00:00, 2023.03.01T08:05:00, 2023.03.01T08:10:00, 2023.03.01T08:15:00, 2023.03.01T08:20:00]
deviceID = take(`D002, 5)
vibration = [12.8, 13.2, 14.0, 15.5, 12.0]
voltage = [4.8, 4.7, 4.9, 4.6, 4.8]

t = table(timestamp, deviceID, vibration, voltage)
return t

def medianFunc(history_values, current_vibration):
return median(history_values) * current_vibration
","def runCode(t):
output = table(100:0, `deviceID`timestamp`healthIndex, [SYMBOL, TIMESTAMP, DOUBLE])
engine = createReactiveStateEngine(
name=""iotEngine"",
metrics=[<timestamp>, <genericStateIterate([vibration], voltage, 3, medianFunc{,})>],
dummyTable=t,
outputTable=output,
keyColumn=`deviceID,
keepOrder=true
)
engine.append!(t)
result = select * from output
return result
"
383,文文,,getClusterDFSTables,"在物联网监控场景中，分布式数据库""dfs://sensorLogs""下存放了多个以""node_""开头的设备日志表。请编写代码获取该数据库下所有名称以""node_""开头的分布式表完整路径列表，并将结果存储在变量result中。输入数据为已存在的数据库和表结构，输出数据为匹配的路径字符串集合。","login(`admin, ""123456"")
dbPath = ""dfs://sensorLogs""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
db = database(dbPath, RANGE, 2023.01.01..2023.01.05)
t = table(1:0, `ts`device`value, [TIMESTAMP, SYMBOL, DOUBLE])
db.createPartitionedTable(t, ""node_A"", `ts)
db.createPartitionedTable(t, ""node_B"", `ts)
db.createPartitionedTable(t, ""alert_C"", `ts)","result = getClusterDFSTables().like(""dfs://sensorLogs/node_%"")"
384,文文,,getComputeNodeCacheStat,"某物联网平台在边缘计算节点处理实时设备数据时，需监控缓存资源使用情况以防止系统过载。请编写代码获取当前计算节点的内存缓存和磁盘缓存容量指标（包括已使用量和总容量），返回结果包含四列数值型数据:内存使用量、内存总容量、磁盘使用量、磁盘总容量，并将结果存入变量result。输入无额外数据需求，输出表结构为(memCacheUsage:MB,memCacheSize:MB,diskCacheUsage:MB,diskCacheSize:MB)。",// 该函数直接读取计算节点缓存状态，无需准备数据,result = getComputeNodeCacheStat()
385,文文,,getControllerAlias,在集群管理中，需要汇总所有数据节点的许可证过期时间以便统一管理。输入数据为通过控制节点别名获取的节点信息表（包含name、host、port三列），输出结果为包含node（节点别名）和end_date（DATE类型）两列的表格，变量名为result。,"

","nodes = exec name, host, port from rpc(getControllerAlias(), getClusterPerf{true})
result = table(getNodeAlias() as node, getLicenseExpiration() as end_date)
for(n in nodes){
if(n.name == getNodeAlias()) continue
try{
conn = xdb(n.host, n.port)
tmp = remoteRun(conn, ""table(getNodeAlias() as node, getLicenseExpiration() as end_date)"")
result.append!(tmp)
} catch(ex){}
}"
386,文文,,getEnv,"在金融应用配置中，需要动态读取数据库连接线程数的环境变量设置。若指定变量""DB_THREAD_POOL""未配置，要求返回备用值""16""。请生成获取该配置项的代码，输入变量为字符串类型，输出结果存入变量result。","

","result = getEnv(""DB_THREAD_POOL"", ""16"")"
387,文文,,getGroupList,在金融量化分析平台中，系统管理员需要查看当前所有授权用户组的名称清单。已知系统组信息已持久化存储，要求返回结果为字符串数组格式，并将结果集存入变量result。,// 该函数无需外部数据输入，系统自动获取组信息,result = getGroupList()
388,文文,,getMemLimitOfAllTempResults,在物联网传感器数据实时计算场景中，运维人员需要核查当前分布式查询过程中生成的中间计算结果允许占用的内存上限（以GB为单位）。请编写代码获取该数值，用于监控系统资源使用情况。输入数据无需准备，输出结果为浮点数值，存储至变量result。,"setMemLimitOfAllTempResults(4.5)
","result = getMemLimitOfAllTempResults()
"
389,文文,,getRecoveryWorkerNum,在物联网平台中，当前系统需要监控分布式节点在处理传感器数据块异常时的并发恢复能力。假设管理员已将集群节点的数据恢复工作线程调整为3个，请编写代码验证该配置是否正确生效。输入无需额外数据表，直接获取调整后的线程数并将结果存入变量result。,"
resetRecoveryWorkerNum(3)
","
result = getRecoveryWorkerNum()
"
390,文文,,getTSDBMetaData,在物联网平台中，温度传感器数据存储在TSDB引擎的分区表device_metrics中，按自然月分区。运维人员需要分析2023年Q2的数据存储分布，要求获取:(1)所有chunk的物理路径和层级信息 (2)关联的数据文件名清单 (3)对应表名称。已知数据库路径为dfs://temperature，输入表结构为（ts时间戳，device_id设备号，value数值），请输出符合要求的结果到result变量。,"login(""admin"",""123456"")
dbPath = ""dfs://temperature""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
dates = 2023.04.01..2023.06.30
db = database(dbPath, VALUE, date(dates).month(), engine=""TSDB"")
t = table(concatDateTime(take(2023.04.01,100),09:00:00.000 + 1..100*1000) as ts, 
take(1..10,100) as device_id, 
rand(36.0..38.0,100) as value)
pt = db.createPartitionedTable(t, ""device_metrics"", ""ts"").append!(t)",result = getTSDBMetaData()
391,文文,,getUserHardwareUsage,"系统管理员需要分析2024年6月1日09:30:00至15:00:00期间用户的并发线程使用和内存分配情况，要求获取包含精确纳秒时间戳、账户名称、工作线程数量及变量存储空间消耗的监控报表。输入时间参数为NANOTIMESTAMP类型，输出结果需要存储在变量result且格式为包含timestamp(userId,cpu,memory)字段的表。",/* 无需额外数据准备，时间参数直接传入函数 */,"result = getUserHardwareUsage(2024.06.01T09:30:00.000000000, 2024.06.01T15:00:00.000000000)"
392,文文,,getUserTableAccessRecords,作为物联网平台管理员，需要检查最近2小时所有设备状态表的访问情况，要求获取包含SQL执行时间、操作用户、内存占用量等维度的监控记录。输入时间范围为2024.05.01T08:00:00至2024.05.01T10:00:00（NANOTIMESTAMP格式），输出结果保存到变量result中。,,"result = getUserTableAccessRecords(2024.05.01T08:00:00.000000000, 2024.05.01T10:00:00.000000000).select([""timestamp"",""userId"",""type"",""value"",""script""], type in [""sql"",""memUsage""])"
393,文文,,hex,"在物联网应用中，湿度传感器采集的浮点数据经过压缩后得到二进制流。请将该二进制数据转换为高低位互换的十六进制字符串形式，用于网络传输。输入数据是浮点向量[45.6, 18.9, -5.2]经过compress后的二进制格式变量compressedHumidity，输出结果需存入变量result的字符串向量。","compressedHumidity = compress([45.6, 18.9, -5.2])","result = hex(compressedHumidity, true)"
394,文文,,ifValid,在物联网设备监控场景中，某传感器的实时采样数据存在传输中断情况，记录为NULL值。现需使用预设的备用校准矩阵填补缺失值，要求生成新的有效数据序列。已知传感器原始数据sensorData为包含3个有效值和3个空值的6元素整型向量，备用数据backup为2行3列的整型矩阵（元素全为200）。请输出处理后包含所有有效值的最终结果向量。,"sensorData = int[12, NULL, 18, NULL, 24, NULL]
backup = matrix(int(200, 6), 2, 3)","result = ifValid(sensorData, backup)"
395,文文,,imtUpdateChunkVersionOnDataNode,"某金融系统检测到交易分区""trade_202304""和订单分区""order_202305""的版本不一致，需统一升级到版本5以同步集群。请编写代码完成版本更新并获取当前节点所有数据分块的元信息。输入数据为字符串数组chunkIds和整型version，输出结果存入变量result为表格格式。","chunkIds = [""trade_202304"", ""order_202305""]
version = 5
","imtUpdateChunkVersionOnDataNode(chunkIds, version)
result = getChunksMeta()
"
396,文文,,isAlNum,"在物联网设备管理中，需要筛选出仅包含字母和数字的设备ID。给定一个设备ID列表deviceIDs，格式为STRING类型的向量，包含[""Device2024"", ""Sensor_123"", ""ID456"", ""Node-75""]。请生成布尔值向量result，标识每个设备ID是否符合纯字母数字组合的要求。","deviceIDs = [""Device2024"", ""Sensor_123"", ""ID456"", ""Node-75""]
","result = isAlNum(deviceIDs)
"
397,文文,,isIndexedSeries,"在物联网监测中，存在一个单列电压数据矩阵sensorVoltage，行索引为5个传感器编号（S1至S5），列名为""voltage""，数值为浮点型。请判断该结构是否已被显式启用索引序列功能，并将结果存入变量result。","sensorIDs = `S1`S2`S3`S4`S5
voltages = [3.2, 3.4, 3.1, 3.5, 3.3]
sensorVoltage = matrix(voltages).rename!(sensorIDs, `voltage)",result = isIndexedSeries(sensorVoltage)
398,文文,,kurtosis,某物联网系统采集了三个传感器最近四次的温度监测数据，存储为矩阵sensorReadings（每列代表一个传感器）。假设数据中存在异常波动值，请计算各传感器温度读数的无偏峰度指标，要求结果保留原始计算值（不需减3），并将计算结果存储在变量result中。输入数据格式:矩阵变量sensorReadings包含三列四行数值，输出结果格式为长度3的向量。,"sensorReadings = matrix(35.6 36.1 34.9 120.0, 22.3 21.7 23.5 21.8, 18.9 300.5 19.2 19.7)","result = kurtosis(sensorReadings, false)"
399,文文,,latestKeyedStreamTable,在物联网监控场景中，需要为每个设备的每个安装位置维护最新的传感器读数。给定初始数据表包含设备ID(deviceID)、安装位置ID(locationID)、测量值(value)、日期列(dateCol)、时间列(timeCol)。初始数据为:D001-L1 100@2024.10.10 09:00:00.000，D001-L2 105@2024.10.10 09:00:00.100。后续插入(D001-L1 98@2024.10.10 09:00:00.200，D001-L2 107@2024.10.10 09:00:00.050，D002-L1 88@2024.10.11 09:00:00.300)。要求创建流表结构，在批量插入时对相同设备位置组合仅保留时间最新的记录，最终将结果保存到result变量。,"
deviceID = `D001`D001`D002
locationID = `L1`L2`L1
value = 100 105 88
dateCol = 2024.10.10 2024.10.10 2024.10.11
timeCol = [09:00:00.000, 09:00:00.100, 09:00:00.300]

newData = table(deviceID, locationID, value, dateCol, timeCol)
","
streamTable = latestKeyedStreamTable(`deviceID`locationID, `dateCol`timeCol, 100:0, `deviceID`locationID`value`dateCol`timeCol, [SYMBOL,SYMBOL,INT,DATE,TIME])
streamTable.append!(newData)
result = select * from streamTable
"
400,文文,,le,"在实时金融监控中，需要判断多只个股当前价格是否触及预警线。已知currentPrices字典存放'A'、'B'、'C'三只股票的现价分别为[56.3, 123.0, 78.4]，alertPrices字典存放对应股票的预警价格为[60.0, 120.5, 80.0]。要求生成新的布尔型字典result，每个键对应的值表示该股票是否满足现价<=预警价的条件。","currentPrices = dict(`A`B`C, 56.3 123.0 78.4)
alertPrices = dict(`A`B`C, 60.0 120.5 80.0)",result = currentPrices <= alertPrices
401,若尧,,loess,"某物联网传感器在三个不连续时间点采集了室温数据，时间戳向量为x，温度值向量为y。现需要使用局部加权回归方法，将数据插值填充到每两小时间隔的重采样时间点，并返回重采样后的完整时间序列。其中x包含2023.01.01T08:00、2023.01.01T12:00、2023.01.01T18:00三个时间类型元素，y对应为[25.0, 26.5, 24.8]。要求输出结果包含重采样的时间序列和对应的回归值，最终变量命名为result。","|
x = [2023.01.01T08:00:00, 2023.01.01T12:00:00, 2023.01.01T18:00:00]
y = [25.0, 26.5, 24.8]","|
result = loess(x, y, resampleRule=""2H"", outputX=true, bandwidth=0.5, robustnessIter=3)"
402,若尧,,minIgnoreNull,"在物联网系统中，两个温度传感器每小时记录的数据分别为sensor_A和sensor_B（整型向量）。部分时间点存在数据缺失（NULL），需要找出每个时刻有效温度的最低值（当两个数据都有效时取较小值，单个有效时取该值）。已知sensor_A=[38,,-6], sensor_B=[,42,3]，输出结果向量应保留整型格式。","sensor_A = [38, NULL, -6]; sensor_B = [NULL, 42, 3]","result = minIgnoreNull(sensor_A, sensor_B)"
403,若尧,,mkurtosisTopN,"在实时监控系统里，传感器每秒采集设备温度和振动强度数据。假设存在一张包含时间戳、设备编号、温度值、振动值的表，需要按设备分组后，在每个时间点向前回溯6秒窗口内，筛选振动强度最大的4个样本对应的温度峰度，并排除无效数据。已知输入表结构为(time TIMESTAMP, deviceId SYMBOL, temp DOUBLE, vibration DOUBLE)，输出结果要求存储在result变量，格式为DOUBLE数组。","time = 2023.08.01T09:00:00.000 + 0..7
deviceId = take(['D001','D002'], 8)
temp = [32.1, 34.5, 80.0, 33.9, 36.2, 82.1, 35.8, 33.0]
vibration = [0.7, 0.5, 1.2, 0.9, 1.5, 1.1, float('nan'), 0.8]
sensorData = table(time, deviceId, temp, vibration)
","result = select mkurtosisTopN(temp, vibration, 6, 4) as stats from sensorData context by deviceId
"
404,若尧,,mlastNot,"在物联网设备状态监控中，每个传感器记录可能包含无效的0值或空值。请根据设备分组，在每个时间点向前追溯3条记录的窗口中，找出第一个有效状态（非0且非空字段），保留原始设备ID和原始状态值，将计算结果存入valid_status列。输入表结构:(device_id string, sensor_status int)，输出结构需包含原字段和结果列，最终赋值给变量result。","device_id = take([""IoT-001"",""IoT-002""],6) join take([""IoT-001"",""IoT-002""],6)
sensor_status = [0,5,00i,NULL,3,2,5,NULL,0,9,6,00i]
t = table(device_id, sensor_status)","result = select device_id, sensor_status, mlastNot(sensor_status, 3, 0) as valid_status from t context by device_id"
405,若尧,,mmad,"假设某物联网设备每5分钟采集一次环境温度，存储为变量temps。现需分析温度波动情况，在每5个记录的滑动窗口中计算平均绝对偏差（最少3个有效数据才进行计算），并将结果存入result。输入temps为[23.5,24.0,null,25.2,22.8,26.5,24.7]，输出格式为向量。请写出实现代码。","temps = [23.5,24.0,NULL,25.2,22.8,26.5,24.7]","result = mmad(temps, window=5, minPeriods=3)"
406,若尧,,mwsum,"在设备运行监控中，温度传感器记录了6个时间点的数据（含缺失值），振动传感器同步采集了6个非连续读数。现需计算每个监测点向前3个采样窗口的温度振动乘积累计值，当窗口存在至少1个有效数据点时即进行计算。温度数据格式为[NULL,23.5,24.1,25.0,NULL,26.3]存入temp，振动数据格式为[5,4.8,NULL,6.2,5.7,7.0]存入vibration，结果格式为向量并赋值给result。","temp = [NULL, 23.5, 24.1, 25.0, NULL, 26.3]
vibration = [5, 4.8, NULL, 6.2, 5.7, 7.0]","result = mwsum(temp, vibration, 3, 1)"
407,若尧,,neg,某物联网设备采集了3个监测点连续4小时的电压波动数据，存储在3行4列的矩阵voltageMatrix中，其中包含浮点数数值。为分析异常情况，工程师需要将所有电压值取其反向数值，并将处理后的结果赋值给变量result。输入数据格式示例:voltageMatrix为矩阵类型，输出result同样为矩阵类型。,"voltageMatrix = matrix([3.5 2.8 -1.2 4.1, 0.0 -3.7 2.4 5.6, -0.9 1.8 -2.3 3.0])",result = neg voltageMatrix
408,若尧,,norm,假设我们需要模拟某物联网设备在一天内每小时测量的温度误差数据，温度基准值为25摄氏度，误差服从正态分布，标准差为0.5。请生成一个包含3小时数据记录的矩阵，每个小时有4个测量点。输入参数为期望值25、标准差0.5、矩阵维度3行4列，输出的结果矩阵需存储在变量result中。,,"result = norm(25, 0.5, 3:4)"
409,若尧,,ols,"某传感器记录了某设备连续7天的每日工作时长（小时）和环境湿度（%），以及对应的设备部件磨损量（毫米）。已知工作时长存储在变量working_hours为[6.2,7.1,5.9,8.4,6.8,7.5,6.0]，环境湿度存储在humidity为[45,68,72,58,63,75,69]，磨损量存储在wear为[0.12,0.18,0.15,0.23,0.19,0.25,0.16]。需要进行线性回归分析来评估各因素对磨损的影响，要求包含截距项，输出包含系数估计、标准误、t统计量和p值的统计表格，最终结果存入变量result。","working_hours = [6.2, 7.1, 5.9, 8.4, 6.8, 7.5, 6.0]
humidity = [45, 68, 72, 58, 63, 75, 69]
wear = [0.12, 0.18, 0.15, 0.23, 0.19, 0.25, 0.16]
","result = ols(wear, (working_hours, humidity), true, 1)
"
410,若尧,,pdfChiSquare,"在物联网设备的寿命分析中，需要评估某型号传感器故障时间的分布特征。已知自由度为4的卡方分布模型，需计算在时间点0.8小时、1.6小时、2.4小时处的概率密度。输入数据为向量t_obs = [0.8, 1.6, 2.4]，输出结果存入变量result。","t_obs = [0.8, 1.6, 2.4]","result = pdfChiSquare(4, t_obs)"
411,若尧,,percentile,"在物联网场景中，某温度监测系统记录了两种设备每小时的数据，存储为5行2列的矩阵m。第一列是设备A的5个温度值[35.6,34.9,36.2,35.1,34.5]，第二列是设备B的5个温度值[22.3,24.1,23.7,25.0,21.8]。现需要使用中点插值法分别计算两个设备温度数据的第三四分位数，并将计算结果存入变量result。","m = matrix([35.6, 34.9, 36.2, 35.1, 34.5], [22.3, 24.1, 23.7, 25.0, 21.8])","result = percentile(m, 75, ""midpoint"")"
412,若尧,,ploadText,"某物联网平台采集了一批传感器数据，包含时间戳、设备ID、温度和湿度，存储为分号分隔的文本文件""/iot/data/sensor_2023.csv""，其中第一行为列名。请将此文件快速加载到内存，并计算每个设备的平均温度，结果存入变量result。","
timestamp = 2023.01.01T09:00:00 + 1..86400
deviceID = take(`D001`D002`D003, 86400)
temp = 25.0 + rand(10.0, 86400)
humi = 50.0 + rand(30.0, 86400)
sensorData = table(timestamp, deviceID, temp, humi)
saveText(sensorData, ""/iot/data/sensor_2023.csv"", delimiter="";"")
","
data = ploadText(filename=""/iot/data/sensor_2023.csv"", delimiter="";"", containHeader=true)
result = select avg(temp) as avg_temperature from data group by deviceID
"
413,若尧,,randWeibull,模拟10台设备的故障时间，形状参数为1.5，尺度参数为100，生成符合威布尔分布的浮点数集合。要求输入参数定义为alpha=1.5、beta=100、count=10，输出结果存入变量result的数组。,"alpha = 1.5
beta = 100
count = 10","result = randWeibull(alpha, beta, count)"
414,若尧,,regexFind,"在物联网设备日志中，有一批设备ID存储在向量中，格式为""Dev""开头后接3位数字。需要定位每个ID中首次出现此模式的位置索引。输入数据devices=[""Device123"", ""TempDev456"", ""789Dev""]，输出结果应为整型向量result，未找到返回-1。请实现该需求。","devices = [""Device123"", ""TempDev456"", ""789Dev""]","result = regexFind(devices, ""Dev\\d{3}"")"
415,若尧,,registerSnapshotEngine,"在物联网监控系统中，设备每30秒上传传感器数据到分布式表。现需实现实时查询时，能立即获得每个设备最近一次有效采样。已知数据库为""dfs://sensorDB""，表名""readings""，结构包含(collectTime TIMESTAMP, deviceID SYMBOL, temperature DOUBLE)，采用复合分区策略按天和设备型号(D001-D020)划分。请配置系统确保查询时返回各设备最新采集数据，要求按设备分组并依据采集时间保留最新记录。","dbPath = ""dfs://sensorDB""
db1 = database("""", VALUE, 2023.05.01..2023.05.07)
db2 = database("""", VALUE, symbol(""D""+lpad(string(1..20),3,""0"")))
if existsDatabase(dbPath) { dropDatabase(dbPath) }
db = database(dbPath, COMPO, [db1, db2])

cols = `collectTime`deviceID`temperature
types = [TIMESTAMP, SYMBOL, DOUBLE]
t = table(1:0, cols, types)
db.createPartitionedTable(t, ""readings"", `collectTime`deviceID)

// 插入模拟数据
def insertData(cnt){
devs = ""D""+lpad(string(1..20),3,""0"")
tmp = table(
rand(2023.05.01T00:00:00..2023.05.07T23:59:59, cnt) as collectTime,
take(devs, cnt) as deviceID,
rand(20.0..40.0, cnt) as temperature
)
loadTable(dbPath, ""readings"").append!(tmp)
}
insertData(5000)
","registerSnapshotEngine(dbPath, ""readings"", ""deviceID"", ""collectTime"")
result = select [HINT_SNAPSHOT] * from loadTable(dbPath, ""readings"")
"
416,若尧,,ridge,在物联网设备分析中，使用传感器A的电压值和温度值预测设备寿命周期，考虑不同设备的样本权重（存储在weight列）。给定数据表deviceData包含字段life_cycle（数值型）、voltage（数值型）、temp（数值型）、weight（数值型）。请建立L2正则化回归模型并进行标准化处理，正则化系数设为0.8，使用Cholesky求解器，返回计算结果对象。,"deviceData = table(
[85,72,91,63,78] as life_cycle,
[3.2,3.5,2.9,3.8,3.0] as voltage,
[28,31,35,40,38] as temp,
[1.2,0.8,1.5,0.7,1.0] as weight
)
","result = ridge(deviceData, ""life_cycle"", [""voltage"",""temp""], alpha=0.8, normalize=true, solver='cholesky', swColName=""weight"")
"
417,若尧,,rowTanimoto,"在物联网场景中，设备每天采集三个环境参数（温度、湿度、气压）形成两组观测数据。现有2023.10.01至2023.10.02两天的观测矩阵matrix1和matrix2，其中matrix1数据为[[12.5,15.3,18.0],[22.1,14.8,9.7]]，matrix2数据为[[10.4,17.8,20.2],[23.5,16.0,8.5]]。要求计算两组设备每日观测数据的相似度指标，结果存入result变量。（输入:两个2行3列矩阵，输出:长度2的向量）","matrix1 = matrix([12.5 15.3 18.0, 22.1 14.8 9.7])
matrix2 = matrix([10.4 17.8 20.2, 23.5 16.0 8.5])
","result = rowTanimoto(matrix1, matrix2)
"
418,若尧,,saveModule,"物联网平台需要将数据处理工具模块进行加密存储以提高安全性。现有模块名为dataProcessing，对应的dos文件位于路径""/iot/modules""下。请将该模块序列化为二进制格式，强制覆盖已有同名文件，并将操作结果保存在变量result中。输入数据为模块名称字符串和目录路径，输出结果为操作状态存储在result对象。","login(""admin"", ""123456"")","result = saveModule(""dataProcessing"", ""/iot/modules"", true)"
419,若尧,,setCacheEngineMemSize,某金融量化系统在盘后批量导入分钟级行情数据时，由于缓存不足导致数据堆积。当前缓存引擎已开启但容量为1024MB，需紧急扩容到1792MB并验证扩容后的容量数值。请编写动态调整和验证逻辑，将最终容量值存入result变量。,,"setCacheEngineMemSize(1792)
result = getCacheEngineMemSize()"
420,若尧,,setMemLimitOfTempResult,在金融高频交易实时风控场景中，某次跨市场行情表的关联查询导致内存激增。系统管理员需要紧急调整当前节点单个临时中间表的内存容量上限为4GB以防止溢出，并将配置操作结果存入变量result。输入要求为纯数值型参数，输出需包含最新配置信息。,,result = setMemLimitOfTempResult(4)
421,若尧,,setOLAPCacheEngineSize,某量化交易系统在盘中遇到高频行情数据写入压力，需动态调整OLAP缓存引擎的容量。现有的缓存大小为2GB，现需调整为3.5GB以确保数据流畅写入。输入数据为目标缓存大小（数值型标量，变量名为targetSize），输出结果为调整后的实际缓存容量（数值型标量，变量名result）。请编写代码实现这一需求。,"targetSize = 3.5
","setOLAPCacheEngineSize(targetSize)
result = getOLAPCacheEngineSize()
"
422,若尧,,setRaftElectionTick,"在物联网控制节点集群中，需动态调整节点间心跳检测的选举超时参数。当前需要将基准时间单位设为1000（即10,000ms至20,000ms随机区间），针对组ID为1的元控制组执行配置操作，并将执行结果存入变量result。请写出配置代码。",,"result = setRaftElectionTick(1, 1000)"
423,若尧,,skipClusterReplicationTask,在物联网设备数据同步过程中，发现异步复制任务ID为2和5的任务因网络异常无法完成，导致后续数据无法同步。已知需要跳过的异常任务ID已确定，请编写处理代码恢复同步流程。输入数据为包含这两个任务ID的整数向量，变量名为taskIds；输出结果存入变量result。,"taskIds = [2, 5]",result = skipClusterReplicationTask(taskIds)
424,若尧,,stretch,"某物联网设备每隔两小时采集温度数据，某天仅记录了三个时间点的数据:10、空值、30。现在需要将这些数据均匀扩展到8个时间点以便与其他设备记录对齐。输入数据存储在向量sensorData中，格式为[10,,30]，输出结果需要存储在变量result中，格式为长度8的向量。","sensorData = [10, None, 30]
","result = stretch(sensorData, 8)
"
425,若尧,,sub,"两个基金组合分别持有若干股票代码，需要找出第一个组合中存在而第二个组合中没有的股票。已知组合A持有的代码存储在集合fundA中，组合B的代码存储在集合fundB中。输入fundA为{""AAPL"",""MSFT"",""GOOG""}，fundB为{""MSFT"",""TSLA"",""GOOG""}，输出结果变量名为result，要求返回集合类型。","fundA = set([""AAPL"",""MSFT"",""GOOG""])
fundB = set([""MSFT"",""TSLA"",""GOOG""])","result = sub(fundA, fundB)"
426,若尧,,submitJob,"在物联网场景中，异步处理两个温度传感器（ID分别为""S1""和""S2""）的历史数据，需要计算每个传感器的平均温度值。传感器数据存储在分布式表sensorData中，包含字段id（SYMBOL）、temperature（DOUBLE）。要求创建后台任务分别处理两个设备的数据，最终将两个作业ID存入列表变量result。请写出实现代码。","
// 创建分布式存储的传感器数据表
if(existsDatabase(""dfs://iotDB"")) dropDatabase(""dfs://iotDB"")
create database ""dfs://iotDB"" partitioned by VALUE(1..2), engine='TSDB'
create table ""dfs://iotDB"".""sensorData""(
id SYMBOL,
temperature DOUBLE
)

// 写入测试数据
n = 1000
ids = take(`S1`S2, n)
temps = norm(25.0, 5.0, n)  // 生成正态分布温度数据
insert into loadTable(""dfs://iotDB"",""sensorData"") values(ids, temps)

// 创建结果存储表
avgTempResult = keyedTable(`id, 100:0, `id`avgTemp, [SYMBOL,DOUBLE])
","
// 定义批处理函数
def calculateAvg(sensorID) {
data = select avg(temperature) as avgTemp from loadTable(""dfs://iotDB"",""sensorData"") where id=sensorID
avgTempResult.append!(table(sensorID as id, data.avgTemp as avgTemp))
}

// 提交两个并行作业
job1 = submitJob(""sensorJob1"", ""Calculate S1 average"", calculateAvg, ""S1"")
job2 = submitJob(""sensorJob2"", ""Calculate S2 average"", calculateAvg, ""S2"")

// 获取作业ID列表
result = [job1, job2]
"
427,若尧,,talib,"假设有一个包含某股票每日成交量的正负资金流序列，其中前几个交易日的数据缺失（用NULL表示）。现在需要计算每个交易日过去5天的正资金流总和与总资金流的比值，要求结果在窗口未满时保留NULL直到有足够数据才开始计算。已知输入数组为:pos_flow = [NULL, 800, 1200, 900, 1500, 1800]，neg_flow = [NULL, 200, 300, 450, 600, 550]。输出结果为每个交易日的正资金流占比百分比，保留到小数点后两位。","pos_flow = [NULL, 800, 1200, 900, 1500, 1800]
neg_flow = [NULL, 200, 300, 450, 600, 550]","total_flow = talib(msum, pos_flow + neg_flow, 5)
result = round(talib(msum, pos_flow, 5) * 100.0 / total_flow, 2)"
428,若尧,,tanh,传感器网络收集了温度归一化后的数据（格式:浮点型向量，变量名tempNorm），需要将这些值转换为激活状态指标。请编写计算过程并将结果存入result变量（格式:浮点型向量）。,"tempNorm = [-0.5, 0, 0.8]
","result = tanh(tempNorm)
"
429,若尧,,textChunkDS,处理一个物联网设备日志文件，路径为/data/device_logs.csv，每列以分号分隔。设备ID（字符串）、时间戳（日期时间）、传感器读数（整型数组，元素以竖线分隔，数组用方括号包裹）。请将此文件分割为多个256MB的数据源，并正确指定各列类型。输出数据源对象到result。,"schema = table(`deviceID`timestamp`sensorReadings as name, `STRING`DATETIME`INT[] as type, [,,] as format)","result = textChunkDS(filename=""/data/device_logs.csv"", chunkSize=256, delimiter="";"", schema=schema, arrayDelimiter=""|"", arrayMarker=""[]"")"
430,若尧,,tmpercentile,某物联网平台记录了设备上传的温度数据，其中部分时间点的数据缺失。需计算每个时间点前10分钟窗口内的90%分位值，采用中点插值策略。输入数据表m包含两列:t（TIMESTAMP类型）和temp（DOUBLE类型，允许空值）。输出结果存储在result变量中，要求保留原表结构并新增结果列。,"t = [2023.08.01T08:00:00, 2023.08.01T08:03:00, 2023.08.01T08:07:00, 2023.08.01T08:15:00, 2023.08.01T08:18:00]
temp = [36.5, 38.1, NULL, 37.8, 39.2]
m = table(t as t, temp as temp)
","result = select *, tmpercentile(t, temp, 90, 10m, 'midpoint') from m
"
431,若尧,,topRange,"监控某工业设备的温度传感器连续读数，需要确定每个时间点温度是多久以来的最高值。给定一个包含8次温度监测数据的向量temperatureReadings，格式为[23.5,24.0,23.8,24.2,24.5,24.3,24.7,24.6]，请生成每个时点对应维持温度峰值的持续周期数，结果存入result变量。","temperatureReadings = [23.5, 24.0, 23.8, 24.2, 24.5, 24.3, 24.7, 24.6]",result = topRange(temperatureReadings)
432,若尧,,twindow,在股票交易中，需要计算每只股票每分钟前两分钟内的价格总和，并排除午间休市时间11:30:00到12:30:00。给定包含股票代码sym（'A'、'B'）、时间戳ts（TIMESTAMP类型）和价格price的表数据，要求生成结果列sum_result展示该时间点前两分钟的有效交易时段价格总和。,"sym = ['A','A','A','B','B','B','A','B']
ts = [timestamp('2023.11.01T11:28:30'), timestamp('2023.11.01T11:29:00'), timestamp('2023.11.01T11:30:15'), 
timestamp('2023.11.01T11:28:45'), timestamp('2023.11.01T12:29:30'), timestamp('2023.11.01T12:31:00'),
timestamp('2023.11.01T12:32:00'), timestamp('2023.11.01T12:32:30')]
price = [10.5, 11.0, 10.8, 22.3, 23.5, 22.8, 12.1, 24.0]
t = table(sym, ts, price)
","result = select *, twindow(func=sum, funcArgs=price, T=ts, range=-2m:0m, excludedPeriod=11:30:00:12:30:00) as sum_result from t context by sym
"
433,若尧,,updateRule,"某物联网平台使用规则引擎监控设备状态。现有设备ID 101对应的触发规则为[温度>35]，现在需要将其修改为[温度>=35且时间在08:00-18:00]，同时增加设备ID 103的规则[温度<10]。输入数据格式:设备状态表包含列(deviceID,temperature,time)，输出结果表包含列(deviceID,temperature,time,rules_triggered)。请实现规则更新并验证测试数据。","deviceIDs = [101, 102]
ruleConditions = [
[<temperature > 35>],
[<temperature < -20>]
]
ruleSets = dict(deviceIDs, ruleConditions)

names = `deviceID`temperature`time
types = [INT,DOUBLE,TIME]
dummy = table(10:0, names, types)

outputNames = `deviceID`temperature`time`rules_triggered
outputTypes = [INT,DOUBLE,TIME,BOOL[]]
outputTable = table(100:0, outputNames, outputTypes)

sensorEngine = createRuleEngine(
name=""sensorMonitor"",
ruleSets=ruleSets,
dummyTable=dummy,
outputColumns=[""deviceID"",""temperature"",""time""],
outputTable=outputTable,
policy=""all"",
ruleSetColumn=""deviceID""
)

testData = table(
[101, 103] as deviceID,
[35.0, 9.5] as temperature,
[09:30:00.000, 23:45:00.000] as time
)","// 更新设备101的复合条件规则
updateRule(""sensorMonitor"", 101, [<temperature >= 35 && time between 08:00:00.000..18:00:00.000>])

// 新增设备103的低温规则
updateRule(""sensorMonitor"", 103, [<temperature < 10>])

// 执行规则检测并获取结果
result = sensorEngine.append!(testData)"
434,若尧,,vectorAR,某气象站记录了连续180小时的温度、湿度和风速数据，存储在名为weather的表中有三列（temp、humidity、wind）。现需要建立一个多变量时间序列模型分析这三个气象指标的动态关系，自动选择不超过4阶的最优滞后项，采用Hannan-Quinn准则评估。请生成包含输入表结构和变量名的代码，输出结果存入result。," 
n = 180
weather = table(2023.06.01T00:00:00 + 0..(n-1) as timestamp, 
norm(37, 5, n) as temp,
norm(65, 8, n) as humidity,
norm(12, 3, n) as wind)
"," 
result = vectorAR(weather, `temp`humidity`wind,,,4,'hqic')
"
435,若尧,,wcovar,"在评估两只证券收益率之间的加权关联程度时，给定证券A的收益率序列为[0.5, -1.2, 3.4, 2.8, -0.7]，证券B的收益率序列为[2.3, 1.1, -2.5, 4.0, 0.9]，对应的成交量权重为[100, 200, 150, 300, 250]。要求计算以成交量为权重的协方差指标，并将计算结果存储至result变量。","x = [0.5, -1.2, 3.4, 2.8, -0.7]
y = [2.3, 1.1, -2.5, 4.0, 0.9]
W = [100, 200, 150, 300, 250]","result = wcovar(x, y, W)"
436,若尧,,writeLines,"某量化研究团队需要将一批半导体行业股票代码批量保存到指定文件中，并获取成功写入的记录条数。输入数据semiStocks是一个包含6个字符串的数组，格式为[""NVDA"",""INTC"",""AMD"",""QCOM"",""TXN"",""ASML""]，要求将全部元素一次性写入新文件chip_stocks.txt，请输出实际写入行数到result变量。","semiStocks = [""NVDA"",""INTC"",""AMD"",""QCOM"",""TXN"",""ASML""]","f = file(""chip_stocks.txt"", ""w"")
result = f.writeLines(semiStocks)
f.close()"
437,若尧,,wslr,"某分析师需要基于过去五天的股票日收益率（变量名yData）、对应的市场指数日收益率（变量名xData），以及每日成交量（单位:万手，变量名weights）作为权重因子，计算加权回归模型的参数指标。要求返回斜率参数、截距项及误差指标的精确计算结果，并将结果存储在result中。输入数据格式为:yData=[0.032, -0.015, 0.045, 0.021, -0.008]，xData=[0.028, 0.012, 0.035, 0.018, -0.005]，weights=[5000,6200,4800,5500,5300]，输出结果为包含三个数值的元组。","yData = [0.032, -0.015, 0.045, 0.021, -0.008]
xData = [0.028, 0.012, 0.035, 0.018, -0.005]
weights = [5000,6200,4800,5500,5300]","result = wslr(yData, xData, weights, true)"
438,若尧,,acf,某传感器每天记录的温度波动数据存储在变量x中，它是一个长度为2000的DOUBLE类型向量。需要评估该温度序列在滞后1到10阶的自相关模式，将计算结果存储在result变量中。,"n = 2000
x = array(DOUBLE, n)
x[0] = 25.0  # 初始温度
for(i in 1:n-1){
x[i] = 0.7 * x[i-1] + rand(0.5, 1)[0] - 0.25  # 温度受前一日影响并叠加随机波动
}
","result = acf(x, 10)
"
439,若尧,,addRangePartitions,某物联网平台按区域和设备编号存储传感器数据，数据库采用复合分区设计，第一层按区域值分区，第二层按设备编号范围分区。现有设备编号分区为0到50和50到100，现需要将设备编号扩展至200。请编写代码在现有分区后新增100-150和150-200两个区间，并返回新增分区数量到result。,"n = 50000
regionCodes = [""CN-E"", ""CN-W""]
deviceID = rand(100, n)
timestamp = 2023.06.01T00:00:00 + 1..n
values = rand(100.0, n)
sensorData = table(timestamp, deviceID, regionCodes[rand(2,n)] as region, values)

dbReg = database(, VALUE, regionCodes)
dbDev = database(, RANGE, 0 50 100)
db = database(""dfs://iotPlatform"", COMPO, [dbReg, dbDev])
pt = db.createPartitionedTable(sensorData, `sensors, `region`deviceID)
pt.append!(sensorData)
","result = addRangePartitions(db, 100 150 200, 1)
"
440,若尧,,aj,在股票交易系统中，我们需要为每支股票在指定观测时点匹配最近的盘前报价。给定观测时间表obsTimes包含股票代码sym和观测时间time，报价表preMarket包含股票代码sym、报价时间time和价格price。请根据sym和time建立关联，为每个观测时点查找同一股票在等于或早于该时刻的最新报价。,"obsTimes = table(['A', 'B', 'A', 'B'] as sym, 2023.01.01T09:25:00 2023.01.01T09:26:10 2023.01.01T09:28:00 2023.01.01T09:30:00 as time)
preMarket = table(['A','A','B','B','A'] as sym, 2023.01.01T09:20:00 2023.01.01T09:25:30 2023.01.01T09:25:00 2023.01.01T09:28:05 2023.01.01T09:29:00 as time, 105.3 106.1 54.8 55.2 106.5 as price)
preMarket = preMarket.sortBy!(<sym,time>)","result = aj(obsTimes, preMarket, `sym`time)"
441,若尧,,asof,"在股票交易系统中，系统记录的订单时间戳按递增顺序存储在sysTimes中。给定用户操作的实际时间戳userTimes，请找出每个用户时间对应的最新系统时间点索引（不晚于用户时间），若无则返回-1。已知sysTimes为5个TIMESTAMP类型元素[2023.01.01T09:30:00, 2023.01.01T09:30:01, 2023.01.01T09:30:02, 2023.01.01T09:30:03, 2023.01.01T09:30:04]，userTimes为[2023.01.01T09:30:02.500, 2023.01.01T09:30:05, 2023.01.01T09:29:58]。要求输出结果为整型向量result。","sysTimes = 2023.01.01T09:30:00 + 0..4
userTimes = [2023.01.01T09:30:02.500, 2023.01.01T09:30:05, 2023.01.01T09:29:58]","result = asof(sysTimes, userTimes)"
442,若尧,,bool,在物联网传感器数据采集中，某温度监测点的异常标识存储在一个名为sensorFlags的数组中，包含5（异常）、0（正常）、-3（异常）和空值（未校准）。需要将这些数值转换为布尔类型，规则是非零转为true表示需检查，零转为false，空值保持未定义状态。请生成转换后的布尔序列并存入result。,"sensorFlags = [5, 0, -3, NULL]",result = bool(sensorFlags)
443,若尧,,cleanOutdateLogFiles,某金融交易系统需要释放存储空间，手动执行一次日志清理任务，要求仅保留最近15天的运行日志。已知当前系统日志的表结构由时间戳、事件类型、详情三列组成，变量名为systemLogs。请编写代码完成该操作，并将清理结果存入变量result。,,result = cleanOutdateLogFiles(retentionTime=15)
444,若尧,,clearAllCache,高频量化交易系统在盘后分析时，由于多次查询导致内存中堆积了维度表缓存、OLAP分区热数据、TSDB符号字典以及分布式计算的中间结果。为了释放资源，需要立即清空所有数据库相关缓存。请编写DolphinDB代码完成该操作，并将执行结果存入变量result。已知无需额外输入数据。,,result = clearAllCache()
445,若尧,,clearAllIOTDBLatestKeyCache,在物联网系统中，设备传感器的最新温度数据可能因网络波动导致缓存中存在错误记录。假设系统维护了一张最新值缓存表（结构为:设备ID string、温度 float、时间 timestamp），请编写代码强制清除所有设备的缓存数据以便重新采集正确信息。无输入数据，执行后result变量将接收操作状态。,,result = clearAllIOTDBLatestKeyCache()
446,若尧,,copy,"在股票交易分析中，有一个包含证券代码、最新价和成交量的数据表t，结构为(sym,price,volume)。现需要在不影响原始数据的前提下，对该表的全部内容进行独立操作。已知原始表变量为t，如何创建完全独立的数据副本并将结果存储在result中？","t = table(`AAPL`MSFT as sym, [145.3, 256.8] as price, [1000, 2000] as volume)",result = copy(t)
447,若尧,,createPricingEngine,某金融机构需要实时计算不同债券的净价、应计利息和凸性，同时输出价格与预测收益率的乘积及票面利率与价格的加权值。输入数据包含交易时间戳、债券代码、实时因子、预测收益率和价格，合约基础信息包含类型、到期日、票息率、付息频率和基准类型。请编写代码实现该计算流程，结果存储到变量result。,"dummyTable = table(1:0, `timestamp`bondCode`liveFactor`predYield`price, [TIMESTAMP,SYMBOL,DOUBLE,DOUBLE,DOUBLE])
securityRef = table(take(10 20 30, 100) as assetClass, 2025.12.31+1..100 as maturity, rand(0.05,100).round(4) as couponRate, rand([1,2,4],100) as payFreq, take([0,1],100) as basis, ""B""+string(1..100) as bondCode)
outputSchema = table(1:0, `timestamp`assetClass`bondCode`metrics`combined1`combined2, [TIMESTAMP,INT,SYMBOL,DOUBLE,DOUBLE,DOUBLE])
bondTypes = [10,20,30]
valuationDate = 2024.12.31
parValue = 100
","methodSet = [
<bondDirtyPrice(valuationDate, maturity, couponRate, predYield, payFreq, basis)>,
<bondAccrInt(valuationDate, maturity, couponRate, payFreq, parValue, basis)>,
<bondConvexity(valuationDate, maturity, couponRate, predYield, payFreq, basis)>
]

result = createPricingEngine(
name=""bondRiskEngine"",
dummyTable=dummyTable,
timeColumn=`timestamp,
typeColumn=`assetClass,
securityType=bondTypes,
method=methodSet,
outputTable=outputSchema,
securityReference=securityRef,
keyColumn=`bondCode,
extraMetrics=[<price * predYield>, <couponRate + price>]
)
"
448,若尧,,createTimeSeriesEngine,实时监控多个物联网设备的温度数据，每隔1分钟计算每台设备过去1分钟内的平均温度，输出结果包含时间戳、设备ID和对应的温度均值。输入数据表为sensorData，包含时间列ts（TIMESTAMP类型）、设备ID列deviceID（SYMBOL类型）和温度列temp（DOUBLE类型）。请编写实现该功能的代码并将结果存入变量result。,"share streamTable(1000:0, `ts`deviceID`temp, [TIMESTAMP, SYMBOL, DOUBLE]) as sensorData
share table(10000:0, `time`deviceID`avgTemp, [TIMESTAMP, SYMBOL, DOUBLE]) as outputTable
","result = createTimeSeriesEngine(
name=""deviceMonitor"",
windowSize=60000,
step=60000,
metrics=<[avg(temp)]>,
dummyTable=sensorData,
outputTable=outputTable,
timeColumn=""ts"",
keyColumn=""deviceID"",
useSystemTime=false,
garbageSize=5000
)
subscribeTable(tableName=""sensorData"", actionName=""tsEngine"", handler=append!{result}, msgAsTable=true)

# 模拟数据插入
insert into sensorData values(2023.09.01T08:30:00.000, `D001, 25.4)
insert into sensorData values(2023.09.01T08:30:15.000, `D002, 28.1)
insert into sensorData values(2023.09.01T08:30:45.000, `D001, 26.7)
insert into sensorData values(2023.09.01T08:31:05.000, `D001, 24.9)
"
449,若尧,,createWindowJoinEngine,"实时关联分析用户在触发特定行为（如点击广告）前后5秒内的平均浏览时长。左表行为事件流包含时间戳(time)、用户ID(uid)、行为类型(action)，右表浏览数据流包含时间戳(time)、用户ID(uid)、浏览时长(duration)。输出需包含触发时间、用户ID、行为类型、右表窗口内平均时长，对空值填充0。输入表结构:leftTable[time TIMESTAMP,uid SYMBOL,action SYMBOL]，rightTable[time TIMESTAMP,uid SYMBOL,duration DOUBLE]，输出result[time TIMESTAMP,uid SYMBOL,action SYMBOL,avg_dur DOUBLE]","share streamTable(1:0, `time`uid`action, [TIMESTAMP, SYMBOL, SYMBOL]) as leftTable
share streamTable(1:0, `time`uid`duration, [TIMESTAMP, SYMBOL, DOUBLE]) as rightTable
share table(100:0, `time`uid`action`avg_dur, [TIMESTAMP, SYMBOL, SYMBOL, DOUBLE]) as output
","nullFill = [2023.01.01T00:00:00.000, `NONE, `NONE, 0.0]
engine = createWindowJoinEngine(
name=""user_behavior_analytics"",
leftTable=leftTable,
rightTable=rightTable,
outputTable=output,
window=-5000:0,
metrics=<[action, avg(duration)]>,
matchingColumn=`uid,
timeColumn=`time,
useSystemTime=False,
nullFill=nullFill
)
subscribeTable(tableName=""leftTable"", handler=appendForJoin{engine, true}, msgAsTable=true)
subscribeTable(tableName=""rightTable"", handler=appendForJoin{engine, false}, msgAsTable=true)

# 注入测试数据
v = 2023.01.01T00:00:00.000 + 0..10 * 1000
leftTable.append!(table(v as time, take(`U001`U002, 11) as uid, take(`AD_CLICK`VIDEO_PLAY, 11) as action))
rightTable.append!(table(v-3000 + 0..20*500 as time, take(`U001`U002, 21) as uid, rand(60.0, 21) as duration))

result = output
"
450,若尧,,cumbeta,某股票最近6日的收益率数据为ret_A，市场组合同期的收益率数据为market_ret，需要计算每日收盘后基于当日及历史数据的回归系数序列来评估系统性风险演变。已知输入数据格式为两个一维数组，变量名分别为ret_A和market_ret，要求输出结果为累积回归系数数组并存储在result变量中。,"ret_A = 0.5 1.2 2.0 3.1 4.5 5.8
market_ret = 0.2 0.8 1.5 2.0 3.0 4.2","result = cumbeta(ret_A, market_ret)"
451,金珩,,cumkurtosisTopN,在物联网传感器监测场景中，某温度传感器每小时记录一次读数并附带采集时间戳。现需分析最近5小时内的数据尖峰特征:针对每个记录点，按时间倒序选取最近3条有效记录（排除无效时间戳），计算这些温度值的峰度指标（保留4位小数）。已知输入表sensor_data包含字段:time_stamp(DATETIME)、temperature(DOUBLE)、sensor_id(INT)，输出结果存储在result变量中。,"time_stamp = 2023.06.01T09:00:00..2023.06.01T14:00:00
temperature = 25.3 28.1 24.9 31.5 29.8 26.4 32.7
sensor_id = take(101,7)
sensor_data = table(time_stamp, temperature, sensor_id)
replace!(sensor_data, `time_stamp, datetime(2023.06.01T11:00:00 2023.06.01T13:00:00), NULL)
","result = select cumkurtosisTopN(temperature, time_stamp, 3, ascending=false) as result from sensor_data context by sensor_id
"
452,金珩,,cumvarp,给定两只股票连续三日的收盘价数据，其中股票A的收盘价为5、8、11元，股票B的收盘价为3、7、10元。需要计算每个交易日结束后基于所有历史价格的累计总体方差，以评估价格稳定性。输入数据存储为矩阵m（两列分别对应股票），输出结果存入变量result，结构与输入一致，每个元素表示截止当日的方差。,"m = matrix(5 8 11, 3 7 10)",result = cumvarp(m)
453,金珩,,cumwavg,物联网场景下，某温度传感器在三个连续时间点采集到的数据分别为22.5、23.1、24.3摄氏度，对应的采集可信度指标分别是1、2、3。要求按时间顺序逐步计算包含当前及之前所有观测值的可靠性加权温度均值，最终生成浮点数序列。输入数据存储在名为temp和weights的向量中，输出结果存入变量result。,"temp = [22.5, 23.1, 24.3]
weights = [1, 2, 3]","result = cumwavg(temp, weights)"
454,金珩,,cumwsum,"某传感器记录了一组时间序列的电压值（数组voltage）和电流值（数组current），需要实时计算从开始到当前时刻的累计电能值（焦耳）。已知电能计算公式为电压乘以电流的累加值，voltage数组为[12.0,12.2,11.8,12.5]，current数组为[3,4,5,6]，请输出每个时间点的累计电能计算结果到result。输入数据格式为两个一维向量，输出为一个与输入等长的向量。","voltage = [12.0, 12.2, 11.8, 12.5]
current = [3,4,5,6]","result = cumwsum(voltage, current)"
455,金珩,,dema,"某传感器记录了最近8小时每小时的温度值，存储在变量temperature中，数据格式为[18.2, 18.5, 19.1, 19.6, 18.9, 18.7, 18.4, 18.0]。现在需要计算采用双重平滑方法的5小时窗口移动平均值，要求输出为包含空值占位的向量，并将计算结果存储在result中。","temperature = [18.2, 18.5, 19.1, 19.6, 18.9, 18.7, 18.4, 18.0]","result = dema(temperature, 5)"
456,金珩,,diag,"在物联网设备监控中，从表示两个传感器在两种工况下参数的2x2矩阵nodeStatus（数据为[[5.2,8.1],[3.6,4.9]]）中提取主对角线上的基准参数值，输出结果变量名为result的向量。","nodeStatus = matrix([5.2,8.1,3.6,4.9],2:2)",result = diag(nodeStatus)
457,金珩,,existsStreamTable,在物联网应用中，某设备实时采集的传感器数据被写入名为sensorData的共享流表，该表结构包含两列（sensorID字符串类型，value浮点类型）。需检测该流数据表是否成功创建，并将检测结果存入变量result。,"sensorID = `S001`S002`S003
value = 32.5 41.7 38.2
streamT = streamTable(sensorID, value)
share(streamT, `sensorData)",result = existsStreamTable(`sensorData)
458,金珩,,ffill_,某传感器采集的温度数据表中存在缺失值，需用前一个有效值填补空值，但最多连续填补两次。输入表t包含时间戳（ts）、设备ID（device）、温度（temp）三列，其中temp列有多个连续空值。请生成处理后的表赋值给result，确保temp列的空值被正确填充且不超过两次填充次数。,"ts = 2023.01.01T09:00:00 2023.01.01T09:00:05 2023.01.01T09:00:10 2023.01.01T09:00:15 2023.01.01T09:00:20 2023.01.01T09:00:25
device = take(`D1,6)
temp = [25.3, 25.5, NULL, NULL, NULL, 26.1]
t = table(ts, device, temp)","ffill!(t,2)
result = t"
459,金珩,,file,"在物联网系统中，日志文件device.log已包含初始行""System Startup""。需要追加两条运行事件""Data Received: 1024KB""和""Data Processed Successfully""，最后读取文件内容并返回最新添加的第二条记录内容。输入数据文件名为device.log，输出结果存入变量result，格式为字符串。","f = file(""device.log"", ""w"")
f.writeLine(""System Startup"")
f.close()","f = file(""device.log"", ""a"")
f.writeLine(""Data Received: 1024KB"")
f.writeLine(""Data Processed Successfully"")
f.close()
fin = file(""device.log"")
content = fin.readAll()
lines = content.split(""\n"")
result = lines[2]  // 索引2对应第三条记录（0:初始行,1:第一条追加,2:第二条追加）
fin.close()"
460,金珩,,getAllCatalogs,在金融数据仓库管理中，用户需要快速查看当前系统中已注册的全部数据分类目录，以便规划后续ETL流程。已知系统可能存在多个独立目录，请编写代码直接获取所有目录名称并存入变量，结果应为字符串向量类型，变量名为result。无需准备输入数据。,,result = getAllCatalogs()
461,金珩,,getCacheEngineMemSize,在量化交易系统的性能监控中，如何实时获取当前数据分析引擎使用的列式缓存内存状态？需要返回包含四个指标的向量:已用内存、列文件占用内存、指针内存、总内存上限。输入数据需预先设置缓存上限为系统内存的25%，输出结果存储在result变量中。,setCacheEngineMemSize(0.25),result = getCacheEngineMemSize()
462,金珩,,getClusterChunksStatus,在物联网数据存储管理中，由于部分数据块存储在S3上，其权限被设置为只读。现在需要查看所有权限为只读的存储块信息，包括块ID、文件路径、权限状态和副本数量，并按副本数量从高到低排序。请编写代码实现此需求，结果存储在变量result中。,,"result = rpc(getControllerAlias(), getClusterChunksStatus).select([""chunkId"",""file"",""permission"",""replicaCount""]).filter(permission==""READ_ONLY"").sortBy!(""replicaCount DESC"")"
463,金珩,,getCompletedQueries,"在金融监控场景中，系统管理员需要查看当天最近3个已完成的分布式查询任务中所有存在执行异常的记录，包含错误描述和时间范围。已知集群运行过股票数据查询、错误的分区聚合请求和交易量统计操作，输入表结构为（timestamp, symbol, price），结果需存储在result变量。","
login(""admin"", ""123456"")
if(existsDatabase(""dfs://stockDB"")) dropDatabase(""dfs://stockDB"")
db = database(""dfs://stockDB"", VALUE, 2023.09.01..2023.09.03)
t = table(2023.09.01T09:00:00 + 1..6 as timestamp, `AAPL`MSFT`GOOG`AAPL`MSFT`GOOG as symbol, 189.5 315.2 138.9 191.6 317.8 139.4 as price)
stocks = db.createPartitionedTable(t, ""trades"", ""timestamp"").append!(t)

select avg(price) from stocks group by symbol  // 正确查询
select * from stocks where volume > 1000      // 错误查询（无volume列）
select max(price) from stocks where symbol=`AAPL  // 正确查询
","
result = getCompletedQueries(3).filter!(row->row.errorMsg != """" && row.startTime >= 2023.09.01T00:00:00.000000000)
"
464,金珩,,getJobStat,在实时监控股票高频交易引擎的任务负载时，需要获取当前系统中所有执行队列的状态指标，包括待处理的本地任务数、运行中的批处理作业数、已分发的远程任务积压量等核心指标。请编写DolphinDB代码获得包含queuedLocalTasks/runningJobs/queuedRemoteTasks等字段的字典结构，存入变量result。,,result = getJobStat()
465,金珩,,getSessionMemoryStat,"在物联网平台的实时监控中，需要获取内存占用超过1MB的用户会话详情，包含客户端来源地址和活跃时间。已知当前节点内存信息表结构为[userId STRING,memSize LONG,remoteIP STRING,lastActiveTime TIMESTAMP]，结果变量名为result。",,"result = getSessionMemoryStat().select(userId,memSize,remoteIP,lastActiveTime).filter(memSize > 1048576 && like(userId, ""%[a-z]%""))"
466,金珩,,getStreamTableCacheOffset,"在物联网监控系统中，实时传感器数据写入流表sensorStream，该表按时间字段自动清理10分钟前的数据，每5分钟执行一次清理。现有两批数据:第一批包含2024.01.01T09:00:00起1000条设备温度和编号，第二批包含2024.01.01T09:16:00起1000条记录。请输出当前内存中最旧数据位置与总入库记录数的差值，结果存入变量result。（输入表结构:time[DATETIME],device[SYMBOL],temp[DOUBLE]）","t = streamTable(1000:0, `time`device`temp, [DATETIME, SYMBOL, DOUBLE])
enableTableShareAndCachePurge(table=t, tableName=`sensorStream, cachePurgeTimeColumn=`time, cachePurgeInterval=5m, cacheRetentionTime=10m)

time_batch1 = temporalAdd(2024.01.01T09:00:00, 0..999, ""s"")
device_batch1 = take(`A`B, 1000)
temp_batch1 = rand(36.0..40.0, 1000)
insert into t values(time_batch1, device_batch1, temp_batch1)

time_batch2 = temporalAdd(2024.01.01T09:16:00, 0..999, ""s"")
device_batch2 = take(`C`D, 1000)
temp_batch2 = rand(35.5..39.5, 1000)
insert into t values(time_batch2, device_batch2, temp_batch2)",result = getStreamTableCacheOffset(t)
467,金珩,,groups,"在物联网设备数据采集中，假设存在一个设备编号序列deviceIDs=[101,103,101,102,103,104,102,101]。现在需要建立每个设备对应的所有数据点位置索引映射关系，返回字典结构，字典键为设备编号，值为该设备数据在原始序列中的所有下标集合。请实现该需求。输入数据格式:向量deviceIDs；输出数据格式:字典result。","deviceIDs = [101,103,101,102,103,104,102,101]",result = groups(deviceIDs)
468,金珩,,invChiSquare,"在物联网设备的质量检验中，需要根据卡方分布确定不同累积概率下的阈值。已知自由度为2，当累积概率分别为0.2、0.4、0.6时，求对应的临界值。输入数据为浮点型向量prob，格式是[0.2, 0.4, 0.6]，输出结果存入变量result。","prob = [0.2, 0.4, 0.6]","result = invChiSquare(2, prob)"
469,金珩,,isPeak,"在销售分析中，某公司记录了两种商品连续四天的销量数据。商品A的销量序列为[5,5,5,5]，商品B为[3,4,5,4]。当允许峰值日销量等于相邻两天数据时，判断每日数据是否为销售峰值点，并将结果存储在变量result中。输入数据为矩阵m，列分别对应商品A和B的销量数据。","m = matrix([5,5,5,5], [3,4,5,4])","result = isPeak(m, false)"
470,金珩,,kroghInterpolateFit,"在某个物联网场景中，温度传感器记录了监测点在不同时刻的温度及其变化率。已知在时间0秒时温度为25度且以每秒0.5度下降，在时间2秒时温度为28度且以每秒0.3度上升。请构建插值模型并预测在时间序列[0.5,1.0,1.5]处的温度值，结果存储在result变量中。输入数据格式为:时间点数组time_points=[0,0,2,2]，温度及导数数组temp_derivatives=[25,-0.5,28,0.3]，输出结果为数值型向量。","time_points = [0, 0, 2, 2]
temp_derivatives = [25, -0.5, 28, 0.3]
","model = kroghInterpolateFit(time_points, temp_derivatives)
result = model.predict([0.5, 1.0, 1.5])
"
471,金珩,,lfill,"某实验室记录了五个时间点的湿度数据（id为1到5），但中间三个点的数据缺失需要填充。输入表humidity的humidity列为[45.6, NULL, NULL, NULL, 55.2]，请使用线性插补法填充中间缺失值。输入为表结构，变量名humidity；输出为填充后的表并存入result。","humidity = table(1..5 as id, [45.6, NULL, NULL, NULL, 55.2] as humidity)",result = lfill(humidity)
472,金珩,,mask,"在物联网设备监测中，存在一个3列的温度矩阵tempData，分别记录三个区域的实时温度。要求将温度低于20度或超过35度的异常值隐藏，其余温度正常显示。输入矩阵格式为[[18,25,36],[22,30,34],[19,28,33]]，变量名为tempData，输出结果需保持矩阵结构并赋值给result。","tempData = matrix(18 25 36, 22 30 34, 19 28 33)
","result = mask(tempData, tempData < 20 || tempData > 35)
"
473,金珩,,matchPrefix,"某物联网系统记录了设备的文本日志，现需要快速检索所有备注中包含以""err""开头的单词的设备状态信息。已知日志表存储在PKEY引擎的分区数据库中，表结构为:设备编号devId（主键分区列），时间戳ts（主键排序列），日志内容log（已创建英文分词索引）。请编写查询语句获取符合条件的数据并将结果存入result变量。","logData = [
""Temperature sensor error: code 502"",
""error: communication timeout with node3"",
""warning: voltage fluctuation detected"",
""System error 105 occurred during startup"",
""info: firmware update completed"",
""errant signal detected in circuit A"",
""ERROR: critical failure in module X""
]
devTable = table([1001,1002,1003,2001,2002,3001,3002] as devId, 2023.09.12T09:00:00+1..7 as ts, logData as log)

if(existsDatabase(""dfs://iotDB"")) {
dropDatabase(""dfs://iotDB"")
}
db = database(directory=""dfs://iotDB"", partitionType=VALUE, partitionScheme=[1001,2001,3001], engine=""PKEY"")
pt = createPartitionedTable(dbHandle=db, table=devTable, tableName=""deviceLogs"", 
partitionColumns=""devId"", primaryKey=`devId`ts,
indexes={""log"":""textindex(parser=english, full=false, lowercase=true, stem=true)""})
pt.tableInsert(devTable)
","result = select * from pt where matchPrefix(log, ""err"")
"
474,金珩,,mem,"在实时高频交易系统中，程序缓存了最新的500万条订单簿快照后需要清理内存资源。已知订单数据存储在名为orderBookData的巨型整型数组(维度为[500000,50])，请先销毁这个变量，然后查看节点内存状态并强制释放未被使用的内存块，将操作结果保存在result变量。输入数据格式:orderBookData为500000行50列的int类型二维数组；输出数据格式:包含freeBytes和allocatedBytes字段的内存状态表。","orderBookData = bigarray(INT,500000,50)\nundef(`orderBookData)",result = mem(true)
475,金珩,,mvar,"在物联网环境中，某设备采集了6个时间点的双通道传感器数据，存储为名为device的矩阵，行索引为2023.08.01至2023.08.06，第一列数据为[5,NULL,9,12,7,8]，第二列数据为[18,22,NULL,25,19,NULL]。需要分析传感器在最近3个时间点的波动情况，当窗口内至少有2个有效值时，计算每个时点的波动幅度平方。请写出实现代码并将结果赋值给result。","device = matrix([5,NULL,9,12,7,8], [18,22,NULL,25,19,NULL])
device.rename!(2023.08.01 + 0..5, `sensorA`sensorB)
device.setIndexedMatrix!()","result = mvar(device, 3, 2)"
476,金珩,,mvarTopN,"在物联网系统中，两个传感器每5秒采集一次数值，对应时间戳存在部分缺失。需在每个传感器的长度为3的滑动窗口内，按时间顺序取最早的两个有效读数，计算数值波动的平方差。输入数据矩阵X=[[6,11],[7,12],[8,13],[9,14],[10,15]]，时间戳矩阵S=[[2023.01.01,],[2023.01.02,2023.01.03],[2023.01.04,],[,2023.01.05],[2023.01.06,]]，输出结果存入变量result。","X = matrix([[6,11],[7,12],[8,13],[9,14],[10,15]])
S = matrix([[2023.01.01,00:00:00],[2023.01.02,2023.01.03],[2023.01.04,00:00:00],[00:00:00,2023.01.05],[2023.01.06,00:00:00]])
","result = mvarTopN(X, S, 3, 2, ascending=true, tiesMethod='oldest')
"
477,金珩,,nanotime,"在物联网传感器数据中，事件时间戳以字符串格式存储，例如""15:45:30.456789123""。现有表deviceLogs包含列sensorID（INT类型）和rawTime（STRING类型），要求将rawTime转换为纳秒精度的时间类型，输出结果表需包含原始ID和转换后的时间，变量名为result。","deviceLogs = table(101 102 103 as sensorID, [""09:30:45.123456789"", ""14:22:17.987654321"", ""18:05:33.555555555""] as rawTime)","result = select sensorID, nanotime(rawTime) as nanoTime from deviceLogs"
478,金珩,,normal,"在量化回测中需要计算两个策略收益序列的波动差异。给定组合A和组合B的最近3日收益率分别为向量rateA = [0.02, -0.01, 0.03]和rateB = [-0.005, 0.015, 0.02]，请计算它们每日收益差的模长并将结果存入result。","rateA = [0.02, -0.01, 0.03]
rateB = [-0.005, 0.015, 0.02]
","diff = rateA - rateB
result = normal(diff)
"
479,金珩,,nullFill,处理股票日行情数据时，发现部分收盘价存在缺失。给定一个包含股票ID（id，整型）、交易日（date，日期型）、收盘价（closePrice，浮点型）的表stockData，其中closePrice存在NULL值。请用每只股票对应交易日的行业平均价78.5填充所有缺失值，输出处理后的完整表到变量result。,"
stockData = table(1 1 1 2 2 2 as id, 2023.01.01..2023.01.06 as date, [45.6, NULL, 48.2, NULL, 77.8, 79.3, NULL, 123.4, 125.1, NULL, 128.9, 130.0] as closePrice)
","
result = nullFill(stockData, 78.5)
"
480,金珩,,nullIf,在物联网监测系统中，传感器设备有时会返回-999表示温度数据异常。现有数据表t包含传感器编号sensorID（SYMBOL类型）和温度值temp（DOUBLE类型），其中存在无效值-999。请编写DolphinDB查询，将temp列中的无效标记转换为空值，并筛选出所有有效记录（adjustedTemp不为空），将结果存储在result中。,"t = table(`S1`S2`S3`S2`S1 as sensorID, [23.5, -999, 32.1, -999, 28.4] as temp)
","result = select sensorID, nullIf(temp, -999) as adjustedTemp from t where nullIf(temp, -999) != NULL
"
481,金珩,,pinverse,在投资组合优化模型中，某两个股票因子高度线性相关，导致设计矩阵无法满秩。现有矩阵factorMatrix为3行2列，其中第二列的每个元素是对应第一列元素的2倍。请计算其伪逆矩阵。输入矩阵格式为普通矩阵，变量名为factorMatrix；输出结果需存储在变量result中，格式为双精度浮点矩阵。,"
factorMatrix = matrix([1,2,3], [2,4,6])
","
result = pinverse(factorMatrix)
"
482,金珩,,pivot,"假设有一个物联网传感器数据集，包含设备ID、时间戳和温度读数。需要将数据按小时和设备两个维度对齐，并计算每个小时内各设备的温度峰值。输入数据为表t，结构为(deviceId, timestamp, temperature)，其中deviceId是符号类型，timestamp是DATETIME类型，temperature是DOUBLE类型。请生成一个矩阵，其中行标签为小时，列标签为设备ID，矩阵元素为对应时间段内的最高温度值，结果存储在result变量中。","deviceIds = `D001`D002`D003$SYMBOL
device = deviceIds[0 0 0 0 1 1 1 1 2 2 2 2]
timestamp = [2023.05.01T08:15:00, 2023.05.01T08:45:00, 2023.05.01T09:10:00, 2023.05.01T09:55:00,
2023.05.01T08:25:00, 2023.05.01T08:55:00, 2023.05.01T09:30:00, 2023.05.01T09:58:00,
2023.05.01T08:35:00, 2023.05.01T09:05:00, 2023.05.01T09:35:00, 2023.05.01T10:15:00]
temperature = [32.5, 33.1, 34.8, 35.2, 28.4, 29.7, 30.1, 31.5, 40.0, 41.2, 39.8, 38.6]
t = table(device, timestamp, temperature)
","result = pivot(max, t.temperature, hour(t.timestamp), t.device)
"
483,金珩,,pnodeRun,在一个分布式计算集群中，需要获取名为compute_alpha和compute_beta的两个节点上当前处于运行状态的批处理作业数量。输入数据为节点别名构成的向量，输出结果为包含节点别名和对应数值的表，存储到变量result中。,"def getRunningJobCount() {
return count(exec jobId from getJobStat() where status = ""running"")
}","result = pnodeRun(getRunningJobCount, `compute_alpha`compute_beta)"
484,金珩,,polyFit,某气象站记录了连续7小时的温度变化数据，时间点t为0至6小时，对应的温度值分别为25.0°C、27.1°C、28.8°C、30.1°C、30.5°C、31.2°C、30.9°C。现需要找出三次多项式模型来拟合温度随时间的变化趋势，计算升幂排列的拟合系数向量存入result，输入向量变量名分别为t和temp。,"t = 0..6
temp = [25.0, 27.1, 28.8, 30.1, 30.5, 31.2, 30.9]","result = polyFit(t, temp, 3)"
485,金珩,,quarterBegin,某企业的财年从4月开始，现需将2023年4月至2024年3月的设备能耗数据按隔两个季度的统计周期进行聚合分析。输入表t包含DATE类型的记录日期(dates)、设备编号(device)、能耗值(energy)，输出结果需包含统计周期起始日、平均能耗及总能耗值，结果存入变量result。,"dates = [2023.04.05, 2023.05.15, 2023.07.03, 2023.08.20, 2023.10.10, 2023.11.25, 2024.01.12, 2024.03.20]
device = take(`D002, 8)
energy = [120, 135, 148, 162, 175, 189, 158, 167]
t = table(dates, device, energy)
","result = select avg(energy) as avg_energy, sum(energy) as total_energy from t group by quarterBegin(dates, 4, 2023.04.01, 2) as cycle_start
"
486,金珩,,randLogistic,在物联网传感器校准测试中，需要产生一组符合特定分布的环境噪声数据。已知目标分布的中间位置参数为5.17，离散程度参数为0.93，要求生成8个随机样本。输入变量格式分别为:mean_val=5.17（数值型），s_val=0.93（数值型），count_val=8（整型），输出结果需要将生成的随机数向量赋值给result。,"mean_val = 5.17
s_val = 0.93
count_val = 8","result = randLogistic(mean_val, s_val, count_val)"
487,金珩,,repeat,"在金融数据处理中，有三个股票代码存储在变量symbols中，格式为字符串向量。现在需要为每个股票代码生成连续重复三次的新标识符，结果存储在变量result中。请编写代码实现该转换，输入向量示例值为[""APPL"",""MSFT"",""GOOG""]，要求输出格式为字符串向量。",symbols = `APPL`MSFT`GOOG,"result = repeat(symbols, 3)"
488,金珩,,restoreSettings,"某证券公司在完成数据库集群迁移后，需要从备份文件""/sec/bak/2023/auth.cfg""恢复权限配置，要求当前系统仅保留备份文件中存在的账户权限配置，删除迁移前新增的测试账户。请执行配置文件同步操作，结果存入变量result。",,"result = restoreSettings(""/sec/bak/2023/auth.cfg"", true)"
489,金珩,,rowCummin,"某实验记录了三个传感器每小时采集的温度数据，存储为3行3列的矩阵sensorData，其中每行表示不同时段（08:00,09:00,10:00），每列对应传感器编号（A,B,C）。需要计算每个时段各传感器的累积最低温度，即到当前时段为止各位置的最小值，结果存入result。","sensorData = matrix([9.5 6.8 7.2], [8.4 6.3 5.9], [7.1 5.0 4.8])","result = rowCummin(sensorData)

# 验证结果示例:
# 第1行累积最小值:9.5 → min(9.5,6.8)=6.8 → min(6.8,7.2)=6.8 → [9.5,6.8,6.8]
# 第2行累积最小值:8.4 → min(8.4,6.3)=6.3 → min(6.3,5.9)=5.9 → [8.4,6.3,5.9] 
# 第3行累积最小值:7.1 → min(7.1,5.0)=5.0 → min(5.0,4.8)=4.8 → [7.1,5.0,4.8]"
490,金珩,,rowIminLast,给定一个股票行情表trades，包含五个连续时段的价格（列price1-price5）和成交量（列vol1-vol5）。请找出每行中最后一次出现最低价格的时段对应的成交量值，并将结果存入result变量。输入表结构:timestamp（时间戳），symbol（SYMBOL），price1-price5（DOUBLE），vol1-vol5（INT）。输出结果为与行数相同的整型向量。,"trades = table(1000:0, `timestamp`symbol`price1`price2`price3`price4`price5`vol1`vol2`vol3`vol4`vol5, [TIMESTAMP,SYMBOL,DOUBLE,DOUBLE,DOUBLE,DOUBLE,DOUBLE,INT,INT,INT,INT,INT])
insert into trades values(2023.06.01T09:30:00, `AAPL, 175.3, 174.8, 174.5, 174.5, 175.0, 1000, 1200, 1500, 1800, 900)
insert into trades values(2023.06.01T09:31:00, `AAPL, 174.9, 174.7, 174.6, 174.2, 174.2, 1100, 1300, 1600, 1900, 950)
insert into trades values(2023.06.01T09:32:00, `AAPL, 174.8, 174.8, 174.8, 174.4, 174.6, 1050, 1250, 1550, 1850, 920)
","result = select rowAt(matrix(vol1, vol2, vol3, vol4, vol5), rowIminLast(price1, price2, price3, price4, price5)) as result from trades
"
491,金珩,,rowProd,某物联网系统每小时采集三个环境传感器的监测值，存储于5行3列的矩阵sensorMatrix中，每行代表一个时间点，每列对应温度、湿度、光照强度。要求计算每小时三个监测指标的连续乘积，生成的结果向量存储到result。,"sensorMatrix = matrix([23.5, 58.0, 420], [22.8, 62.5, 380], [24.1, 60.2, 405], [23.9, 59.8, 395], [22.5, 63.1, 410])",result = rowProd(sensorMatrix)
492,金珩,,rowVarp,给定一个包含股票代码和三个不同时段价格波动的表格，需要计算每个股票对应时段价格波动的总体方差。输入表t包含列sym（字符串类型）、val1、val2、val3（均为浮点数），输出结果要求保留sym列并新增varp列，计算结果赋值给result变量。,"t = table(`A`B`C as sym, [10.5, 20.3, 15.7] as val1, [12.8, 18.6, 14.2] as val2, [9.4, 22.1, 16.0] as val3)
","result = select sym, rowVarp(val1, val2, val3) as varp from t
"
493,金珩,,run,"在物联网设备数据分析场景中，假设服务器上已存在一个脚本文件""/dev/calc_metrics.dos""，该文件会计算设备传感器的平均值并存储在变量sensor_avg中。当前会话已加载设备ID列表device_ids（STRING类型数组）。需要执行该脚本后保留当前会话变量，并验证是否成功生成了统计变量。请输出验证结果到result变量。","
// 创建模拟脚本文件内容
scriptContent = ""sensor_avg = avg(85.6, 88.2, 90.1, 82.4, 87.9)""
writeFile(""/dev/calc_metrics.dos"", scriptContent)

// 准备当前会话变量
device_ids = [""DVC_1001"",""DVC_1002"",""DVC_1003""]
","
run(""/dev/calc_metrics.dos"", clean=false)
result = existVariable(""sensor_avg"")
"
494,金珩,,saveDatabase,"在金融数据管理中，用户首次创建了一个本地数据库用于存储股票市场信息，需要将数据库配置信息持久化以便后续使用。已知数据库句柄变量名为db，对应路径为""D:/StockData""，请编写代码实现该需求，并将操作结果保存在变量result中。","login(""admin"", ""123456"")
db = database(""D:/StockData"")","saveDatabase(db)
result = getRecentJobs(1)"
495,金珩,,saveTextFile,"在监控系统中，设备每分钟生成三组运行状态指标，需要将新产生的数据追加到历史记录文件中。已知当前分钟的数据为三行结构化文本（时间戳、设备编号、温度值），变量名为deviceLog，内容如下:
2023-08-01 09:30:00,DX-8001,42.5
2023-08-01 09:30:15,DX-8002,38.9
2023-08-01 09:30:30,DX-8003,41.2

要求将数据以CSV格式追加存储到路径""/data/device_status.csv""，并设置文件最后修改时间为2023年8月1日09:35:00对应的纪元时间戳（1690871700）。最终结果存储在result变量中。","deviceLog = ""2023-08-01 09:30:00,DX-8001,42.5\n2023-08-01 09:30:15,DX-8002,38.9\n2023-08-01 09:30:30,DX-8003,41.2\n""","result = saveTextFile(deviceLog, ""/data/device_status.csv"", true, 1690871700l)"
496,金珩,,semiMonthBegin,某电商平台需要分析2023年1月至3月的每周促销订单数据，按每个半月的起始日期（每月1号和10号）分组统计平均订单金额和总销量。给定订单表orders包含日期(date)、订单金额(amount)、销量(qty)字段，其中date为2023.01.05至2023.03.23期间每周四的日期。请生成包含半月初日期、平均金额、总销量的统计结果，将结果赋值给变量result。,"date = 2023.01.05 + 0..10 * 7
time = take(14:30:00, 11)
product = take(`A101, 11)
amount = [99.9, 149.5, 79.0, 199.0, 89.9, 299.5, 159.0, 179.9, 229.5, 139.0, 259.9]
qty = [120, 85, 210, 45, 180, 32, 95, 120, 65, 150, 40]
orders = table(date, time, product, amount, qty)
","result = select avg(amount) as avg_amount, sum(qty) as total_qty from orders group by semiMonthBegin(date, 10)
"
497,金珩,,setAtomicLevel,在物联网场景中，某分布式数据库按日期范围分区（2023.01.01至2023.01.05），数据库路径为dfs://iot_db，变量名为mydb。现需要实现同一时间段内允许多个传感器并发写入数据，但接受部分写入可能失败的情况，输出数据库配置修改后的并发控制模式名称到result变量。,"dbPath = ""dfs://iot_db""
if existsDatabase(dbPath):
dropDatabase(dbPath)
mydb = database(dbPath, RANGE, [2023.01.01, 2023.01.03, 2023.01.05])
","setAtomicLevel(mydb, 'CHUNK')
result = mydb.schema().atomic
"
498,金珩,,setMaxMemSize,管理员需要临时调整DolphinDB节点的内存上限用于处理突发的传感器数据流，已知当前许可证允许单节点最大内存为128GB。请编写代码将内存配额改为96GB并验证配置结果，要求将最终生效的内存配置值存入变量result。,,"setMaxMemSize(96)
result = getClusterPerf().maxMemSize"
499,金珩,,socp,"在物联网设备能耗优化中，某节点需调度两种任务以最小化总功耗，约束包括:任务1的运行时间非负，两组传感器采集时间满足二阶锥关系。已知目标系数向量F为[-2,-3]，约束矩阵G的3行分别是[1,2]、[3,4]、[5,6]，约束右端向量H为[7,8,9]。非负约束维度l=1，锥约束维度q=[2]。请创建输入数据并计算结果，将结果存入变量result。","f = [-2, -3]
G = matrix([[1,2], [3,4], [5,6]])
h = [7,8,9]
l = 1
q = [2]","result = socp(f, G, h, l, q,,)"
500,金珩,,startsWith,"给定一个产品序列号列表serialNumbers（字符串向量格式，如[""CN-ABX2024"", ""US-QWER356"", ""JP-LLK889""]），筛选出所有以指定国家代码前缀开头的记录，将判断结果的布尔序列存入result。","serialNumbers = [""CN-MNOP789"", ""UK-ABCD123"", ""CN-XYZ456"", ""DE-EFG987"", ""CN-987HIJ""]","result = startsWith(serialNumbers, ""CN"")"
501,波涛,,streamEngineParser,"在实时股票因子计算场景中，需要基于最新成交价和成交量计算每个标的的综合得分。输入表包含股票代码(SecurityID)、时间戳(TradeTime)、收盘价(close)、成交量(vol)，每累积3000个不同股票的最新记录时，需计算各股票过去20条数据的波动率排名，并按百分位调整后输出结果到内存表。请编写实现该逻辑的流处理代码，要求输入表结构为[SecurityID SYMBOL,TradeTime TIMESTAMP,close DOUBLE,vol INT]，输出结果存储在变量result中。","
inputSchema = table(1:0, `SecurityID`TradeTime`close`vol, [SYMBOL,TIMESTAMP,DOUBLE,INT])
data = table(rand(`AAPL`MSFT`GOOG,3000) as SecurityID, 2023.01.01T09:30:00.000+1..3000 as TradeTime, rand(100.0,3000) as close, rand(1000..5000,3000) as vol)
","
result = table(10000:0, `TradeTime`SecurityID`factor, [TIMESTAMP,SYMBOL,DOUBLE])
metrics = <[SecurityID, rowRank(rolling(std, close, 20), percent=true) * log(vol)]>
streamEngine = streamEngineParser(name=""alphaParser"", metrics=metrics, dummyTable=inputSchema, outputTable=result, keyColumn=`SecurityID, timeColumn=`TradeTime, triggeringPattern=""keyCount"", triggeringInterval=3000)
streamEngine.append!(data)
"
502,波涛,,streamTable,某物联网系统需要实时监控三个传感器的温度数据，要求创建一个流数据表，包含传感器ID（SYMBOL类型）、时间戳（TIMESTAMP类型）和温度值（DOUBLE类型）三列。初始分配内存为10000行，当前为空表。请编写代码实现并将结果赋值给result变量。,"colNames = [""sensorID"", ""timestamp"", ""temperature""]
colTypes = [SYMBOL, TIMESTAMP, DOUBLE]","result = streamTable(10000:0, colNames, colTypes)"
503,波涛,,tmbeta,在股票分析中，需要计算某标的每日收益率相对于市场组合的滚动敏感系数，窗口长度按3个交易日划分。给定以下数据表（变量名:t为时间，market为市场日收益率，stock为标的日收益率），请生成对应每个时点的敏感系数结果列（变量名:result），要求空值情况与函数规则一致。,"t = 2023.01.01 2023.01.01 2023.01.03 2023.01.04 2023.01.06 2023.01.09
market = 0.8 1.2 -0.5 1.6 0.9 -1.1
stock = 1.5 2.1 -0.8 3.2 1.4 -2.0
data = table(t as datetime, market as market_return, stock as stock_return)
","result = select *, tmbeta(datetime, stock_return, market_return, 3) as result from data
"
504,波涛,,tmkurtosis,某物联网平台采集设备每小时的温度读数，部分数据因传输中断而缺失。现有数据表包含时间戳t（TIMESTAMP类型）和温度值x（FLOAT类型，包含NULL），需要计算每个监测点时近3小时窗口内的尖峰程度统计量（采用无偏校正），要求结果列命名为result。请生成对应代码。,"T = [2023.05.15T08:00:00.000, 2023.05.15T08:30:00.000, 2023.05.15T09:15:00.000, 2023.05.15T10:10:00.000, 2023.05.15T11:05:00.000, 2023.05.15T12:00:00.000]
X = [36.5, NULL, 38.1, 37.9, NULL, 39.2]
m = table(T as t, X as x)
","select *, tmkurtosis(t, x, 3h, false) as result from m
"
505,波涛,,tmvar,"在工业传感器监测场景中，设备每间隔若干分钟采集一次振动强度数值，部分采集存在信号丢失。已知时间戳列t（分钟）和振动值列x（含NULL值），需要分析每个采样点前向5分钟窗口内的振动离散程度。给定输入表结构为(t LONG, x DOUBLE)，输出结果列名为var_result，如何实现？","t = 2 2 4 7 9 12 16 17 23
x = [32.1, NULL, 28.5, NULL, 35.0, 31.2, 29.8, 26.5, 34.9]
m = table(t as t, x as x)
","result = select *, tmvar(t, x, 5) as var_result from m
"
506,波涛,,unifiedExpr,"在金融分析中，需要将三支股票的分钟级交易量数据进行叠加运算:首先将前两支股票的交易量相加，再减去第三支的交易量，生成净流量指标。给定输入表包含vol1、vol2、vol3三列（数值型，示例数据:[1,2,3]、[4,5,6]、[7,8,9]），要求构造查询语句输出原始三列及名为net_vol的新列，其中net_vol计算结果为(vol1 + vol2 - vol3)。请写出实现该逻辑的DolphinDB代码，结果存入result变量。","t = table(1..3 as vol1, 4..6 as vol2, 7..9 as vol3)
","combined = sqlColAlias(unifiedExpr((sqlCol(""vol1""), sqlCol(""vol2""), sqlCol(""vol3"")), [add, sub]), ""net_vol"")
result = sql(select=(sqlCol('vol1'), sqlCol('vol2'), sqlCol('vol3'), combined), from=t).eval()
"
507,波涛,,weekEnd,"物联网设备每日采集温度数据，需要按每两周一次的维护周期进行分组统计，维护周期的结束日为周三，且起始日期为2023年1月1日。已知数据表结构为(date列: DATE类型, temp列: 整型)，请输出每个维护周期中温度的平均值，并将结果赋值给变量result。结果应包含维护周期结束日及对应的平均温度。","|
dates = 2023.01.01..2023.01.20
temp = 22..41
t = table(dates as date, temp)","|
result = select avg(temp) as avg_temp from t group by weekEnd(date, 2, 2023.01.01, 2)"
508,波涛,,writeLine,"在物联网设备管理中，需要将三个传感器标识符""SENSOR_A"", ""SENSOR_B"", ""SENSOR_C""逐行记录到日志文件device.log中，且要求强制使用Windows系统的行结束符格式。已知输入数据为字符串向量sensors，文件句柄变量名为handle，输出结果需存入变量result。请实现该操作。","sensors = [""SENSOR_A"", ""SENSOR_B"", ""SENSOR_C""]
handle = file(""device.log"", ""w"")","result = eachRight(writeLine, handle, sensors, true)"
509,波涛,,atanh,"在分析股票市场的波动性时，我们需要处理一组经过归一化处理的日收益率数据，要求将归一化后的数值转换为对应的反双曲正切值。已知输入数据是一个名为dailyReturns的浮点型向量，其数值为[0.25, -0.75, 0.95]。请生成对应的转换结果并存入变量result。","dailyReturns = [0.25, -0.75, 0.95]",result = atanh(dailyReturns)
510,波涛,,between,"在物联网设备监控中，有一张记录设备温度的表sensor_data，包含字段deviceID（字符串类型）和temperature（浮点类型）。请筛选出温度在25度到30度之间（含边界）的设备记录，要求结果存入result变量。输入表结构示例:deviceID=[""D001"",""D002"",""D003""], temperature=[24.9,25.0,30.5]","sensor_data = table([""D001"",""D002"",""D003""] as deviceID, [24.9,25.0,30.5] as temperature)
","result = select * from sensor_data where temperature between 25:30
"
511,波涛,,bondConvexity,某投资者购入一种贴现债券，结算日为2023年5月15日，到期日为2025年10月20日，年收益率4.5%。该债券无利息支付，采用30/360(US)计息规则。请计算该证券的凸性指标，输入数据变量名:settlement（DATE）、maturity（DATE）、yield（DOUBLE），输出结果存储在result（DOUBLE）。,"settlement = 2023.05.15
maturity = 2025.10.20
coupon = 0.0
yield = 0.045
basis = 0
bondType = 1","result = bondConvexity(settlement, maturity, coupon, yield, basis=basis, bondType=bondType)"
512,波涛,,break,在物联网场景中，三个设备的温度数据存储在列表变量deviceData中，每个设备的数据为一个子列表。当某个设备在任意时刻的温度超过100时，记录该设备需要检查，并不再处理该设备的后续温度数据。最终生成布尔数组result，各元素依次表示对应设备是否存在温度超标情况。,"deviceData = [[98, 99, 102, 97], [95, 103, 96, 94], [105, 97, 99, 101]]","result = []
for (i in 0:size(deviceData)) {
temps = deviceData[i]
hasOverheat = false
for (t in temps) {
if (t > 100) {
hasOverheat = true
break
}
}
result.append!(hasOverheat)
}"
513,波涛,,businessQuarterEnd,在分析某证券2010年以来的交易记录时，需要以3月作为财年结束月，按每隔3个季度的最后一个工作日汇总平均价格和总交易量。给定交易日数据表包含date(DATE)、symbol(SYMBOL)、price(DOUBLE)、volume(INT)，请生成以2010.03.01为基准的分组统计结果，结果存入result。,"date = 2010.03.01 + 0..8 * 90
symbol = take(`AAPL,9)
price = 189.12 192.51 198.33 201.05 204.67 210.92 208.45 215.30 220.15
volume = 1000 1200 1500 1350 1800 2100 2400 1950 2300
t = table(date, symbol, price, volume)
","result = select avg(price) as avgPrice, sum(volume) as totalVol from t group by businessQuarterEnd(date, 3, 2010.03.01, 3)
"
514,波涛,,coalesce,"某工厂有三台湿度传感器（sensorA、sensorB、sensorC）同时监测设备湿度，现需将三组监测数据合并为一组有效数据。当主传感器sensorA数据缺失时，使用sensorB填充；若sensorB也缺失则使用sensorC。已知输入向量sensorA=[NULL,45,NULL,38], sensorB=[52,NULL,55,NULL], sensorC=[50,48,NULL,42]，输出结果应为[52,45,55,38]，请生成合并后的有效数据向量result。","sensorA = [NULL,45,NULL,38]
sensorB = [52,NULL,55,NULL]
sensorC = [50,48,NULL,42]","result = coalesce(sensorA, sensorB, sensorC)"
515,波涛,,concatMatrix,"某物联网系统采集了设备A和B的传感器数据，其中设备A记录了3个时间点的温度和湿度（2列），存储为矩阵m1；设备B记录了相同3个时间点的电压、电流和功率（3列），存储为矩阵m2。现在需要将两个设备的指标按时间点横向合并为一个综合监测表，要求合并后的矩阵保留完整的时序特征。已知输入矩阵分别为m1=[[35.2,65],[36.1,68],[34.8,67]]，m2=[[220,5.5,1200],[225,5.6,1180],[230,5.4,1220]]，输出结果应保存到变量result。","m1 = matrix([35.2, 36.1, 34.8], [65, 68, 67])
m2 = matrix([220, 225, 230], [5.5, 5.6, 5.4], [1200, 1180, 1220])","result = concatMatrix([m1, m2])"
516,波涛,,corr,"某证券分析师需要评估两只股票最近五个交易日的每日收益率联动性。已知股票A的收益率序列为[1.2, -0.5, 3.1, 2.4, -1.8]命名为stockA，股票B的收益率序列为[0.8, 0.3, 2.9, 2.0, -1.5]命名为stockB。请计算这两组数值之间的统计关联指标，并将结果存储在result变量中。","stockA = [1.2, -0.5, 3.1, 2.4, -1.8]
stockB = [0.8, 0.3, 2.9, 2.0, -1.5]","result = corr(stockA, stockB)"
517,波涛,,createStreamBroadcastEngine,"在物联网场景中，某工厂需要将实时传感器数据同时归档到历史数据库并进行每秒的温度波动率计算。已知源数据流表deviceStream结构为(time TIMESTAMP, sn STRING, temp FLOAT)，请设计处理流程实现同时写入分布式表dfs://plant/d_history和实时计算引擎。最终将处理结果赋值给变量result。","share streamTable(1:0, `time`sn`temp, [TIMESTAMP, STRING, FLOAT]) as deviceStream

if existsDatabase(""dfs://plant""):
dropDatabase(""dfs://plant"")
db = database(""dfs://plant"", VALUE, ""SEN""+string(1..5))
ht = db.createPartitionedTable(table(100:0,`time`sn`temp, [TIMESTAMP, STRING, FLOAT]), `d_history, `sn)

share streamTable(1000:0, `sn`time`delta, [STRING, TIMESTAMP, FLOAT]) as volatilityStream

tsEngine = createTimeSeriesEngine(name=""tsEngine"", windowSize=1, step=1, metrics=<mavg(temp, 2)-temp>, dummyTable=deviceStream, outputTable=volatilityStream, timeColumn=`time, keyColumn=`sn)
","broadcastEngine = createStreamBroadcastEngine(name=""sensorDispatcher"", dummyTable=deviceStream, outputTables=[ht, tsEngine])
subscribeTable(tableName=`deviceStream, actionName=""broadcast"", offset=0, handler=append!{broadcastEngine}, msgAsTable=true)

testData = table(2023.09.20T13:00:00.000 + 0..1000 as time, take(""SEN""+string(1..5),1001) as sn, norm(0,0.5,1001)+25 as temp)
deviceStream.append!(testData)

result = exec count(*) from loadTable(""dfs://plant"", `d_history) union all select count(*) from volatilityStream
"
518,波涛,,cubicSpline,"在物联网场景中，某温度传感器每隔两小时记录一次温度数据，时间点x为[0,2,4,6,8]小时，对应温度值y为[20,22,25,23,24]。现需构建三次样条插值模型，要求曲线两端点处二阶导数为零。请生成该模型并将结果字典存入变量result，需包含分段多项式系数和原始x向量。","x = [0,2,4,6,8]
y = [20,22,25,23,24]","result = cubicSpline(x, y, ""natural"")"
519,波涛,,cumdenseRank,"在股票分析中，需要跟踪每日收盘价的动态排名（降序排序规则，缺失值不参与计算）。给定包含5个交易日的收盘价序列price=[NULL,102,98,105,102]，要求返回每个交易日对应的累计窗口内价格排名值，排名数值类型为整数形式，结果存入变量result。","price = [NULL, 102, 98, 105, 102]","result = cumdenseRank(X=price, ascending=false, ignoreNA=true, percent=false)"
520,波涛,,cummed,"某物联网系统有两个温度传感器（A和B）记录了5个时序温度读数，其中传感器A的数值为[8,6,7,5,9]，传感器B为[3,4,2,5,1]。要求生成一个矩阵tempData（列为传感器A和B），并计算每个传感器从首个读数到当前时刻的实时温度中位值，将结果存入result。","tempData = matrix([8,6,7,5,9], [3,4,2,5,1])",result = cummed(tempData)
521,波涛,,cumpercentile,"某物联网温度监测系统每半小时记录一次当前传感器读数，形成长度为10的时序数据temps。现在需要计算每个时间点之前所有温度值的动态分位数（包含当前值），要求使用30%作为分位点并采用中点插值法，最终生成一个与输入等长的结果向量。输入数据为向量[50,51,...,59]，输出变量名为result。",temps = 50..59,"result = cumpercentile(temps, 30, 'midpoint')"
522,波涛,,dailyAlignedBar,某期货市场交易时间为每日13:45至15:15和21:00至次日02:30，需要将2023.06.01至2023.06.02期间的价格数据按每45分钟计算OHLC指标，要求交易时段结束时刻（15:15和02:30）归入前一时间段。已知数据表t包含NANOTIMESTAMP类型的交易时间列nts、价格列price、成交量列vol，请输出以barStart为分组键的开高低收及总成交量。,"
sessionsStart = [13:45:00.000000000, 21:00:00.000000000]
sessionsEnd = [15:15:00.000000000, 02:30:00.000000000]
nts = 2023.06.01T13:45:00.000000000..2023.06.01T15:15:00.000000000 join 2023.06.01T21:00:00.000000000..2023.06.02T02:30:00.000000000
nts = nts join (nts + 86400000000000)  // 增加次日相同时段
t = table(nts.sort!() as nts, rand(100.0, size(nts)) as price, rand(1000, size(nts)) as vol)
","
result = select first(price) as open, max(price) as high, min(price) as low, last(price) as close, sum(vol) as volume from t group by dailyAlignedBar(nts, sessionsStart, 45*60*1000000000, sessionsEnd, true) as barStart
"
523,波涛,,demean,在物联网场景中，某设备采集了三组传感器数据存储在sensorData表中（包含三个数值列sensor1、sensor2、sensor3，其中sensor1列含有空值）。请对每个数值列进行中心化处理，使得各组数据均以零为中心分布，空值保持原样不做处理，返回处理后的结果表到result。,"sensorData = table(2023.01.01T00:00:00 + 0..7 as time, 
[1.8, 2.1, NULL, 2.3, 2.0, 2.2, 1.9, 2.05] as sensor1,
[102, 98, 105, NULL, 103, 97, 101, 99] as sensor2,
[32.5, 33.1, 31.8, 32.9, 32.0, 33.5, 32.2, 31.5] as sensor3)
","result = demean(sensorData)
"
524,波涛,,differentialevolution,在优化物流中心的运营成本时，需要确定三个控制参数（仓储密度系数、分拣效率权重、运输半径基准）的最佳组合。已知各参数取值范围分别是[0≤仓储≤10]、[2≤分拣≤8]、[5≤运输≤15]。成本函数定义为:成本=仓储² + (分拣-5)^4 + 3*(运输-12)^2。请编写代码求解使成本最小的参数配置，要求返回包含最优解、最小成本和收敛状态的字典。,"def costFunction(params) {
x1 = params[0]
x2 = params[1]
x3 = params[2]
return pow(x1, 2) + pow(x2-5, 4) + 3*pow(x3-12, 2)
}
bounds = matrix([0.0 2.0 5.0, 10.0 8.0 15.0])","result = differentialEvolution(costFunction, bounds, recombination=0.8, mutation=(0.4,0.9), polish=false)"
525,波涛,,dropSchema,"在物联网场景中，某车辆数据分析项目需要移除测试阶段的存储结构。已知存在名为""vehicle""的目录和其中名为""sensor_draft""的架构，请编写代码清除该架构并验证是否成功，将最终检查状态存储在result变量中。输入数据已通过准备代码构建，输出结果为布尔类型。","login(""admin"", ""123456"")
if (!existsCatalog(""vehicle"")) {
createCatalog(""vehicle"")
}
if (!existsSchema(""vehicle"", ""sensor_draft"")) {
createSchema(""vehicle"", ""sensor_draft"")
}","dropSchema(""vehicle"", ""sensor_draft"")
result = existsSchema(""vehicle"", ""sensor_draft"")"
526,波涛,,elasticNetCV,某物联网公司采集了设备功耗数据，包含功耗值、温度和使用时长。请基于温度和使用时长构建一个弹性网络回归模型，通过交叉验证选择最优正则化参数。输入数据表device_data有列power_consumption（FLOAT类型）、temperature（DOUBLE类型）、usage_time（DOUBLE类型），最终输出结果存储在变量result中，要求展示选择的alpha值及对应模型参数。,"power_consumption = [45.6, 32.1, 38.9, 41.2, 28.7, 35.4, 40.8, 30.5, 33.6, 37.2]
temperature = [28.4.normal(0.5, 10).round(1)
usage_time = [5.1, 3.8, 4.5.normal(0.3, 10).round(1)
device_data = table(power_consumption, temperature, usage_time)
","result = elasticNetCV(device_data, `power_consumption, `temperature`usage_time, alpha=[0.1, 0.5, 1.0], intercept=true, normalize=false)
"
527,波涛,,enableTableShareAndPersistence,"在物联网场景中，需要实时处理传感器数据流。传感器数据包含时间戳、设备ID和温度值，每秒产生数千条记录。要求将数据共享为流表并持久化，设定异步写入并压缩存储。内存中仅保留最近2小时的数据，每隔30分钟触发一次清理。如何配置流表以满足这些需求？输入表结构为[ts:timestamp, devId:string, temp:double]，共享流表名为sensorStream，输出变量为result。","
sensorData = streamTable(100:0, `ts`devId`temp, [TIMESTAMP, SYMBOL, DOUBLE])
","
enableTableShareAndPersistence(
table=sensorData,
tableName=`sensorStream,
asynWrite=true,
compress=true,
cachePurgeTimeColumn=`ts,
cachePurgeInterval=30m,
cacheRetentionTime=2h
);
result = getPersistenceMeta(`sensorStream)
"
528,波涛,,ewmCorr,"在物联网设备监控场景中，某温度传感器采集到一组带有缺失值的时序数据，存储为包含设备ID、时间戳和温度读数的表。现需要计算该传感器温度读数与对应时段环境湿度向量的指数衰减相关性，使用平滑系数为0.3，计算时忽略空值。输入表结构为(device_id,sample_time,temp)，变量名为sensors，湿度向量变量名为humidity，输出结果存储为result。","sensors = table(
[""D1"",""D1"",""D1"",""D1"",""D1""] as device_id,
[09:31:00.002, 09:31:15.000, 09:31:30.005, 09:31:45.000, 09:32:00.001] as sample_time,
[25.3, 26.1, float(), 27.8, 24.9] as temp
)
humidity = [45.2, 47.8, 49.1, 50.0, 48.5]
","result = ewmCorr(X=sensors, other=humidity, alpha=0.3, ignoreNA=true)
"
529,波涛,,exp2,"在物联网设备性能分析中，某批传感器采集到一组放大系数数据存储在矩阵sensorFactors中，矩阵结构为2行2列:第一行记录设备A在两个时段的放大指数为[1,3]，第二行记录设备B的指数为[2,4]。需要将这些指数转换为实际增益倍数（即每个数值作为2的幂次进行计算），最终结果需要存储在变量result中，输出格式保持矩阵结构。","sensorFactors = matrix([1,3],[2,4])
","result = exp2(sensorFactors)
"
530,波涛,,expm1,"在金融领域分析中，某指数基金的对数收益率数据存储在名为log_rates的向量中，格式为[0.02, 0.015, -0.008, 0.025]。需要计算出每个值对应的实际增长幅度扣除基准后的结果，结果存储在result变量中，要求输出格式为与输入相同长度的浮点数向量。","log_rates = [0.02, 0.015, -0.008, 0.025]",result = expm1(log_rates)
531,波涛,,gaussianNB,在金融风控场景中，需要根据客户的收入、负债和信用评分数据建立分类模型。给定包含100条样本的训练集creditData表，其中包含数值型字段income（单位千元）、debt（单位千元）、creditScore（范围300-850），目标变量defaultFlag取值为0（未违约）和1（违约）。请编写代码训练分类模型并将结果存入result变量。,"sampleCount = 100
income = rand(30.0..150.0, sampleCount).round(2)
debt = rand(0.0..50.0, sampleCount).round(2)
creditScore = rand(300..850, sampleCount)
defaultFlag = array(INT, sampleCount)
for(i in 0:sampleCount){
defaultFlag[i] = (debt[i]/income[i] > 0.5 || creditScore[i] < 600) ? 1 : 0
}
creditData = table(income, debt, creditScore, defaultFlag)
","features = select income, debt, creditScore from creditData
labels = creditData.defaultFlag
result = gaussianNB(labels, features, 1e-8)
"
532,波涛,,genericTStateIterate,在物联网监控系统中，设备按非均匀时间间隔上报温度及湿度数据。需对每个设备的每条记录计算动态指标:初始化阶段（首5分钟）指标等于温度；后续每个时间点的指标为过去5分钟窗口内所有指标值总和乘以当前湿度。输入表含列time（TIMESTAMP）、deviceID（SYMBOL）、temp（INT）、humidity（INT），输出结果存入变量result。,"time = [2023.01.01T09:00:00, 2023.01.01T09:03:00, 2023.01.01T09:06:00, 2023.01.01T09:10:00, 2023.01.01T09:12:00]
deviceID = take(`Device001, 5)
temp = [25, 26, 24, 27, 23]
humidity = [50, 55, 60, 58, 62]
t = table(time, deviceID, temp, humidity)
","def sumMultiply(prevValues, currentHumidity){
return sum(prevValues) * currentHumidity
}

output = table(100:0, `deviceID`time`factor, [SYMBOL, TIMESTAMP, INT])
engine = createReactiveStateEngine(name=""iot"", metrics=[<time>, <genericTStateIterate(time, humidity, temp, 5m, sumMultiply{,})>], dummyTable=t, outputTable=output, keyColumn=`deviceID, keepOrder=true)
engine.append!(t)
result = output
"
533,波涛,,genShortGenomeSeq,"在基因序列分析中，给定一个包含12个字符的DNA序列向量dna_array，元素为['A','G','T','C','N','N','G','A','T','C','G','N']，其中'N'表示缺失值。需对每个位置向后选取连续5个字符进行数值编码（不足则留空），生成整型结果序列。请编写实现代码并将结果存入变量result。","dna_array = ['A','G','T','C','N','N','G','A','T','C','G','N']","result = genShortGenomeSeq(dna_array, 5)"
534,波涛,,getConfig,"在监控系统资源时，需要获取当前节点的日志文件存储路径和最大内存分配限制。已知系统配置项对应参数名为""logFile""和""maxMemAllocation""，请编写代码提取这两个配置项的当前值并将结果合并为元组。输入数据来自系统配置，输出变量名为result，格式为元组。",,"logPath = getConfig(""logFile"")
maxMem = getConfig(""maxMemAllocation"")
result = (logPath, maxMem)
"
535,波涛,,getFunctionViews,用户最近在系统内创建了若干自定义函数视图用于股票信号分析，现需要查询当前账户权限范围内可见的所有函数视图清单，要求返回包含视图名称和对应函数定义的表结构。输入数据无需额外准备，输出结果需存储在变量result中，包含name和body两列。,,result = getFunctionViews()
536,波涛,,getOLAPCachedSymbolBaseMemSize,某金融公司需要监控其交易数据库中股票代码（符号类型）的字典编码内存占用情况以优化资源分配。请编写代码获取OLAP引擎中该类型当前缓存的总字节数，已知数据存储在分区表equity_data中，其中包含SYMBOL类型列symbol。要求将计算结果存入变量result。,"
login(""admin"", ""123456"")
if(existsDatabase(""dfs://finance"")){
dropDatabase(""dfs://finance"")
}
db = database(""dfs://finance"", VALUE, `IBM`TSLA`AAPL)
t = table(rand(`IBM`TSLA`AAPL, 100) as symbol, rand(100.0, 100) as price)
pt = db.createPartitionedTable(t, `equity_data, `symbol).append!(t)
","
result = getOLAPCachedSymbolBaseMemSize()
"
537,波涛,,getRaftElectionTick,在监控数据库集群配置时，需要提取控制节点所在Raft组当前的选举超时检测周期数值。已知组标识为整数1，输入数据格式为直接传入组号，输出结果为整型数值。请编写代码将结果存入变量result。,,result = getRaftElectionTick(1)
538,波涛,,getRecentSlaveReplicationInfo,在监控跨数据中心异步复制任务时，需要获取各从集群最近一次同步的详细状态信息，包含连接控制器地址、高可用集群节点列表、最新完成的任务编号及数据拉取时间。请编写DolphinDB脚本实现该需求，将结果存入变量result。输入无需参数，输出为包含四个字段的表结构。,,result = getRecentSlaveReplicationInfo()
539,波涛,,getStreamEngineList,"在物联网设备监控场景中，当前节点已部署由admin用户创建的时间序列引擎""equipAggr""用于聚合传感器数据，以及由user3用户创建的响应式状态引擎""alertMonitor""用于实时异常检测。请编写DolphinDB代码获取这些引擎的详细信息（包含类型、名称、创建者），将结果存入变量result。","
// 创建时间序列引擎
streamTS = streamTable(1000:0, `ts`equip`val, [TIMESTAMP, SYMBOL, DOUBLE])
enableTableShareAndPersistence(streamTS, `metricsStream)
outputTS = keyedTable(`ts`equip, 1000:0, `ts`equip`maVal, [TIMESTAMP, SYMBOL, DOUBLE])
createTimeSeriesEngine(name=""equipAggr"", windowSize=60000, step=60000, metrics=<[mavg(val, 3)]>, dummyTable=streamTS, outputTable=outputTS, timeColumn=`ts, keyColumn=`equip)

// 创建响应式状态引擎（假设user3已登录）
streamRS = streamTable(1000:0, `time`device`temp, [TIMESTAMP, SYMBOL, DOUBLE])
outputRS = keyedTable(`time`device, 1000:0, `time`device`alert, [TIMESTAMP, SYMBOL, BOOL])
def processAlerts(mutable t, msg){
msg[`alert] = msg.temp > 85
t.append!(msg)
}
createReactiveStateEngine(name=""alertMonitor"", metrics=<[temp, processAlerts]>, dummyTable=streamRS, outputTable=outputRS, keyColumn=`device)
","
result = getStreamEngineList()
"
540,波涛,,getTopicProcessedOffset,"在一个物联网设备监控场景中，系统订阅了一个实时设备状态表，订阅时启用了偏移量持久化。当写入10条设备温度数据后，需要查询当前订阅处理的最新位置编号。已知输入表结构为(ts TIMESTAMP, devId SYMBOL, temp DOUBLE)，共享表名为devices，订阅处理后的数据存储在devices_sub表中。请输出最新处理记录的序列标识。","share streamTable(1000:0, `ts`devId`temp, [TIMESTAMP, SYMBOL, DOUBLE]) as devices
devices_sub = streamTable(1000:0, `ts`devId`temp, [TIMESTAMP, SYMBOL, DOUBLE])
topic = subscribeTable(tableName=""devices"", actionName=""dev_sub"", offset=0, handler=append!{devices_sub}, msgAsTable=true, persistOffset=true)

def writeDeviceData(n){
tsv = 2023.06.15T09:30:00.000 + 1..n
devv = take(`D001`D002, n)
tempv = rand(20.0..40.0, n)
insert into devices values(tsv, devv, tempv)
}
writeDeviceData(10)
","result = getTopicProcessedOffset(topic)
"
541,波涛,,getUnresolvedTxn,在物联网平台的数据分片存储过程中，某次节点通信故障后需要检查当前系统中所有处于处理状态的事务信息。请编写代码获取包含事务ID（tid）、提交版本号（cid）、分块标识（chunkId）、发起节点（initiatingNode）、首次决议时间（firstResolutionAt）和最后决议时间（lastResolutionAt）的结果，并将结果存储在变量result中。输入数据为系统实时事务状态，输出格式为内存表。,,result = getUnresolvedTxn()
542,波涛,,go,"在物联网设备数据处理中，用户希望加载一个自定义插件用于解析二进制流，并在后续步骤调用插件中的解码函数。若直接加载后立即调用会出现未定义错误，应如何解决？输入数据:插件路径""/iot/plugins/decoder.dll""，调用插件注册的decode函数处理数据`0xABCD`。输出结果需存入变量result。","loadPlugin(""/iot/plugins/decoder.dll"")","loadPlugin(""/iot/plugins/decoder.dll"")
go
result = decode(0xABCD)"
543,波涛,,groupby,现有温度传感器数据包含设备编号、实时温度及时间戳，需要统计每小时各设备的最高温度。数据格式为 sensor_id（SYMBOL向量）、temp（浮点向量）、timestamp（时间向量），结果变量为result，要求为包含sensor_id、groupingKey（小时）、max_temp的分组表。,"sensor_id = `S1`S2`S1`S2`S1`S3$SYMBOL
temp = 36.5 37.1 36.8 37.5 37.2 35.9
timestamp = [2023.01.01T08:30:00, 2023.01.01T09:15:00, 2023.01.01T09:45:00, 2023.01.01T09:50:00, 2023.01.01T10:00:00, 2023.01.01T10:10:00]","result = groupby(max, temp, [sensor_id, hour(timestamp)])

# 等效写法:
# result = max:G(temp, [sensor_id, hour(timestamp)])"
544,波涛,,inverse,在金融风险模型中，需要解一个线性方程系统来优化资产配置。给定系数矩阵存储为变量matrix，其结构为两行两列的二维数组，第一行元素为2和5，第二行元素为1和3。请计算该矩阵对应的逆矩阵，并将计算结果存入变量result。,"matrix = [[2,5],[1,3]]
","result = inverse(matrix)
"
545,波涛,,irs,某机构需要为2024年5月15日交易的利率互换估值。该合约本金50万元，固定利率3.15%，浮动利率在基准利率上加10个基点。首次支付日为2024年1月1日，2027年1月1日到期，利率每3天重置一次，每季度支付一次。使用香港交易所日历，日计数采用实际/360基准，利率曲线包含[当日，1个月，3个月，半年，1年]节点的利率分别为1.8%、1.95%、2.1%、2.3%、2.5%。输入数据:settlement=2024.05.15，resetInterval=3d，start=2024.01.01，maturity=2027.01.01，notional=500000，fixedRate=0.0315，spread=0.001，curve=拟合曲线，frequency=3M，calendar=`HKEx，basis=2。输出结果保存到result。,"settlement = 2024.05.15
calendar = `HKEx
day0 = temporalAdd(settlement, 0, calendar)
curveRateTime = [1d, 1M, 3M, 6M, 1y]
curveRateValue = [0.018, 0.0195, 0.021, 0.023, 0.025]
dates = []
for dur in curveRateTime {
dates.append!(temporalAdd(settlement, dur))
}
X = (dates - day0)$INT
curve = linearInterpolateFit(X, curveRateValue)
","resetInterval = 3d
startDay = 2024.01.01
endDay = 2027.01.01
par = 500000
fixRate = 0.0315
spread = 0.001
freq = 3M
result = irs(settlement, resetInterval, startDay, endDay, par, fixRate, spread, curve, freq, calendar, basis=2)
"
546,波涛,,isMonotonic,在证券分析场景中，给定一个包含交易时间ts和收盘价price的股票行情表priceTable，其中ts为递增的TIMESTAMP类型，price为DOUBLE类型。请验证该股票在观测期内是否存在价格持续攀升现象，即每个新交易日的收盘价都严格大于前一交易日。输出结果需存储在布尔型变量result中。,"ts = [2023.01.01T09:30:00, 2023.01.02T09:30:00, 2023.01.03T09:30:00, 2023.01.04T09:30:00]
price = [25.8, 26.5, 27.1, 27.9]
priceTable = table(ts, price)
","result = priceTable.price.isMonotonic()
"
547,波涛,,isOrderedDict,在物联网设备管理中，使用字典存储传感器编号和最新采集数值。已知传感器编号'S001'对应数值98.6，'S002'对应102.4，这两个键值对以有序方式存储为deviceReadings字典。请编写代码验证该字典是否保留了键的插入顺序，输出结果为布尔值并存入result变量。输入数据格式:字典类型变量deviceReadings，输出格式:布尔值result。,"sensorID = `S001`S002
values = 98.6 102.4
deviceReadings = dict(sensorID, values, true)",result = isOrderedDict(deviceReadings)
548,波涛,,keyedStreamTable,"在物联网设备监控场景中，需要创建一个流表来存储设备状态数据。要求表结构包含设备编号（deviceID字符串类型）、采集时间戳（ts时间类型）、温度值（temp整型），其中设备编号和时间戳组合必须唯一。当插入重复设备编号和时间戳组合时，保留首次插入的数据。请创建符合要求的空表结构并插入以下测试数据:首次插入[DEV001, DEV002]设备在2023.09.01T09:00:00的35度和42度，第二次插入[DEV001, DEV003]设备在同一时刻的38度和40度。最终结果变量名为result。","deviceID = [""DEV001"", ""DEV002"", ""DEV001"", ""DEV003""]
ts = [2023.09.01T09:00:00, 2023.09.01T09:00:00, 2023.09.01T09:00:00, 2023.09.01T09:00:00]
temp = [35, 42, 38, 40]
","kt = keyedStreamTable([""deviceID"",""ts""], 0, [""deviceID"",""ts"",""temp""], [SYMBOL,TIMESTAMP,INT])
insert into kt (deviceID, ts, temp) values(deviceID, ts, temp)
result = kt
"
549,波涛,,lastNot,"在物联网系统中，某传感器的状态序列中存在错误值-1和缺失值（用NULL表示）。请找出该传感器最后一个有效状态值，即不为-1且不为空的数值。输入向量变量名为sensorData，格式为[NULL, -1, 5, 3, -1, NULL, 4]，输出结果赋值给变量result。","sensorData = [NULL, -1, 5, 3, -1, NULL, 4]","result = lastNot(sensorData, -1)"
550,波涛,,linearTimeTrend,某物联网平台需要实时分析各传感器采集的温度序列，在5小时窗口内拟合线性趋势，输出截距项和斜率项。假设当前有设备ID为'S001'和'S002'的传感器，每小时记录一次温度值（浮点型）。请准备包含时间戳(time)、设备ID(sid)、温度(temp)的表t，并计算结果分别赋值到result变量，输出格式为与输入表结构一致且包含alpha、beta两列。,"n = 10
t = table(2023.01.01T09:00:00 + 1..n * 3600 as time, take(['S001','S002'],n) as sid, rand(25.0..30.0,n) as temp)
","result = select time, sid, linearTimeTrend(temp,5) as `alpha`beta from t group by sid
"
551,亦柔,,loadTextEx,某物联网平台需要将传感器采集的CSV文件导入分布式数据库。数据包含设备ID（字符串）、采集时间（格式为'YYYY-MM-DD HH:mm:ss'）、温度值（可能存在空值）和状态码列。要求将时间转为NANOTIMESTAMP类型，空温度填充为0，并按设备ID分区存储。输入文件路径为'/data/sensor.csv'，输出变量名为result。,"
dbPath = ""dfs://sensor_db""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
db = database(dbPath, VALUE, [""D001"",""D002"",""D005"",""D010""], engine=""TSDB"")

filePath = ""/data/sensor.csv""
schema = extractTextSchema(filePath)
update schema set type = ""NANOTIMESTAMP"" where name=""采集时间""
update schema set type = ""DOUBLE"" where name=""温度值""
","
def preprocess(t) {
t.replaceColumn!(`温度值, fillNull(t.温度值, 0))
return t
}

result = loadTextEx(
dbHandle=db,
tableName=`sensor_data,
partitionColumns=`设备ID,
filename=filePath,
schema=schema,
transform=preprocess,
sortColumns=`采集时间`设备ID
)
"
552,亦柔,,loop,在物联网环境中，三个设备采集到的电压读数分别存储在数组向量voltageReadings中，每个元素为浮点数组。要求对每个设备的电压数据计算其波动幅度（最大值减最小值），并将结果以元组形式保存到变量result。请写出实现代码。,"voltageReadings = array(DOUBLE[], 0, 10).append!([[12.3,12.8,12.5], [15.1,14.9,15.2,15.0], [13.4,13.7,13.2,13.5,13.6]])",result = (max - min):U(voltageReadings)
553,亦柔,,lowDouble,"在物联网设备的位置数据采集中，每个坐标点以经度（高精度浮点）和纬度（高精度浮点）的组合形式存储为复合类型变量points。现需要解析原始坐标数据的经度部分存入result变量，输出要求为DOUBLE类型的向量。已知points的结构为[复合值1, 复合值2]，其中复合值1包含经度100.5和纬度30.2，复合值2包含经度101.6和纬度31.3。","points = point([100.5, 101.6], [30.2, 31.3])
","result = lowDouble(points)
"
554,亦柔,,ma,"假设有一个长度为10的收盘价序列close，格式为数值型向量。请计算基于5日指数平滑平均线与20日加权平均线的差值，将结果存储在变量result中。输入向量close=[22.3,21.7,24.8,23.5,25.9,26.4,27.1,28.5,29.3,28.7]，输出结果格式应与向量计算一致。","close = [22.3, 21.7, 24.8, 23.5, 25.9, 26.4, 27.1, 28.5, 29.3, 28.7]","result = ma(close, 5, 1) - ma(close, 20, 2)"
555,亦柔,,matchPhraseInfix,"找出交易记录中备注列包含特定动词，该动词前有以""er""结尾的单词，后有以""ba""开头的单词的所有记录。输入表包含3列:整数类型tradeID，时间戳timestamp，字符串类型note。要求输出匹配行并赋值给result。","tableData = {
""tradeID"": [1001, 1002, 1003, 1004],
""timestamp"": [2023.09.01T09:30:00, 2023.09.01T10:15:00, 2023.09.01T11:00:00, 2023.09.01T12:30:00],
""note"": [
""UserA transfers funds to BankXYZ for processing."",
""CustomerB withdraws cash from ATM."",
""BrokerC executes buy order for BAC shares."",
""TraderD transfers bonds to Barclays account.""
]
}
t = table(tableData)
if(existsDatabase(""dfs://tradeDB"")) dropDatabase(""dfs://tradeDB"")
db = database(directory=""dfs://tradeDB"", partitionType=VALUE, partitionScheme=[1000,2000], engine=""PKEY"")
pt = createPartitionedTable(dbHandle=db, table=t, tableName=""pt"", 
partitionColumns=""tradeID"", primaryKey=`tradeID,
indexes={""note"":""textindex(parser=english, full=false, lowercase=true, stem=true)""})
pt.tableInsert(t)
","result = select * from pt where matchPhraseInfix(note, ""er"", ""transfers"", ""ba"")
"
556,亦柔,,maxPositiveStreak,"某物联网温度传感器每两小时记录一次环境温度变化值（单位:℃），数据存储在向量tempChange中。需要找出该传感器连续观测到温度上升期间（变化值为正时）各次变化的累计总和最大值。已知输入数据格式为[3,-1,2,4,-2,1,2]，变量名tempChange，计算结果存入result变量，输出为标量。","tempChange = [3, -1, 2, 4, -2, 1, 2]",result = maxPositiveStreak(tempChange)
557,亦柔,,mbetaTopN,在物联网设备监控场景中，需要根据传感器信号强度筛选有效数据。给定一个包含设备ID、时间戳、电压波动值和环境温度值的表格，其中电压波动值作为自变量，环境温度作为因变量。请计算每个设备在最近4个观测窗口中，按信号强度倒序取前2个有效数据，求解温度对电压波动的回归系数，结果保存为result变量。输入数据格式:device_id为整型，ts为时间戳类型，voltage为浮点型，temp为整型，signal为整型。,"device_id = [1001,1002,1001,1003,1002,1001]
ts = [2023.01.01T09:00:00,2023.01.01T09:05:00,2023.01.01T09:10:00,2023.01.01T09:15:00,2023.01.01T09:20:00,2023.01.01T09:25:00]
voltage = [12.5,13.1,11.8,12.9,13.4,12.2]
temp = [25,28,23,26,29,24]
signal = [85,92,78,95,88,82]
t = table(device_id, ts, voltage, temp, signal)
","result = mbetaTopN(t.voltage, t.temp, t.signal, 4, 2, false)
"
558,亦柔,,mcorrTopN,某物联网设备每小时采集一组温度、湿度和电压读数。请计算每个时间点前4小时内，按电压从高到低筛选出最高的2个数据点，并计算这些点中温度与湿度的滚动相关系数。输入数据格式为时间戳time，温度temp，湿度humidity，电压volt，存放在表t中。结果存储在变量result中。,"time = 2023.01.01T09:00:00 2023.01.01T10:00:00 2023.01.01T11:00:00 2023.01.01T12:00:00 2023.01.01T13:00:00
temp = [25.3, 26.1, 24.8, 27.5, 23.9]
humidity = [60, 58, 62, 55, 65]
volt = [12.4, 11.8, 12.6, 10.9, 13.0]
t = table(time as time, temp as temp, humidity as humidity, volt as volt)
","result = mcorrTopN(temp, humidity, volt, 4, 2, false)
"
559,亦柔,,microsecond,某个物联网系统记录了三个设备事件发生的精确时间戳，时间精度包含纳秒（变量名为timestamps，类型为NANOTIMESTAMP数组）。如何提取每个时间戳中微秒部分的整数值并将结果存入变量result？,"timestamps = [2023.10.08T12:34:56.123456789, 2023.10.08T12:34:56.789012345, 2023.10.08T12:34:56.000000999]
","result = microsecond(timestamps)
"
560,亦柔,,parseJsonTable,某物联网平台接收到多个设备上报的状态数据，格式为包含设备ID、状态码和时间戳的JSON字符串。其中时间戳字段需要转换为指定格式的日期时间类型，部分设备可能缺少状态码字段。请将以下数据解析为结构化的内存表:输入数据devices是三个JSON字符串组成的向量，包含deviceID(字符串)、status(字符串)、timestamp(日期时间类型按yyyyMMddHHmmss格式解析)，输出结果存储在变量result中。,"devices = [
'{""deviceID"":""D001"", ""status"":""active"", ""timestamp"":""20231015123045""}',
'{""deviceID"":""D002"", ""status"":""inactive"", ""timestamp"":""20231015123500""}',
'{""deviceID"":""D003"", ""timestamp"":""20231015124000""}'
]
schema = table([""deviceID"", ""status"", ""timestamp""] as name, [""STRING"", ""STRING"", ""DATETIME""] as type, [,, ""yyyyMMddHHmmss""] as format)
","result = parseJsonTable(devices, schema)
"
561,亦柔,,pj,在物联网设备管理中，设备日志表记录了每个子设备的实时温度，而设备类型表存储了不同设备系列前缀对应的监控区域。需要将子设备根据其编号前缀匹配到对应的区域。左表deviceLog包含列deviceID（STRING）和temperature（DOUBLE），右表deviceType包含列prefix（STRING）和area（STRING）。请生成结果表result，包含左表所有能匹配前缀的条目，并关联区域信息。,"deviceLog = table([""SENSOR_A001"",""SENSOR_A2"",""SENSOR_B101"",""ACTUATOR_C5"",""SENSOR_B009""] as deviceID, [38.5, 40.1, 22.8, 19.3, 25.6] as temperature)
deviceType = table([""SENSOR_A"",""SENSOR_B"",""ACTUATOR""] as prefix, [""Area1"",""Area2"",""Area3""] as area)
","result = pj(deviceLog, deviceType, `deviceID, `prefix)
"
562,亦柔,,quantile,某物联网设备每隔半小时采集一次温度数据，存储在表sensorData中（包含time和temperature两列，temperature为整数类型）。现需分析上午10点到12点之间的温度分布情况，请找出该时段数据的第三四分位点（保留原始小数精度），并将计算结果保存到变量result。,"time = 2023.06.01T10:00:00 + 0..4 * 30*60
temperature = [36, 42, 40, 39, 44]
sensorData = table(time, temperature)
","result = quantile(sensorData.temperature, 0.75, 'linear')
"
563,亦柔,,randomForestRegressor,"在工业物联网设备健康监测中，现有传感器采集了100组设备运行数据，包含温度（范围50-100）、振动幅度（0-5）、运行时长（1000-2000小时）三个特征列，以及通过专业检测得到的剩余使用寿命数值（单位:天）。要求基于这三个特征构建预测模型，输出模型字典到result变量。输入数据表名为sensor_data，包含列:temperature, vibration, operating_hours, remaining_life。","temperature = rand(50.0,100)+50.0
vibration = rand(5.0,100)
operating_hours = rand(1000.0,100)+1000.0
remaining_life = 300 - 0.8*temperature - 15*vibration + 0.05*operating_hours + norm(0,10,100)
sensor_data = table(temperature, vibration, operating_hours, remaining_life)
","result = randomForestRegressor(
sqlDS(<select * from sensor_data>),
yColName=`remaining_life,
xColNames=`temperature`vibration`operating_hours,
numTrees=15,
maxDepth=10,
numBins=50
)
"
564,亦柔,,randStudent,某金融研究需要模拟自由度为3的t分布资产收益率波动，要求生成5个随机数样本。已知测试参数已存储在变量df=3.0和count=5中，请生成对应分布的随机序列并存入result变量。,"df = 3.0
count = 5","result = randStudent(df, count)"
565,亦柔,,second,"在物联网设备监控场景中，采集到一组传感器触发时间记录（格式为""时:分:秒""字符串）,变量名为eventTimes，需要提取精确到秒的时间信息。给定输入数据格式为字符串向量[""13:08:45"",""07:22:19""]，输出格式要求为SECOND类型的向量，存储到result变量。","eventTimes = [""13:08:45"",""07:22:19""]",result = second(eventTimes)
566,亦柔,,setMemLimitOfTaskGroupResult,某证券公司的分布式数据库节点在盘后批量计算时，由于并行任务中间结果占用内存过高导致频繁触发告警。运维团队需紧急将子查询结果内存限制调整为6GB并获取生效值进行记录。输入参数为整型数值，输出结果需存入变量result验证调整情况，请实现该操作。,,"setMemLimitOfTaskGroupResult(6)
result = getMemLimitOfTaskGroupResult()"
567,亦柔,,solve,在商品成本分析中，某厂商在两个生产批次中使用两种原料的不同配比。第一批次投入原料X 3吨、原料Y 5吨，总成本为30万元；第二批次投入原料X 4吨、原料Y 6吨，总成本为38万元。矩阵变量m的行代表生产批次，列对应原料消耗量，向量v保存各批次总成本。求解两种原料的每吨成本，将计算结果存入变量result。,"m = matrix([3,4],[5,6]).transpose()
v = [30,38]",result = m.solve(v)
568,亦柔,,spearmanr,"某公司记录了最近8周的广告预算和对应销售额数据，其中第三周预算缺失，第二周销售额缺失。请分析两者的单调关联强度并将结果存入result。输入数据adBudget是数值型向量[1200,1500,NULL,1800,950,1300,1600,1100]，sales是数值型向量[45,NULL,62,78,33,51,69,42]。输出结果为标量数值。","adBudget = [1200,1500,NULL,1800,950,1300,1600,1100]
sales = [45,NULL,62,78,33,51,69,42]","result = spearmanr(adBudget, sales)"
569,亦柔,,strlenu,"在物联网设备监控场景中，设备日志信息存储为字符串向量msgs，包含以下内容:[""设备状态:正常√"", ""Alert:高温警告!"", ""数据量:128GB""]。需要统计每条日志信息的Unicode字符数量，并将结果存储为整型向量result。输入数据为STRING类型向量msgs，输出为INT类型向量result。","msgs = [""设备状态:正常√"", ""Alert:高温警告!"", ""数据量:128GB""]",result = strlenu(msgs)
570,亦柔,,talibNull,"在计算某金融指标时，需要处理三个传感器采集的时间序列数据流。要求对三个长度相等的序列进行预处理:找到第一个所有通道均有有效数值的时间点，将该时间点前的所有观测值设为无效状态，并保留后续原始数据。给定传感器采集序列sensor1=[NULL,15.6,NULL,18.2,22.1]、sensor2=[NULL,NULL,105,112,118]、sensor3=[9.8,NULL,12.1,15.9,17.4]，写出处理代码。","sensor1 = [NULL,15.6,NULL,18.2,22.1]
sensor2 = [NULL,NULL,105,112,118]
sensor3 = [9.8,NULL,12.1,15.9,17.4]","result = talibNull(sensor1, sensor2, sensor3)"
571,亦柔,,tmskewTopN,在物联网电压监测中，设备每30分钟记录一次电压波动值（X）和信号强度（S），当S为空时视为无效数据。请为每个时间点计算过去3小时内信号强度降序排列的前2个有效电压值的斜度（有偏估计）。给定时间戳T为时间类型数组，X和S为长度7的数值数组，结果存入变量result。,"T = 2023.01.03T09:00:00 + 0 30 60 90 120 150 180
X = [1.2, 3.4, 2.5, 4.4, 5.0, 3.8, 2.1]
S = [80, 75, NULL, 90, 85, 95, 70]
","result = tmskewTopN(T, X, S, 180, 2, true, false)
"
572,亦柔,,tmstdp,"在物联网温度监测场景中，设备的采样时间存在重复且间隔不均匀（t列为[5,10,10,20,25]秒，x为对应的温度值[36.5,37.1,NULL,38.0,36.8]）。请计算每个时间点前15秒窗口内的温度总体标准差，将结果存入变量result。","t = [5,10,10,20,25]
x = [36.5, 37.1, NULL, 38.0, 36.8]
m = table(t as t, x as x)
","result = select *, tmstdp(t, x, 15) from m
"
573,亦柔,,toUTF8,"某物联网设备的历史日志信息以GBK编码存储，如origData=[""设备编号"", ""温度值""]，变量origData为字符串向量。请将这些字符串转为UTF-8编码格式，转换结果存入result变量。","origData = fromUTF8([""设备编号"", ""温度值""], ""gbk"")","result = toUTF8(origData, ""gbk"")"
574,亦柔,,tupleSum,在物联网监控系统中，三个湿度采集节点分别记录了两个时段的水位变化（数组形式）和异常次数（整型）。需要合并统计所有节点数据，计算每个时段的水位累计值以及总异常次数。输入数据格式为元组x，包含三个子元组，每个子元组由长度2的整型数组和整型数构成。请输出格式为包含两个元素的元组（长度2的数组和整型数），并将结果存入变量result。,"x = tuple( ([120,135], 2), ([85,92], 5), ([110,125], 3) )",result = tupleSum(x)
575,亦柔,,updateMarketHoliday,"某交易所因特殊安排，需将2023.10.02和2023.10.03设置为非周末休市日。已知输入数据为DATE类型向量holidays = [2023.10.02, 2023.10.03]，请编写代码更新内存中的交易日历，并将操作结果赋值给result。","holidays = [2023.10.02, 2023.10.03]","result = updateMarketHoliday(""HKG"", holidays)"
576,亦柔,,updatePKEYDeleteBitmap,"在物联网设备监控场景中，需要清理传感器编号S12-005的异常状态记录，该设备数据存储在ID为""c7f988af-3d5b-4876-814a-68c0a44ba7ae""的分区块中。请编写代码将该数据块的删除标记同步到存储引擎，输入数据为字符串类型变量chunkId，输出结果存储在变量result中。","chunkId = ""c7f988af-3d5b-4876-814a-68c0a44ba7ae""",result = updatePKEYDeleteBitmap(chunkId)
577,亦柔,,yearEnd,某公司财年定义为每年6月结束，且从2015年6月30日起每隔3年调整统计周期。现有销售表sales包含日期(date列，格式2016.03.15)、销售额(amount列)、区域(region列)。请按财年分组，计算每个周期内的销售总额及最大单笔金额，输出到result。,"date = 2016.03.15 + 0..6 * 365
amount = 12000 8500 15000 9000 18000 22000 13000
region = take(`A`B, 7)
sales = table(date, region, amount)
","result = select sum(amount) as total_amount, max(amount) as max_amount from sales group by yearEnd(date, 6, 2015.06.30, 3)
"
578,亦柔,,addGroupMember,"系统管理员需要将新员工同时加入两个部门群组以便访问不同资源。输入数据为用户名为""Tom""（字符串），群组名为[""research"", ""marketing""]（字符串向量）。请编写代码实现这一配置并将结果存入result变量。","user = ""Tom""; groups = [""research"", ""marketing""]","result = addGroupMember(user, groups)"
579,亦柔,,align,"在物联网场景中，两个温度监测设备分别记录了不同时间点的传感器读数（温度矩阵tempData和湿度矩阵humidData）。温度矩阵的行标签为时间戳[09:30:15,09:30:17,09:30:20]，列标签为设备ID[D1,D2]；湿度矩阵的行标签为时间戳[09:30:15,09:30:18,09:30:20]，列标签为设备ID[D2,D3]。请对齐这两个矩阵，要求保留所有时间点和设备ID的交集，并计算两个矩阵对应元素的乘积，将最终结果存入result。","timestampT = [09:30:15, 09:30:17, 09:30:20]
deviceT = [""D1"", ""D2""]
tempData = matrix([35.4,36.1,37.2], [35.8,36.3,37.5]).rename!(timestampT, deviceT)

timestampH = [09:30:15, 09:30:18, 09:30:20]
deviceH = [""D2"", ""D3""]
humidData = matrix([68,65,62], [72,70,68]).rename!(timestampH, deviceH)","aligned = align(tempData, humidData, how=""inner"", view=false)
result = aligned[0] * aligned[1]"
580,亦柔,,backupSettings,"在迁移数据库系统时，需要将现有系统的用户账户和自定义函数配置存档到指定路径，但不需要保留访问权限设置。已知备份文件路径为""/mnt/db_backup/migration_config.bak""，请编写代码实现该需求，返回结果为包含成功备份元素的列表，存储到变量result。输入数据为数据库系统当前配置，输出格式为字符串向量。",,"result = backupSettings(fileName=""/mnt/db_backup/migration_config.bak"", userPermission=false, functionView=true)"
581,亦柔,,bitXor,"在物联网设备监控中，某设备三个节点在周一和周二记录的状态码分别为整数数组statusDay1和statusDay2（格式:[12,5,9]和[9,3,15]）。请计算每个节点两日二进制状态码差异位的位置映射值（相同位输出0，不同位输出1，返回十进制结果），结果存入result变量。要求输入数据为两个整型向量，输出为整型向量。","statusDay1 = [12, 5, 9]
statusDay2 = [9, 3, 15]","result = bitXor(statusDay1, statusDay2)"
582,亦柔,,cancelConsoleJob,"在物联网设备数据处理过程中，用户提交了三个持续运行的聚合查询任务，现需根据系统生成的作业标识符同时中止这些尚未完成的操作。已知三个任务的唯一标识符分别为""6d14a3c0-9b8a-4e72-b8fd-2d1a01b5e9a1""、""e3f582d7-19c2-4a5f-8c6d-0c7b1e9a8d2b""和""f0a9219c-7b34-4d85-8e5a-123456789abc""，请编写中止操作代码并将结果存储在变量中。","rootJobIds = [""6d14a3c0-9b8a-4e72-b8fd-2d1a01b5e9a1"", ""e3f582d7-19c2-4a5f-8c6d-0c7b1e9a8d2b"", ""f0a9219c-7b34-4d85-8e5a-123456789abc""]",result = cancelConsoleJob(rootJobIds)
583,亦柔,,cast,"某工业设备采集的电压读数以字符串格式存储在变量voltageData中（格式为STRING VECTOR，数据为[""12.8"", ""15.3"", ""14.2""]），需要转换为浮点数进行能效分析。请实现数据类型的转换，结果存入变量result，输出格式要求为DOUBLE VECTOR。","voltageData = [""12.8"", ""15.3"", ""14.2""]",result = voltageData $ DOUBLE
584,亦柔,,cdfPoisson,"某物联网设备日均触发2.5次异常告警，现需评估不同告警次数的累计发生概率。给定测试数据为[0,2,4,6]次告警事件，请编写DolphinDB代码计算这些事件数的累计分布值，将结果存入result变量。输入数据为整型向量X，输出结果为浮点型向量。",X = 0 2 4 6,"result = cdfPoisson(2.5, X)"
585,亦柔,,cell,"某物联网设备采集了三个传感器在三个时刻的监测数据，存储为一个3x3的矩阵m，行对应传感器A、B、C，列对应时刻T1、T2、T3。矩阵初始数据为[[25,26,24],[27,28,29],[23,25,22]]。现在需要快速获取传感器B在T3时刻的监测值，结果存入变量result。（矩阵行号从0开始计数）","m = matrix([[25,26,24],[27,28,29],[23,25,22]])","result = cell(m, 1, 2)"
586,亦柔,,cholesky,"在投资组合风险分析中，给定一个由两种资产收益计算的协方差矩阵，矩阵变量名为cov_mat，格式为2x2的二维数组[[4,12],[12,37]]。需要对该矩阵进行三角分解以用于风险因子建模，要求生成上三角结构的分解结果并存储在变量result中。","cov_mat = matrix([[4,12], [12,37]])","result = cholesky(cov_mat, false)"
587,亦柔,,clearCachedDatabase,某金融机构使用分布式数据库存储股票高频交易数据，数据库路径为'dfs://stockData'，其中包含一个名为'transactions'的分布式表。由于系统内存压力，需要立即释放该表在内存中的缓存数据。请编写DolphinDB代码执行清理操作，将结果存入变量result。,"
login(""admin"", ""123456"")
if(existsDatabase(""dfs://stockData"")) dropDatabase(""dfs://stockData"")
db = database(""dfs://stockData"", VALUE, 2023.01.01..2023.01.03)
t = table(take(2023.01.01, 100) as date, rand(100.0, 100) as price)
db.createPartitionedTable(t, ""transactions"", `date).append!(t)
","
result = clearCachedDatabase(""dfs://stockData"", ""transactions"")
"
588,亦柔,,clearDSCacheNow,某物联网平台按设备ID分区存储传感器数据，用户已缓存数据源以便快速查询。现需立即释放所有内存中的缓存空间用于处理实时数据流。输入ds为SQL生成的设备数据源列表，输出结果存入result。编写相应代码。,"
login(""admin"", ""123456"")
devDB = ""dfs://sensorDB""
deviceIDs = `D001`D002`D003`D004

if(existsDatabase(devDB)) dropDatabase(devDB)
db = database(devDB, RANGE, [20230101, 20230201, 20230301, 20230401], engine='TSDB')

t = table(2023.01.01T09:00:00 + 0..99 as timestamp, take(deviceIDs,100) as deviceID, rand(50.0,100) as reading)
st = db.createTable(t,`sensorTab,`timestamp).append!(t)

ds = sqlDS(<select deviceID,reading from loadTable(db,`sensorTab) where timestamp between 2023.01.01T00:00:00 :2023.01.02T00:00:00>)
ds.cacheDSNow()
","
result = clearDSCacheNow(ds)
"
589,亦柔,,coint,现有一组物联网传感器采集的两个设备温度序列deviceTemp1和deviceTemp2，均为包含12个数值的向量。需要验证它们是否在长期运行中保持稳定的温度关联关系，要求使用包含常数和线性趋势项的协整检验方法，并基于贝叶斯信息准则自动确定滞后期。请输出检验结果到变量result，其中result为包含tStat、pValue和criticalValues的字典。,"deviceTemp1 = 32.5 33.8 34.2 35.1 36.0 36.5 37.2 37.8 38.4 39.0 39.5 40.2
deviceTemp2 = 33.2 34.5 35.0 35.9 36.8 37.3 37.9 38.5 39.1 39.7 40.2 40.8","result = coint(deviceTemp1, deviceTemp2, trend=""ct"", autoLag=""bic"")"
590,亦柔,,createDualOwnershipReactiveStateEngine,"物联网平台需要实时监控设备的温度和环境湿度。假设有一个流数据表包含字段:时间戳(ts)、日期(date)、设备ID(deviceID)、区域(zone)、温度(temperature)、湿度(humidity)。要求对每个设备按3条消息窗口计算温度均值，同时对每个区域按3条消息窗口计算湿度最大值，并将双分组计算结果写入结果表。请写出实现逻辑的代码，输入变量名为inputStream，输出表结构为(date,deviceID,zone,avg_temp,max_humidity)，最终结果存入result。","share streamTable(1:0, `ts`date`deviceID`zone`temperature`humidity, [TIMESTAMP, DATE, SYMBOL, SYMBOL, DOUBLE, DOUBLE]) as inputStream
outputTable = table(100:0, `date`deviceID`zone`avg_temp`max_humidity, [DATE, SYMBOL, SYMBOL, DOUBLE, DOUBLE])
","engine = createDualOwnershipReactiveStateEngine(
name=""iotMonitor"",
metrics1=<mavg(temperature, 3)>,
metrics2=<mmax(humidity, 3)>,
dummyTable=inputStream,
outputTable=outputTable,
keyColumn1=`date`deviceID,
keyColumn2=`date`zone
)

subscribeTable(tableName=""inputStream"", actionName=""dualCalc"", handler=engine, msgAsTable=true)

tmp = table(1:0, `ts`date`deviceID`zone`temperature`humidity, [TIMESTAMP, DATE, SYMBOL, SYMBOL, DOUBLE, DOUBLE])
insert into tmp values(2023.09.01T09:00:00.000, 2023.09.01, `D1, `Z1, 35.6, 85)
insert into tmp values(2023.09.01T09:00:01.000, 2023.09.01, `D1, `Z1, 35.8, 86)
insert into tmp values(2023.09.01T09:00:02.000, 2023.09.01, `D2, `Z2, 36.0, 82)
insert into tmp values(2023.09.01T09:00:03.000, 2023.09.01, `D1, `Z1, 35.9, 88)
insert into tmp values(2023.09.01T09:00:04.000, 2023.09.01, `D2, `Z2, 36.2, 84)
insert into tmp values(2023.09.01T09:00:05.000, 2023.09.01, `D3, `Z3, 34.8, 79)
inputStream.append!(tmp)

result = select * from outputTable
"
591,亦柔,,createTimeSeriesAggregator,"作为量化交易员，我需要实时聚合股票行情数据中的每个5秒窗口内的首个价格（开盘价）、最后价格（收盘价）、最高价和最低价。输入数据表 trades 包含时间戳（TIMESTAMP类型）、股票代码（SYMBOL类型）和价格（DOUBLE类型），变量名为 time, symbol, price。请生成代码实现该需求，并将结果存储在变量 result 中，输出包含窗口起始时间、股票代码及四个聚合值。","trades = table(
[""2023-03-08T09:30:00"", ""2023-03-08T09:30:03"", ""2023-03-08T09:30:06"", ""2023-03-08T09:30:11"", ""2023-03-08T09:30:14""] as time,
`AAPL`AAPL`MSFT`MSFT`AAPL as symbol,
[152.3, 152.7, 305.4, 305.9, 153.1] as price
)
","aggr = createTimeSeriesAggregator(
windowSize=5000,
step=5000,
metrics=[<first(price) as open, last(price) as close, max(price) as high, min(price) as low>],
dummyTable=trades,
timeColumn=`time,
keyColumn=`symbol
)
aggr.append!(trades)
result = exec open, close, high, low from aggr.getAggregator()
"
592,亦柔,,cumvarTopN,现有某传感器每分钟采集的温度数据表，包含设备ID（device）、时间戳（ts）、温度值（temp）和采集质量评分（score）。请按设备分组，在每一条记录的时间点计算:根据历史累计质量评分从高到低排序的前3个温度值的方差，并将结果存入result列。输入表变量名为sensorData，输出列名为result。,"sensorData = table(take(`D001`D002, 8) as device, 2023.03.08T10:00:00 + 1..8 as ts, rand(30..40.0, 8) as temp, rand(80..100, 8) as score)","select cumvarTopN(temp, score, 3, false) as result from sensorData context by device"
593,亦柔,,datetimeParse,"在物联网设备日志中，有三个时间戳记录的格式分别为""yyyy-MM-dd HH:mm:ss""、""yyyy/MM/dd HH-mm-ss""和""dd-MMM-yyyy HH:mm:ss""，对应的数据为[""2023-05-15 14:30:00"", ""2023/05/16 15-45-30"", ""17-May-2023 09:30:25""]。请将这些时间戳转换为标准的datetime类型数组，存储到变量result。","timestamps = [""2023-05-15 14:30:00"", ""2023/05/16 15-45-30"", ""17-May-2023 09:30:25""]
formats = [""yyyy-MM-dd HH:mm:ss"", ""yyyy/MM/dd HH-mm-ss"", ""dd-MMM-yyyy HH:mm:ss""]
","result = each(datetimeParse, timestamps, formats)
"
594,亦柔,,decimalFormat,"物联网设备捕获了一组传感器数值（浮点型向量sensorReadings），要求将其格式化为带有千位分隔符且保留两位小数的字符串形式，便于生成可视化报告。输入数据格式为[1234567.8912, 789012.3456, 456789012.3]，输出结果需要存储在变量result中，格式为字符串向量。","sensorReadings = [1234567.8912, 789012.3456, 456789012.3]","result = decimalFormat(sensorReadings, ""#,##0.00"")"
595,亦柔,,digitize,"某金融分析系统需要对一组收益率数据rates = [5, 15, 25, 35]进行风险评估，阈值区间采用降序排列[30,20,10]。划分规则为:当收益率达到或超过某阈值时归入更高级别（例如收益率≥30时标记为最高风险）。请将分类索引结果存入变量result，其中输入数据格式为整型向量，输出为与rates长度相同的整型向量。","rates = [5, 15, 25, 35]
bins = [30, 20, 10]
","result = digitize(rates, bins=bins, right=true)
"
596,亦柔,,ewmCov,"在物联网场景中，某环境监测系统记录了三个时间点的设备传感器数据，包含时间戳（time）、设备编号（device）、温度值（temperature）和湿度值（humidity）。现需分析温度、湿度参数与外部噪声水平数组[12.8,14.2,13.5]的动态协方差，要求最近数据权重按0.2的平滑系数衰减，计算时跳过空值且至少需要1个有效数据点。输入表变量名为sensorData，噪声数组名为noiseLevel，输出结果存入变量result。","sensorData = table(
[09:30:00.001, 09:30:05.002, 09:30:10.003] as time,
`DEV001`DEV002`DEV001 as device,
[24.5,25.3,26.1] as temperature,
[0.45,0.47,0.43] as humidity
)
noiseLevel = [12.8, 14.2, 13.5]","result = ewmCov(X=sensorData, other=noiseLevel, alpha=0.2, ignoreNA=true, minPeriods=1)"
597,亦柔,,firstNot,处理设备运行日志表，结构为deviceID（整型）和errorCode（整型，含NULL值）。找出每个设备首次出现的故障码（即不为0且非空的记录），输出结果保留在变量result中。输入表变量名为t，输出格式为包含deviceID和首次故障码的表。,"deviceID = [101,101,101,202,202,202,202]
errorCode = [0,NULL,500,0,0,NULL,404]
t = table(deviceID, errorCode)","result = select firstNot(errorCode, 0) as firstFaultCode from t group by deviceID"
598,亦柔,,fy5253,假设有一张物联网设备销售记录表，包含日期（date）、设备序列号（device_id）、城市（city）、销量（units）和单价（price）。所有日期分布在2018.06.15到2023.05.20之间。请按照以下规则计算各财政年度的销售指标:财年从起始月份的最后一个星期四开始，起始月份设为四月，每三年间隔更新财年计算基准，基准起始点为2018.05.10。要求输出每个财年起始日期及其对应的平均单价和总销量，结果存入result变量。,"date = 2019.04.28 2020.05.15 2021.04.30 2022.05.02 2023.04.18
device_id = ['D001','D002','D003','D004','D005']
city = take(`Beijing,5)
units = 120 150 230 180 210
price = 299.9 349.0 319.5 329.0 359.9
iot_sales = table(date, device_id, city, units, price)
","result = select avg(price) as avg_price, sum(units) as total_units from iot_sales group by fy5253(date, 3, 4, false, 2018.05.10, 3)
"
599,亦柔,,getDiskIOStat,在物联网平台的存储节点监控中，需要实时获取当前磁盘IO队列的任务堆积情况和并行处理通道数量。请编写代码生成包含队列深度列表和通道数量整型的监测结果字典，并将计算结果赋值给result变量。输入数据无需预置，直接调用系统接口获取实时状态。,,result = getDiskIOStat()
600,亦柔,,getNodeAlias,"在一个分布式集群监控系统中，需要实时记录各节点的运行状态。现需创建一张状态日志表，包含本地节点标识、当前时间戳和运行状态字段。请编写代码实现以下功能:当节点启动时，自动获取当前节点的别名，记录首次启动时间为当前系统时间，并将状态标记为""active""，最终返回包含这三个字段的最新记录。其中状态日志表结构为(node STRING, ts TIMESTAMP, status STRING)，要求结果存入变量result。","// 创建分布式状态日志表（若实际环境需要可改为内存表）
cols = `node`ts`status
types = [STRING,TIMESTAMP,STRING]
statusLog = table(100:0, cols, types)","nodeAlias = getNodeAlias()
initialRecord = table(nodeAlias as node, now() as ts, ""active"" as status)
result = statusLog.insert!(initialRecord).select([node, ts, status]).limit(-1)"
601,赛梅,,gramSchmidt,在传感器数据分析中，三个监测设备采集了线性无关的三维空间坐标数据，存储于3行3列的矩阵m中（每列为同一设备在X/Y/Z轴上的坐标）。现需消除各设备数据间的关联性，生成正交坐标矩阵并存入result。,"m = matrix([4 1 3, 2 5 8, 9 6 7])","result = gramSchmidt(m, true)"
602,赛梅,,highDouble,"在物联网位置数据中，每个设备的坐标点由经度（低位）和纬度（高位）构成。现有变量coordinates包含3个POINT类型的坐标（[121.47,31.23],[116.40,39.90],[113.53,22.30]），如何提取所有点的纬度数据存入result变量，输出为DOUBLE数组？","coordinates = point([121.47, 116.40, 113.53], [31.23, 39.90, 22.30])",result = highDouble(coordinates)
603,赛梅,,highLong,在金融交易系统中，每笔交易使用128位整数类型存储全局唯一识别码。现有两个交易的识别码存储在变量data中，请将每个识别码的高8字节部分转换为长整型数值，存入变量result。输入数据格式为包含两个INT128元素的向量，变量名data；输出数据为包含两个LONG元素的向量，变量名result。,"data = [int128(""0x1234567890ABCDEF0FEDCBA098765432""), int128(""0xFEDCBA09876543211234567890ABCDEF"")]",result = highLong(data)
604,赛梅,,histogram2d,"为了分析两只证券的价格波动分布，给定它们的日度价格变化率分别为x和y（均为5个元素的向量）。其中x的范围在0.5到2.5之间，y的值跨越0.3到2.3，每个观测点附加了成交量作为权重。需要将x轴划分为3个等宽区间，y轴划分区间为[0.0,1.0)、[1.0,2.0)、[2.0,3.0]，计算带权重的概率密度分布矩阵。输入数据格式为x=array(DOUBLE, [0.5,1.0,1.5,2.0,2.5]), y=array(DOUBLE, [0.3,0.8,1.3,1.8,2.3]), weights=array(INT, [100,200,150,300,250])，输出要求二维统计结果存入result。","x = 0.5 1.0 1.5 2.0 2.5
y = 0.3 0.8 1.3 1.8 2.3
weights = [100, 200, 150, 300, 250]","result = histogram2d(x, y, bins=(3, [0.0,1.0,2.0,3.0]), density=true, weights=weights)"
605,赛梅,,invBinomial,"在质量控制中，某产品需通过8项独立检测，每项合格概率为75%。现需确定三个置信水平(15%、45%、75%)下允许的最大次品数量，输入参数为试验次数8、合格率0.75、置信向量[0.15,0.45,0.75]，输出结果存储在result变量中。","X = [0.15, 0.45, 0.75]","result = invBinomial(8, 0.75, X)

// 验证:当成功概率为0.75时，计算允许的最大失败次数
// 置信度0.15对应失败数8-成功数k >= P(X<=k)>=0.15
// 实际计算结果可能为[6,7,7] (需实际验证)"
606,赛梅,,isNumeric,"在物联网设备管理中，需要验证采集的序列号是否为纯数字格式。给定一个设备序列号列表serialNos = [""A2023"", ""987654"", ""00X35"", """", ""3.14""]，请判断每个序列号是否仅由数字字符构成。输入数据为字符串向量serialNos，输出结果为布尔型向量并存储在变量result中。","serialNos = [""A2023"", ""987654"", ""00X35"", """", ""3.14""]",result = isNumeric(serialNos)
607,赛梅,,isQuarterEnd,"某金融公司需要筛选出2023年四个特定日期（变量名dates，类型为DATE向量）中的季度末日期，用于生成季度报告。输入数据为[2023.03.31, 2023.04.01, 2023.06.30, 2023.07.15]，要求输出布尔类型的判断结果到result变量，标识每个日期是否为所在季度的最后一天。","dates = [2023.03.31, 2023.04.01, 2023.06.30, 2023.07.15]",result = isQuarterEnd(dates)
608,赛梅,,listTables,某物联网平台需要获取分布式数据库中所有表的元信息。已知数据库采用时间分区方式，路径存储在变量dbUrl，其中包含设备状态表和传感器记录表。请编写代码返回一个两列的结果集，第一列为表名称，第二列为对应的物理索引标识。,"
dbUrl = ""dfs://iot_2023""
if(existsDatabase(dbUrl)) dropDatabase(dbUrl)
db = database(dbUrl, VALUE, 2023.01.01..2023.12.31)

sensorSchema = table(1:0, `deviceID`timestamp`reading, [STRING,DATETIME,DOUBLE])
deviceSchema = table(1:0, `deviceID`status`updateTime, [STRING,STRING,DATETIME])

sensorDB = createPartitionedTable(db, sensorSchema, ""sensor_data"", ""timestamp"")
deviceDB = createPartitionedTable(db, deviceSchema, ""device_status"", ""updateTime"")
","
result = listTables(dbUrl)
"
609,赛梅,,loadPlugin,"在一个实时监控系统中，需要扩展DolphinDB的流数据处理能力来解析网络日志。已知自定义日志分析插件的描述文件存放于绝对路径""/plugins/security/PluginLogParser.txt""，请编写初始化代码加载该组件并调用其初始化方法创建日志解析器，要求使用系统管理员账户完成操作。","login(`admin, `123456)
go","try { 
loadPlugin(""/plugins/security/PluginLogParser.txt"") 
use security::logParser
result = createLogParser(""syslog"") 
} catch(ex) { 
result = ex 
}"
610,赛梅,,log1p,"在物联网设备监控场景中，设备传感器记录了三次温度波动数据。现有包含时间戳和设备温度的表device_temp，结构为(time TIMESTAMP,temp DOUBLE)，其中temp列数值分别为0、1.71828和3。需要计算每个温度值自身加一后的自然对数值，输出结果保留到变量result中。","device_temp = table(
2023.01.01T09:00:00 2023.01.01T09:05:00 2023.01.01T09:10:00 as time,
[0, 1.71828, 3.0] as temp
)
","result = select log1p(temp) as log_values from device_temp
"
611,赛梅,,lu,"在物联网设备的状态分析中，给定一个4x4的系统响应矩阵deviceResp，其元素为[[6,3,9,2],[2,8,5,4],[4,6,7,3],[1,2,8,9]]。请进行三角分解得到三个输出矩阵，其中第一个输出矩阵表示行交换记录，第二个是单位下三角矩阵，第三个是上三角矩阵，使得原始矩阵等于第一个矩阵转置乘以后两个矩阵的乘积。将分解结果按顺序存入result变量。","deviceResp = matrix([[6,3,9,2],[2,8,5,4],[4,6,7,3],[1,2,8,9]])","P, L, U = lu(deviceResp)
result = [P, L, U]"
612,赛梅,,makeUnifiedCall,在金融分析中，给定一个股票日行情表stockData，包含日期date、当日最高价high、最低价low。需要动态生成SQL查询代码，计算每日价格波动率指标（使用公式(high-low)/(high+low)）。输入数据格式为table，变量名stockData；输出为table，变量名result。,"stockData = table(2023.01.01 2023.01.02 as date, [45.3, 46.1] as high, [43.8, 44.5] as low)
volatility = def(high, low) -> (high - low)/(high + low)
","c = sql(select=makeUnifiedCall(volatility, sqlTuple(`high`low)), from=stockData)
result = c.eval()
"
613,赛梅,,manova,某量化团队记录了三种交易策略（X、Y、Z）在9个观测周期内的回报率、最大回撤和换手率指标，数据存储在表performance中，包含三列数值字段return_rate、drawdown、turnover_rate和分组列strategy_flag（1表示X，2表示Y，3表示Z）。需要验证不同策略对这三个风险收益指标的组合影响是否具有统计显著性，最终输出分析结果到变量result。,"n=9
return_rate = 7.1 6.5 8.2 5.9 7.3 6.0 8.8 7.5 6.8  
drawdown = 12.8 11.4 13.5 10.9 12.5 11.2 14.2 12.3 11.7  
turnover_rate = 0.34 0.28 0.41 0.25 0.31 0.27 0.43 0.36 0.29  
strategy_flag = 1 1 1 2 2 2 3 3 3  
performance = table(return_rate, drawdown, turnover_rate, strategy_flag)","result = manova(select return_rate, drawdown, turnover_rate from performance, performance.strategy_flag)"
614,赛梅,,mdd,"某物联网设备每小时采集一次电池电量数据，存储为数组变量batteryLevel，数值依次为[95, 92, 88, 85, 90]。请计算该设备在监测周期内电量从峰值到谷底的最大相对损失幅度，将计算结果保留为浮点数存储在result变量中。",batteryLevel = 95 92 88 85 90,result = mdd(batteryLevel)
615,赛梅,,moveHotDataToColdVolume,"某物联网平台的热存储策略保留最近5天的传感器数据，之后自动转移到冷存储。当前系统时间为2024.03.20 08:00:00，需要立即将7天前至5天前的设备日志迁移到冷存储。已知数据库路径为""dfs://iotLogs""，分区方式为按日值分区，冷热卷路径已配置。请编写迁移代码并将操作结果存入变量result。","// 创建数据库并设置分层存储策略
dbName = ""dfs://iotLogs""
if(existsDatabase(dbName)) dropDatabase(dbName)
db = database(dbName, VALUE, 2024.03.01..2024.03.20, coldVolumePath=""/cold_logs"", hotVolumePath=""/hot_logs"")
setRetentionPolicy(db, hoursToColdVolumes=120)",result = moveHotDataToColdVolume(checkRange=48)
616,赛梅,,moveReplicas,"在物联网平台中，节点""edge05""存储了2023年传感器数据，现需将温度传感器的所有数据副本迁移至备份节点""backup09""的""/cluster/backup/vol2""目录。已知输入数据格式为:chunk标识符存储在数组chunkIds中，节点信息为字符串类型。请生成迁移代码，结果存入result。","chunkIds = [""c001b32e"", ""c002f7a1"", ""c00389c4""]
","result = moveReplicas(""edge05"", ""backup09"", chunkIds, ""/cluster/backup/vol2"")
"
617,赛梅,,mstdTopN,在物联网监控场景中，有三个传感器每小时采集一次环境数据。给定时间戳矩阵S（含空值）和对应的温度值矩阵X，请为每个位置计算:基于最近3个有效记录窗口内，按时间倒序取最新的两个温度值样本标准差。输入X为三列矩阵，变量名xData；S为三列时间矩阵，变量名sMatrix；结果存入变量result。,"
xData = matrix([33.5,40.1,NULL,38.9,35.4], [28.8,30.2,29.5,NULL,27.3], [45.0,44.9,46.2,47.1,NULL])
sMatrix = matrix([2023.01.01T09:00, 2023.01.01T10:00, NULL, 2023.01.01T12:00, 2023.01.01T13:00], [NULL, 2023.01.01T10:15, 2023.01.01T11:30, 2023.01.01T12:45, 2023.01.01T13:20], [2023.01.01T08:50, 2023.01.01T10:10, 2023.01.01T11:05, 2023.01.01T11:55, NULL])
","
result = mstdTopN(xData, sMatrix, 3, 2, false)
"
618,赛梅,,pca,在股票因子分析中，我们有一个包含股票收益率、换手率和市盈率的表financial_data，其中包含3列数值型数据（字段名为return_rate、turnover、pe_ratio）。现需要对这三个因子进行降维处理，提取两个主成分。请编写DolphinDB代码实现该需求，要求对数据进行标准化处理，使用随机分解方法并固定随机种子为42，最终将计算结果存储在result变量中。,"financial_data = table(
3.2 1.8 15.1 as return_rate,
0.12 0.25 0.18 as turnover,
12.5 18.3 9.8 as pe_ratio
)
ds = sqlDS(<select * from financial_data>)
","result = pca(ds, [""return_rate"",""turnover"",""pe_ratio""], k=2, normalize=true, svdSolver=""randomized"", randomState=42)
"
619,赛梅,,point,"某物流公司需要将五辆卡车的实时位置坐标组合成坐标点对象以便空间分析，已知经度数据存储在longitudes向量（116.4074,117.6097,121.4737,113.2644,120.1551），纬度数据存储在latitudes向量（39.9042,24.1184,31.2304,23.1291,30.2741），如何将这些二维坐标存储为位置信息对象集合？"," dolphindb
longitudes = [116.4074, 117.6097, 121.4737, 113.2644, 120.1551]
latitudes = [39.9042, 24.1184, 31.2304, 23.1291, 30.2741]
"," dolphindb
result = point(longitudes, latitudes)
"
620,赛梅,,prod,"某基金连续四天的每日净值增长率存储在一个名为rates的向量中，格式为[0.05, 0.03, NULL, 0.02]。需要计算这期间不考虑无效数据后的总累积增长率，结果存入result。其中输入数据为DOUBLE类型向量rates，输出为DOUBLE类型的标量result。","rates = [0.05, 0.03, NULL, 0.02]
","result = prod(rates)
"
621,赛梅,,quarterEnd,某物联网平台记录了设备在不同日期的读数，需要按季度统计各设备的总读数。其中季度以3月为结束月份，每隔3个季度作为一个统计周期，起始日期为2020年1月。给定表device_data结构为date(DATE)、device(SYMBOL)、value(INT)，请生成包含统计周期截止日期、设备编号及总读数的结果，并将结果赋值给变量result。,"date = [2020.02.10, 2020.03.31, 2020.12.01, 2021.09.30]
device = `A`B`B`A
value = 10 20 40 50
device_data = table(date, device, value)
","result = select sum(value) as total_value from device_data group by quarterEnd(date, 3, 2020.01.01, 3) as quarter_end, device
"
622,赛梅,,randBinomial,某机器学习模型训练时需要模拟一种设备每天进行15次独立检测，每次检测成功的概率是40%。请生成5天的模拟成功次数数据，要求结果为整型数组并赋值给result。,"trials = 15
prob = 0.4
days = 5","result = randBinomial(trials, prob, days)"
623,赛梅,,randNormal,某量化研究需要模拟某资产未来5个交易日的日收益率波动，已知该波动符合均值0.05%、标准差1.2%的正态分布。请生成包含5个符合该分布特征的浮点数序列。输入参数通过变量meanVal（小数型）、stdevVal（小数型）、countVal（整型）定义，计算结果存储在变量result中。,"meanVal = 0.0005
stdevVal = 0.012
countVal = 5
","result = randNormal(meanVal, stdevVal, countVal)
"
624,赛梅,,restoreTable,"某证券公司的交易系统在夜间备份了按交易日分区的行情数据表到""/backup/market""目录，原数据库路径为""dfs://prodMarket""，表名为""quote""，分区方案为VALUE类型2017.08.07-2017.08.11。现需在测试环境""dfs://testMarket""中还原该表并重命名为""testQuote""，请写出实现该需求的完整操作代码。","dbPath = ""dfs://prodMarket""
tableName = ""quote""
backupDir = ""/backup/market""
dates = 2017.08.07..2017.08.11

if existsDatabase(dbPath):
dropDatabase(dbPath)

db = database(dbPath, VALUE, dates)
n=800
securityID = rand([""SH600000"",""SZ000001"",""BJ430045""], n)
tradeDate = rand(dates, n)
price = rand(100.0, n)
t = table(tradeDate, securityID, price)
pt = db.createPartitionedTable(t, tableName, `tradeDate).append!(t)

backupDB(backupDir, dbPath)
","result = restoreTable(backupDir, dbPath, tableName, ""dfs://testMarket"", ""testQuote"")
"
625,赛梅,,rowAlign,"当前时刻两只股票（st1、st2）的买方报价分别为[9.3,9.2,9.1]和[9.5,9.4,9.3]，对应委托量是[200,150,100]和[180,160,140]。需要与上一时刻的买方报价[9.4,9.3,9.2]和[9.6,9.5,9.4]，委托量[180,170,120]和[200,190,150]进行有效档位对齐，计算对应价格位置的委托量变化。输入数据为列式元组currentBid、prevBid、currentQty、prevQty，输出结果存入result变量。","currentBid = array(DOUBLE[], 0, 3).append!([[9.3,9.2,9.1], [9.5,9.4,9.3]]).setColumnarTuple!()
prevBid = array(DOUBLE[], 0, 3).append!([[9.4,9.3,9.2], [9.6,9.5,9.4]]).setColumnarTuple!()
currentQty = array(INT[], 0, 3).append!([[200,150,100], [180,160,140]]).setColumnarTuple!()
prevQty = array(INT[], 0, 3).append!([[180,170,120], [200,190,150]]).setColumnarTuple!()","leftIndex, rightIndex = rowAlign(currentBid, prevBid, ""bid"")
result = currentQty.rowAt(leftIndex).nullFill(0) - prevQty.rowAt(rightIndex).nullFill(0)"
626,赛梅,,rowCovar,在金融分析中，需要评估三组投资组合在连续三个季度中的收益波动与对应市场基准的联动性。输入数组x存储投资组合的季度收益率数据，y存储市场基准的季度收益率数据，每组数据包含三个数值。请计算每组投资组合与基准的收益协方差，结果存入result变量。输入数据格式为x和y是包含三个DOUBLE[]类型元素的数组，输出结果result为长度3的浮点型向量。,"x = array(DOUBLE[], 0, 10).append!([[15.6, 18.2, 14.7], [9.8, 11.3, 10.5], [22.4, 20.1, 21.9]])
y = array(DOUBLE[], 0, 10).append!([[30.1, 28.5, 29.3], [25.6, 24.8, 26.0], [18.9, 17.2, 19.5]])","result = rowCovar(x, y)"
627,赛梅,,rowImaxLast,"某物联网设备监测5个位置的灰尘浓度，记录在字段s1到s5。当某时刻存在多个相同最大值时，需要找出最靠右侧的监测点编号。请根据输入矩阵[loc1,loc2,loc3,loc4,loc5]对应位置，返回每行浓度最大值所在的监测点编号。输入数据表device_data格式:timestamp DATETIME, s1 DOUBLE,s2 DOUBLE,s3 DOUBLE,s4 DOUBLE,s5 DOUBLE。输出结果为与输入行数相同的向量，变量名为result。","t = table(2023.06.01T09:00:00 2023.06.01T09:05:00 as timestamp, 
[520, 480] as s1, [535, 535] as s2, [510, 535] as s3, [535, 520] as s4, [530, 510] as s5)
locations = [""A区入口"", ""B区走廊"", ""C区机房"", ""D区出口"", ""E区仓库""]
","result = rowAt(matrix(locations), rowImaxLast(t.s1, t.s2, t.s3, t.s4, t.s5))
"
628,赛梅,,rowNext,在工业设备监测场景中，某振动传感器连续采集了三个时间点的振幅数据，存储为包含3列数据的矩阵m，其中每行代表不同轴向（X/Y/Z）的监测值。需要将每个轴向的振幅序列向左推移一个时间单位，末位填充空值，处理结果应存入变量result。,"m = matrix([0.45 0.62 0.58, 0.33 0.41 0.38, 0.91 0.87 0.92])",result = rowNext(m)
629,赛梅,,saveAsNpy,在量化分析中，需要将某日三只股票的四个时间点价格（包含缺失值）保存为Python可读取的二进制格式。当前数据存储为一个3行4列的矩阵变量stocks，其中NULL代表缺失。请生成代码将此矩阵保存到路径'/data/stock_prices_2023.npy'，结果赋值给result。,"stocks = matrix(1 2 NULL 4, 5 NULL 7 8, NULL 10 11 12).transpose()
","result = stocks.saveAsNpy(""/data/stock_prices_2023.npy"")
"
630,赛梅,,saveText,"在物联网设备监控场景中，需要将传感器采集的温度、湿度数据表每小时追加记录到同一个日志文件中。已知当前批次数据存储在名为sensor_log的内存表（包含timestamp、device_id、temperature、humidity四个字段），请将该批次数据以分号分隔且不带列名的形式追加到指定路径""/iot/data2023.csv""。请写出实现代码。","timestamp = 2023.06.15T09:00:00 + 1..10
device_id = take(`D001`D002,10)
temperature = rand(20.0..30.0,10)
humidity = rand(40..80,10)
sensor_log = table(timestamp, device_id, temperature, humidity)
","saveText(obj=sensor_log, filename=""/iot/data2023.csv"", delimiter=';', append=true, header=false)
result = loadText(""/iot/data2023.csv"")
"
631,赛梅,,sem,某环境监测站记录了三个传感器连续五天的温度波动数据，数据格式为包含三列的矩阵，列变量名为s1_data、s2_data、s3_data。请评估各传感器测量结果的稳定性，要求输出结果为包含标准稳定性指标的向量，存储到result变量。,"|
sensorData = matrix([23.5 24.1 22.8 23.9 NULL], [25.0 24.9 24.7 24.8 25.2], [21.3 NULL 21.5 21.4 21.6])","|
result = sem(sensorData)"
632,赛梅,,setDatabaseForClusterReplication,"在金融场景中，某证券公司需要为时间序列股票数据库启用跨集群容灾备份机制。已知分布式数据库""tdb""按交易日(2023.01.01至2023.12.31)进行值分区，按股票代码HASH10进行范围分区，变量名为dbHandle。请配置该数据库支持集群间数据同步，并返回配置结果到result。","dbHandle = database("""", VALUE, 2023.01.01..2023.12.31, engine=""TSDB"").database("""", RANGE, 10, partitionType=HASH, fieldName=""symbol"")
","result = setDatabaseForClusterReplication(dbHandle, true)
"
633,赛梅,,setReservedMemSize,作为实时数据处理系统的管理员，当前系统允许的用户内存上限为80GB。现需要临时调整预留内存为总用户内存的30%，以应对突发的传感器数据涌入。请编写配置代码完成调整，并将操作结果保存到变量result中。输入参数要求数值单位为GB，输出结果为配置操作。,,result = setReservedMemSize(24)
634,赛梅,,setStreamTableFilterColumn,"在物联网监控系统中，设备状态流表包含时间戳（TIMESTAMP类型）、设备编号（SYMBOL类型）、电压值（INT类型）三列，表名为device_metrics。需要建立一个订阅规则，使得当设备编号为""D123""或""D456""时，数据才会被推送到告警分析表alert_data中。请编写配置代码，确保插入三条记录（编号分别为D123、D789、D456）时，结果表alert_data仅包含前两条符合条件的记录。","share streamTable(10000:0, `ts`deviceId`voltage, [TIMESTAMP, SYMBOL, INT]) as device_metrics
setStreamTableFilterColumn(device_metrics, `deviceId)
alert_data = table(10000:0, `ts`deviceId`voltage, [TIMESTAMP, SYMBOL, INT])
","subscribeTable(tableName=`device_metrics, actionName=`alerts, handler=append!{alert_data}, filter=[""D123"",""D456""], msgAsTable=true)
insert into device_metrics values (2023.10.01T09:30:00, ""D123"", 220)
insert into device_metrics values (2023.10.01T09:30:05, ""D789"", 210)
insert into device_metrics values (2023.10.01T09:30:10, ""D456"", 215)
result = select * from alert_data
"
635,赛梅,,sliceByKey,在物联网设备监控系统中，有一个索引内存表t存储设备状态信息，包含列deviceId（设备ID，SYMBOL类型）、zone（区域，SYMBOL类型）、temp（温度，DOUBLE类型）和code（状态码，INT类型）。该表以deviceId和zone为键。请查询设备ID为'D001'且区域为'Z1'的所有记录的temp值，并将结果赋值给变量result。输入数据包含以下行:deviceId为D001、D002、D001对应的zone分别是Z1、Z2、Z1，温度分别为28.5、32.1、29.3。结果应为DOUBLE类型的向量。,"t = indexedTable(`deviceId`zone, 10000:0, `deviceId`zone`temp`code, [SYMBOL,SYMBOL,DOUBLE,INT])
insert into t values(`D001`D002`D001, `Z1`Z2`Z1, 28.5 32.1 29.3, 1 2 0)
","result = sliceByKey(t, (`D001`, `Z1`), `temp`)
"
636,赛梅,,sort_,某物联网设备采集了五个时刻的温度数据，存储在一个名为temps的向量中，数值依次为36.5、38.1、35.8、37.3、39.0。现在需要将这些温度值按从高到低排序，并取出前三高的温度值保存到result中。请编写代码实现该需求。,"temps = [36.5, 38.1, 35.8, 37.3, 39.0]","temps.sort!(false)
result = take(temps, 3)"
637,赛梅,,stateIterate,在物联网设备监控场景中，每个传感器（deviceID）每分钟采集温度（temp）和基础值（init_val），需要计算动态调节指标factor。初始阶段前2分钟直接采用基础值，后续每分钟根据以下规则计算:新factor=0.7*当前温度 + 0.3*最近2个历史factor的移动平均值。请创建包含三组设备数据（deviceA和deviceB各5条记录，init_val全为20，temp分别为1-5和6-10）的输入表，输出计算结果到result。,"data = {
""deviceID"": [""deviceA""]*5 + [""deviceB""]*5,
""temp"": [1,2,3,4,5,6,7,8,9,10],
""init_val"": [20]*10
}
sensor = table(data)
","inputTable = streamTable(1:0, `deviceID`temp`init_val, [SYMBOL,INT,INT])
outputTable = table(100:0, `deviceID`factor, [STRING,DOUBLE])

engine = createReactiveStateEngine(
name=""iotEngine"",
metrics=<[stateIterate(temp, init_val, 2, mavg{,2}, [0.7,0.3])]>,
dummyTable=inputTable,
outputTable=outputTable,
keyColumn=[""deviceID""],
keepOrder=true
)

engine.append!(sensor)
result = select * from outputTable
"
638,赛梅,,stateMavg,实时处理温度传感器数据时，需要按设备ID分组，计算基于历史输出的移动平均（窗口长度为3）。输入表包含时间戳（TIME类型）、设备ID（STRING类型）、温度值（INT类型），变量名为sensorData。输出结果需保留设备ID、时间戳及处理后的温度值（DOUBLE类型），并赋值给变量result。,"sensorData = table(2023.09.01T09:00:00 + 1..6 as time, take(`X01`Y02,6) as device, 10 15 8 20 12 18 as temperature)
","outputTable = table(100:0, `device`time`avg_temp, [STRING,TIME,DOUBLE])
engine = createReactiveStateEngine(
name=""sensor_engine"",
metrics=[<time>, <stateMavg(temperature, 3)>],
dummyTable=sensorData,
outputTable=outputTable,
keyColumn=`device,
keepOrder=true
)
engine.append!(sensorData)
result = outputTable
"
639,赛梅,,suspendRecovery,在物联网高可用集群环境中，系统管理员需要临时中断所有待处理的节点数据同步任务，但需确保正在传输中的设备传感器数据继续完成同步。请编写代码实现该操作，要求处理结束后将执行结果存储在变量result中，已知集群采用raft组架构且需完整生效。,,result = suspendRecovery()
640,赛梅,,test,"在一个物联网设备管理系统中，工程师需要批量执行位于服务器""/sensorTests""路径下的所有压力测试脚本（不包含子目录），同时检查内存使用异常情况，并将完整的测试报告保存到用户主目录下的""sensorTestReport.txt""。请编写执行代码，将操作结果存储在变量result中。（输入:测试目录路径为字符串常量，输出文件路径为相对路径，输出变量为result）",,"result = test(""/sensorTests"", ""sensorTestReport.txt"", true)"
641,赛梅,,tmoving,在物联网设备温度监测中，需要计算每个监测点前两小时内的温度标准差，但需排除每日凌晨3:15至4:45的设备自检时间段。已知设备记录表包含timestamp列（NANOTIMESTAMP类型）和temperature列（FLOAT类型），变量名为ts和temp，如何生成每个时间点的标准差计算结果并存入result变量？,"ts = nanotimestamp(2023.05.01T00:00:00.000000000) + 0..10*3600000000000
temp = 25.0 + rand(5.0, size(ts))
t = table(ts, temp)
","result = select ts, tmoving(std, ts, temp, 2h, [(03:15:00,04:45:00)]) from t
"
642,赛梅,,tmprod,某物联网设备每间隔一段时间采集一次环境变化因子，需要计算每个采集时刻之前4小时内的因子乘积（忽略空值影响）。给定输入表包含时间戳t（TIMESTAMP类型）和因子值x（允许为NULL），输出结果列result为每个时间点的窗口乘积，如何实现？,"t = [2023.01.01T09:00:00, 2023.01.01T09:30:00, 2023.01.01T11:00:00, 2023.01.01T12:15:00, 2023.01.01T13:00:00, 2023.01.01T15:45:00]
x = [2.5, NULL, 1.8, 3.0, NULL, 2.0]
m = table(t as t, x as x)
","result = select t, x, tmprod(t, x, 4h) as result from m
"
643,赛梅,,treasuryConversionFactor,某期货交易所需要评估某国债期货合约的可交割债券折算比率，已知合约的年化票息率为2.5%，可交割债券的年化票息率为2.8%，交割月份至下一派息月份间隔3个月，剩余派息次数为5次，债券按半年付息。请编写计算该比值的代码，输入均为标量数值，结果存入result变量。,"contractCoupon = 0.025
deliverableCoupon = 0.028
monthsToNextCoupon = 3
remainingPayments = 5
frequency = 2","result = treasuryConversionFactor(contractCoupon, deliverableCoupon, monthsToNextCoupon, remainingPayments, frequency)"
644,赛梅,,triggerCheckpointForIMOLTP,在物联网设备实时写入数据时，为确保突发断电情况下内存数据不丢失，需立即强制生成一个持久化检查点，并要求在请求确认受理后得到反馈。假设数据库配置已启用检查点功能且运行正常，请编写满足该需求的代码。输入数据无需准备，输出结果为请求受理状态并赋值给result。,,"result = triggerCheckpointForIMOLTP(true, true)"
645,赛梅,,trueRange,某量化团队需要评估不同传感器每日采集数据的波动情况。给定传感器ID（sensor_id）、日期（date）、采集到的最高值（high）、最低值（low）和结束值（close）构成的表t，每个传感器每天有1条记录。请计算每个传感器每日的实际波动幅度，结果保存为result，包含sensor_id、date和波动幅度三列，并按传感器分组、日期排序。,"sensor_id = take(`S001`S002, 6)
date = 2023.06.01 + 0 0 1 1 2 2
high = [45.8, 82.3, 46.5, 83.0, 47.1, 84.2]
low = [45.0, 81.5, 45.8, 82.4, 46.3, 83.1]
close = [45.5, 82.0, 46.2, 82.8, 46.9, 83.9]
t = table(sensor_id, date, high, low, close)","result = select sensor_id, date, trueRange(high, low, close) as 波动幅度 from t context by sensor_id order by date"
646,赛梅,,wma,"某工厂的两个传感器记录了最近6个时间点的监测数据，传感器1的数值依次为[23.5,24.1,22.8,23.9,24.5,23.7]，传感器2的数值依次为[65,67,63,66,68,64]，存储于矩阵变量sensorData中。请计算每个时间点基于最近4个观测值的加权移动平均，其中较新的数据权重更高。将结果存储在变量result中，要求结果格式与输入一致。","sensorData = matrix([23.5 24.1 22.8 23.9 24.5 23.7], [65 67 63 66 68 64])","result = wma(sensorData, 4)"
647,赛梅,,addMarketHoliday,"某国内市场需要为2023年中秋节调整交易日历，已知9月29日周五休市，但9月30日周六调整为交易日。现有交易日数据存放在变量specialDays中（DATE类型数组，包含[2023.09.29,2023.09.30]），请创建名为MOON的交易日历并指定日期类型为节假日。输出结果存入变量result。","specialDays = [2023.09.29, 2023.09.30]","result = addMarketHoliday(""MOON"", specialDays, ""holidayDate"")"
648,赛梅,,backupTable,"某金融系统需要将分布式数据库中按日期和交易ID分区的当日交易明细表进行归档，归档目录为""/backup/20230821""。已知数据库路径为""dfs://tradeDB""，表名为""dailyTrades""，请编写数据准备和备份代码。"," dolphindb
dbPath = ""dfs://tradeDB""
tableName = ""dailyTrades""
backupDir = ""/backup/20230821""

if(existsDatabase(dbPath)) dropDatabase(dbPath)

n = 500
tradeDate = take(2023.08.21, n)
securityID = rand(""S"" + string(1..100), n)
price = rand(100.0..200.0, n)
qty = rand(100..10000, n)

dateDB = database(, VALUE, 2023.08.21..2023.08.25)
idDB = database(, HASH, [SYMBOL, 10])
db = database(dbPath, COMPO, [dateDB, idDB])

tradeTable = table(tradeDate, securityID, price, qty)
pt = db.createPartitionedTable(tradeTable, tableName, `tradeDate`securityID).append!(tradeTable)
"," dolphindb
result = backupTable(backupDir, dbPath, tableName)
"
649,赛梅,,binsrch,"在物联网设备监控中，系统存储了某天整点采集的温度传感器编号序列sensors（如[1001, 1002,...,1099]）。现需查找编号为1035、1077、1100、1024的四个设备在序列中的位置，并将结果存入result。请编写DolphinDB代码实现，要求输入为有序传感器编号向量sensors和待查编号queryIds，输出为索引向量result。","sensors = 1001..1099
queryIds = [1035, 1077, 1100, 1024]","result = binsrch(sensors, queryIds)"
650,赛梅,,bucketCount,"在交易分析系统中有一个整数向量amounts记录不同订单的金额，格式为[1500,1800,2000,2100,2200,2300,2400,2500,2600]。现需要将有效区间设置成2000到2600美元，将其三等分统计各区间的订单数量，同时要求统计区间外的订单数量。请输出包含边界内外数据的分布统计结果到result。","amounts = [1500,1800,2000,2100,2200,2300,2400,2500,2600]
","result = bucketCount(amounts, 2000:2600, 3, true)
"
651,,,businessQuarterBegin,"某物联网平台记录了设备每日的温度数据，表结构为[date(DATE), deviceId(SYMBOL), temp(DOUBLE)]。需要按每个季度的第一个工作日进行分组，其中季度定义为从3月开始，每隔3个季度进行一次分组，且起始基准点为2020年3月1日。计算每个分组内temp的平均值，结果存入result。输入表示例:2020.04.01对应的分组起始日为2020.03.02（若逢周末则顺延），2020.10.15对应的分组起始日为2020.09.01（当n=3时间隔计算）。","date = 2020.03.15 + 1..10 * 90
deviceId = take(`D001,10)
temp = rand(20.0..35.0,10)
t = table(date, deviceId, temp)
","result = select avg(temp) as avg_temp from t group by businessQuarterBegin(date, 3, 2020.03.01, 3)
"
652,,,cdfChiSquare,"某物联网温度传感器采集到一组误差数据errorValues = [0.5, 1.2, 1.8, 2.5, 3.0]，假设其误差分布的自由度为2。请计算这些误差值的累积分布函数结果，并将结果存储在变量result中（输入为数值型向量，输出为浮点数向量）。","errorValues = [0.5, 1.2, 1.8, 2.5, 3.0]","result = cdfChiSquare(2, errorValues)"
653,,,cdfLogistic,"在评估某金融产品的回报率风险时，假设回报率服从位置参数为3.5、离散系数为1.2的S型分布。给定一组可能的回报率[2.8, 3.0, 3.2, 3.4, 3.6]，要求计算每个回报率对应的累积概率值，并将结果存入result变量。输入数据格式为:标量mean_val=3.5，标量s_val=1.2，向量returnRates=[2.8,3.0,3.2,3.4,3.6]，输出结果为浮点数向量。","mean_val = 3.5
s_val = 1.2
returnRates = [2.8, 3.0, 3.2, 3.4, 3.6]","result = cdfLogistic(mean_val, s_val, returnRates)"
654,,,cds,某投资公司作为信用保护卖方，需计算一份2023年6月1日生效、2025年6月1日到期的CDS合约在2023年5月30日的估值。已知名义本金500万，合约利差200基点，无风险利率2.5%，违约回收率40%，支付频率为季度，使用NYSE市场日历。要求日期调整采用ModifiedFollowing方法，合约规则使用CDS2015标准，日计数基准为实际/360天。输入变量名:settlement=2023.06.01，maturity=2025.06.01，evalDate=2023.05.30，notional=5000000，spread=0.02，riskFree=0.025，recovery=0.4，isSeller=1，frequency=4，calendar='NYSE'。输出结果存入变量result。,"settlement = 2023.06.01
maturity = 2025.06.01
evalDate = 2023.05.30
notional = 5000000.0
spread = 0.02
riskFree = 0.025
recovery = 0.4
isSeller = 1
frequency = 4
calendar = ""NYSE""
convention = ""ModifiedFollowing""
rule = ""CDS2015""
basis = ""Actual360""","result = cds(settlement, maturity, evalDate, notional, spread, riskFree, recovery, isSeller, frequency, calendar, convention,, rule, basis)"
655,,,clearComputeNodeCache,在金融高频交易场景中，某计算节点完成实时订单流分析后，需要立即释放所有暂存的计算中间数据（包括内存和固态硬盘缓存），以确保夜间批量清算任务的资源可用性。已知当前节点无外部输入数据表，请编写对应的系统维护操作代码，执行结果存入变量result。,,"result = clearComputeNodeCache()
"
656,,,coevent,某工厂监控系统记录了多个设备在同一时段的异常报警信息，设备编号存储在device_ids中，报警时刻存储在alert_time里。请统计在3秒时间窗口内同时触发报警的设备组合及其次数，不考虑事件对的顺序差异，结果存入result。已知输入数据格式为device_ids是SYMBOL向量，alert_time是DATETIME向量，输出为包含event1、event2、hits三列的表。,"device_ids = `X`Y`Z`Y`X`Z`Y
alert_time = [2023.01.01T00:00:00, 2023.01.01T00:00:02, 2023.01.01T00:00:03, 2023.01.01T00:00:04, 2023.01.01T00:00:05, 2023.01.01T00:00:07, 2023.01.01T00:00:08]","result = coevent(device_ids, alert_time, 3, false)"
657,,,createTimeBucketEngine,某物联网平台需要按设备ID统计每小时的最大温度及平均湿度，输入数据表名为sensor_data，包含timestamp（TIMESTAMP）、device（SYMBOL）、temp（DOUBLE）、humi（DOUBLE）字段。请使用时间窗口划分引擎实现:当时间首次达到10:00、15:00、20:00时关闭前一窗口计算，输出结果到result变量，要求窗口右闭左开，使用窗口起始时间戳作为输出时间。,"share streamTable(1000:0, `timestamp`device`temp`humi, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE]) as sensor_data
outputTable = keyedTable(`timestamp`device, 10000:0, `timestamp`device`maxTemp`avgHumi, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE])
timeCutPoints = [10:00:00, 15:00:00, 20:00:00]
","result = createTimeBucketEngine(
name=""iotEngine"",
timeCutPoints=timeCutPoints,
metrics=<[max(temp), avg(humi)]>,
dummyTable=sensor_data,
outputTable=outputTable,
timeColumn=`timestamp,
keyColumn=`device,
useWindowStartTime=true,
closed='right'
)
"
658,,,cumavgTopN,"在物联网监控系统中，有一个传感器读数表sensor_readings，包含传感器ID（sensor_id，整型）、温度值（temperature，整型数组[80,92,75,85,88,90,78,95]）和优先级权重（priority，浮点数组[0.7,0.5,0.9,0.6,0.8,0.4,0.3,0.2]）。需要实时计算每个传感器历史数据中优先级最高的前3个温度值的滚动平均值（当数据不足3条时取全部有效值），输出结果列命名为result。","sensor_readings = table([1,2,3,1,2,3,1,2] as sensor_id, [80,92,75,85,88,90,78,95] as temperature, [0.7,0.5,0.9,0.6,0.8,0.4,0.3,0.2] as priority)
","select cumavgTopN(temperature, priority, 3, false) as result from sensor_readings context by sensor_id
"
659,,,deg2rad,"某工业机器人关节在两个方向上的旋转角度（单位:度）被记录为2x2矩阵jointAngles，第一组[33.75,112.5]为横向转动角度，第二组[45.0,270.0]为纵向转动角度。请计算对应的弧度值，结果存储在result变量中。输入矩阵形状为两行两列，输出保持相同结构。","jointAngles = matrix([33.75,112.5], [45.0,270.0])",result = deg2rad(jointAngles)
660,,,deleteRule,"某物联网设备实时监控系统需要移除某一传感器的异常检测规则。已知规则引擎""deviceMonitor""中存储了不同设备ID对应的触发条件，设备ID 1001的规则包含温度超过35度或低于5度的告警，设备ID 1002的规则包含湿度大于80%的告警。请构造测试数据验证删除设备1001的规则后，当该设备上报温度25度时不再触发告警。输入表结构为(deviceID INT,temp DOUBLE,humidity DOUBLE)，输出表需包含原始字段和布尔数组类型的rule列。","deviceList = [1001, 1002]
conditionSets = [
[< temp>35 >, < temp<5 > ],
[< humidity>0.8 > ]
]
ruleMapping = dict(deviceList, conditionSets)

dummySchema = table(10:0, `deviceID`temp`humidity, [INT,DOUBLE,DOUBLE])
outputSchema = table(10:0, `deviceID`temp`humidity`rule, [INT,DOUBLE,DOUBLE,BOOL[]])

createRuleEngine(
name=""deviceMonitor"",
ruleSets=ruleMapping,
dummyTable=dummySchema,
outputColumns=[""deviceID"",""temp"",""humidity""],
outputTable=outputSchema,
policy=""all"",
ruleSetColumn=""deviceID""
)
","# 删除前插入验证数据
engine = getStreamEngine(""deviceMonitor"")
engine.append!(table(1001 as deviceID, 25.0 as temp, 0.65 as humidity))

# 执行规则删除操作
success = deleteRule(""deviceMonitor"", 1001)

# 删除后插入验证数据
engine.append!(table(1001 as deviceID, 25.0 as temp, 0.65 as humidity))
result = select * from outputSchema
"
661,,,eig,"在分析物联网传感器网络时，需要求解三个监测节点组成的对称协方差矩阵。已知传感器协方差矩阵sensorCovMatrix为3x3矩阵:[[2,-1,0],[-1,2,-1],[0,-1,2]]，请对其进行矩阵分解，返回包含主要波动模式的特征向量矩阵和表征能量分布的特征值向量，最终结果字典存放在result变量。","sensorCovMatrix = matrix([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])",result = eig(sensorCovMatrix)
662,,,firstHit,"在实时监测系统中，有一个传感器记录了设备启动后的温度变化数据，格式为包含时间戳和温度值的表，变量名为sensorData。请找出设备运行过程中首次出现温度低于35度的时刻对应的温度值，并将结果赋值给result。输入表结构为(ts timestamp,temp double)，输出应为标量值。","ts = [2023.09.01T08:30:00.000 + 0..6]
temp = [38.5, 37.2, 36.8, 34.9, 34.5, 35.8, 33.0]
sensorData = table(ts, temp)
","result = firstHit(<, sensorData.temp, 35)
"
663,,,fj,在物联网管理中，设备上线表online（结构:id整型设备ID，online_time日期型上线时间）和故障记录表fault（结构:device_id整型设备ID，fault_time日期型故障时间）需要合并。要求保留所有设备记录（包括未上线或无故障的设备），输出字段包含id、online_time、t2_device_id、fault_time，赋值到result变量。,"online = table([101, 102, 103] as id, [2023.01.01, 2023.01.02, 2023.01.03] as online_time)
fault = table([101, 103, 104] as device_id, [2023.01.05, 2023.01.06, 2023.01.04] as fault_time)","result = fj(online, fault, `id, `device_id)"
664,,,getAllDBGranularity,"某金融机构需要检查其DolphinDB节点上不同数据库的分区级别，以便优化数据存储策略。已知节点中存在两个数据库，一个名为""trade_high_freq""，分区粒度为TABLE级别；另一个名为""risk_daily""，分区粒度为DATABASE级别。请编写代码获取这两个数据库的分区粒度信息，结果存入result变量。","login(""admin"", ""123456"")
dbPath1 = ""dfs://trade_high_freq""
dbPath2 = ""dfs://risk_daily""
if existsDatabase(dbPath1):
dropDatabase(dbPath1)
if existsDatabase(dbPath2):
dropDatabase(dbPath2)
database(dbPath1, VALUE, 2023.01.01..2023.12.31, chunkGranularity='TABLE')
database(dbPath2, RANGE, 0..1000, chunkGranularity='DATABASE')
","result = getAllDBGranularity()
"
665,,,getConfigure,在物联网实时数据存储场景中，需要确认当前系统是否启用了流数据表的持久化存储。若已启用，请获取持久化目录的完整路径；否则结果为NULL。输入数据为系统配置中的持久化目录参数，输出结果存储在变量result中。,"setConfig(""persistenceDir"", ""/mnt/iot_stream/persist"")
","result = getConfigure(""persistenceDir"")
"
666,,,getRecentJobs,"在物联网设备数据处理中，系统监测到最近提交的3个批处理作业有两个因网络异常导致失败。请检索这些作业信息，筛选出报错信息包含""timeout""的失败记录。输入数据格式为包含errorMsg字段的表，输出结果为包含异常作业详情的表并赋值给result。","
submitJob(""devJob1"",""sensor_data"", def() {error(""connection timeout"")})
submitJob(""devJob2"",""metrics_agg"", def() {1+1})
submitJob(""devJob3"",""status_check"", def() {error(""request timeout"")})
sleep(1000)
","
result = select * from getRecentJobs(3) where errorMsg like ""%timeout%""
"
667,,,getScheduledJobs,"某物联网平台有多个定时任务用于设备维护，包括每日凌晨的日志清理（jobId为""device_log_clean""）、每周一的健康检查（""health_check_weekly""）和每日中午的数据聚合（""data_agg_daily""）。现需要获取所有每日执行的定时任务详细信息，并将结果存储在变量result中。输入数据格式为上述任务的元信息表，输出结果为包含符合条件任务的表，字段包括userId、jobId、frequency等。","login(""admin"", ""123456"")
def cleanLogs() { /* 清理日志逻辑 */ }
def healthCheck() { /* 健康检查逻辑 */ }
def aggregateData() { /* 数据聚合逻辑 */ }
scheduleJob(jobId=`device_log_clean, jobDesc=""凌晨日志清理"", jobFunc=cleanLogs, frequency='D', scheduledTime=03:30m, startDate=2024.06.01, endDate=2024.12.31)
scheduleJob(jobId=`health_check_weekly, jobDesc=""周健康检查"", jobFunc=healthCheck, frequency='W', days=1, scheduledTime=09:00m, startDate=2024.06.01, endDate=2024.12.31)
scheduleJob(jobId=`data_agg_daily, jobDesc=""中午数据聚合"", jobFunc=aggregateData, frequency='D', scheduledTime=12:15m, startDate=2024.06.01, endDate=2024.12.31)","result = select * from getScheduledJobs() where frequency = ""D"""
668,,,getStreamEngine,"在物联网设备监控场景中，系统已创建响应式状态引擎实时计算每个设备的温度均值与湿度最大值。已知引擎注册名为""DeviceStatsEngine""，输入流表deviceData包含时间戳、设备编号、温度、湿度字段，输出表statsOutput结构为[时间戳,设备编号,avgTemp,maxHumidity]。请编写获取该流引擎句柄的代码，要求结果存储在result变量。","share streamTable(1000:0, `ts`devID`temp`humidity, [TIMESTAMP, SYMBOL, DOUBLE, INT]) as deviceData
statsOutput = table(10000:0, `ts`devID`avgTemp`maxHumidity, [TIMESTAMP, SYMBOL, DOUBLE, INT])
engine = createReactiveStateEngine(name=""DeviceStatsEngine"", metrics=<[avg(temp), max(humidity)]>, dummyTable=deviceData, outputTable=statsOutput, keyColumn=`devID)
subscribeTable(tableName=""deviceData"", actionName=""deviceStats"", offset=0, handler=append!{engine}, msgAsTable=true)
","result = getStreamEngine(""DeviceStatsEngine"")
"
669,,,getTSDBDataStat,在物联网设备监控场景中，当前节点存在一个TSDB引擎的数据库dfs://iot_devices，包含设备状态表device_status和告警日志表alert_log，其中device_status表按设备ID哈希分区。需要统计该数据库下所有表的Level文件数量及未去重的排序键条目总数，输入数据通过prepareCode生成，输出结果记为result变量，要求包含数据库名、chunkID、表名等字段。,"t1 = table(1 2 3 4 5 as device_id, 2023.09.01..2023.09.05 as ts, 75 82 68 90 77 as temperature)
t2 = table(1 2 1 3 2 as device_id, 2023.09.01T10:00..2023.09.01T14:00 as alert_time, '高温' '断连' '低温' '高压' '低压' as alert_type)

dbName = ""dfs://iot_devices""
if existsDatabase(dbName):
dropDatabase(dbName)

db = database(dbName, HASH, [INT, 4], engine='TSDB')

device_status = db.createPartitionedTable(t1, ""device_status"", ""device_id"", sortColumns=`ts)
alert_log = db.createPartitionedTable(t2, ""alert_log"", ""device_id"", sortColumns=`alert_time)

device_status.append!(t1)
alert_log.append!(t2)

flushTSDBCache()
","result = pnodeRun(getTSDBDataStat{,""dfs://iot_devices"",""*""})
"
670,,,getTSDBSortKeyEntry,"在物联网场景中，某设备监控系统的时序数据库包含2023.05.01-2023.05.03期间的温度数据，分布式表device_data按日期分区，sortColumns设置为设备ID和设备时间。现需要分析2023.05.02分区中设备数据按照排序键的存储分布情况，获取该分区对应的sort key组合值及其对应的记录条数，要求结果存储在result变量。已知输入表结构为(DeviceID STRING, Timestamp DATETIME, Temp FLOAT)，数据库路径为""dfs://IoT""，分布式表名为device_data和device_log。","dbPath = ""dfs://IoT""
if existsDatabase(dbPath):
dropDatabase(dbPath)
n = 5000
DeviceID = rand([""D001"",""D002"",""D003"",""D004""], n)
Timestamp = 2023.05.01T00:00:00 + rand(86400*3, n)
Temp = rand(20.0..40.0, n)
schema = table(DeviceID, Timestamp, Temp).sortBy!(`DeviceID`Timestamp)

db = database(dbPath, VALUE, 2023.05.01..2023.05.03, engine='TSDB')

device_data = createPartitionedTable(db, schema, ""device_data"", `Timestamp, 
sortColumns=`DeviceID`Timestamp, keepDuplicates=ALL)
device_data.append!(schema)

device_log = createPartitionedTable(db, schema, ""device_log"", `Timestamp,
sortColumns=`DeviceID`Timestamp, keepDuplicates=ALL)
device_log.append!(schema)

flushTSDBCache()
","chunkList = select chunkId from getChunksMeta() where tableName=""device_data"" limit 1
result = getTSDBSortKeyEntry(chunkList.chunkId[0], ""device_data"")
"
671,,,haStreamTable,在物联网场景中，需要创建一个支持故障切换的设备状态流表。输入表结构包含4列:device_id（SYMBOL）、ts（TIMESTAMP）、temperature（DOUBLE）、voltage（FLOAT），变量名为device_states。要求设置设备编号为主键，数据保留时长为1小时，内存缓存上限20万行，结果表变量名为result。,"colNames = [""device_id"", ""ts"", ""temperature"", ""voltage""]
colTypes = [(""SYMBOL"", 0), (""TIMESTAMP"", 6), (""DOUBLE"", 16), (""FLOAT"", 15)]
empty_tab = table(1:0, colNames, colTypes)
","result = haStreamTable(12, empty_tab, ""device_status"", 200000, ""device_id"", 60)
"
672,,,head,现有某物联网传感器记录表sensorData，包含日期列date（5个连续日期从2023.01.01开始）、设备列device（A-E编号）和温度列temp（25.5到29.5步增1）。请获取该表前3天的设备温度监测记录，结果存入result变量。,"
sensorData = table(2023.01.01..2023.01.05 as date, `DeviceA`DeviceB`DeviceC`DeviceD`DeviceE as device, 25.5..29.5 as temp)
","
result = head(sensorData, 3)
"
673,,,imaxLast,"某温度监测设备记录了6小时内的温度数据存储在向量temps中，数据为[25.5,28.0,28.0,27.5,28.0,26.0]。请输出最后一次出现最高温度的小时索引（从0开始），将结果存储在变量result中。","temps = [25.5, 28.0, 28.0, 27.5, 28.0, 26.0]
","result = imaxLast(temps)
"
674,,,isAlpha,"在设备注册系统中，需要验证新录入的装置编号是否符合纯字母规范。现有批次数据存储在表iot_devices中，包含设备编号列dev_code，数据值为[""ALPHA"", ""B3TA"", ""GAMMA2"", ""DELTA"", ""EPS1L0N""]。请生成包含校验结果的布尔序列，输出变量名为result。","iot_devices = table([""ALPHA"", ""B3TA"", ""GAMMA2"", ""DELTA"", ""EPS1L0N""] as dev_code)","result = select dev_code, isAlpha(dev_code) as validation from iot_devices"
675,,,isLoggedIn,"一个证券交易系统需要根据用户的登录状态控制权限。当前有一个用户名为""TradeUser_003""的客户端尝试执行委托操作。请检查该用户是否具备活跃会话状态。已知用户ID存储在变量userId中，类型为STRING。预期输出结果存储在变量result中，类型为BOOLEAN。","userId = ""TradeUser_003""",result = isLoggedIn(userId)
676,,,isLower,"在物联网设备注册场景中，需要验证一组设备型号编码是否符合全小写字符规范。给定一个包含4个设备型号的字符向量devices=[""ctrl_v2"", ""TEMP-3Z"", ""motion_4g"", """"]，请返回每个元素是否符合全小写字母规则的布尔结果（空字符串应返回false），将最终判断结果存储在result变量中。","devices = [""ctrl_v2"", ""TEMP-3Z"", ""motion_4g"", """"]",result = isLower(devices)
677,,,lasso,在股票分析中，给定某资产五日收益率数据(return)作为目标变量，移动平均线(ma5)和交易量(volume)作为特征，其中不同样本具有权重系数(weight)，要求使用弹性网络算法建立预测模型。输入表包含5行记录，列名为return(数值型)、ma5(数值型)、volume(数值型)、weight(数值型)，输出结果存储在result变量中。,"return = [2.5, -1.3, 3.2, 0.8, -2.1]
ma5 = [10.2, 9.8, 11.5, 10.9, 9.5]
volume = [1200, 950, 1500, 1300, 880]
weight = [1.0, 0.8, 1.2, 0.9, 1.1]
t = table(return, ma5, volume, weight)
","result = lasso(t, `return, `ma5`volume, alpha=0.5, swColName=`weight)
"
678,,,license,"某金融公司节点需要校验指定路径""/license/finance.lic""的授权文件，并使用公钥""/keys/finance_pub.pem""验证真实性，要求关闭文件完整性检查。如何获取该节点的客户名称、绑定CPU状态及许可证到期日等信息，并将结果存储在变量result中？",,"result = license(""/license/finance.lic"", ""/keys/finance_pub.pem"", read=true)"
679,,,log2,"在物联网监控场景中，设备采集的测量值存在2的指数级增长特征。现有设备数据表device_data包含设备ID(device_id)和测量值(measurement)两列，数值分别为(8,32,128)。需要将这些测量值转换为对应的指数基准值，结果保留两位小数，输出列命名为log_value，最终结果存入result。","device_data = table([""A"", ""B"", ""C""] as device_id, [8, 32, 128] as measurement)
","result = select device_id, round(log2(measurement), 2) as log_value from device_data
"
680,,,matchAny,在电子产品评论数据库中，筛选出用户评论中提及产品“电池”或“屏幕”相关问题的记录。输入表包含字段device_id(INT)、model(STRING)、comment(STRING)，变量名为comments_table，需要返回字段完整且结果命名为result。,"device_ids = [1001,1002,1003,2001,2002,3001]
models = ['X10','X10','X10 Pro','Z20','Z20','Z20 Ultra']
comments = [
""这款手机的电池续航非常出色"",
""屏幕显示效果很差，颜色失真"",
""频繁发热影响使用体验"",
""相机对焦速度快但电池容量小"",
""屏幕触控偶尔不灵敏"",
""配送速度快，服务态度好""
]

comments_table = table(device_ids as device_id, models as model, comments as comment)

if existsDatabase(""dfs://deviceDB""):
dropDatabase(""dfs://deviceDB"")
db = database(""dfs://deviceDB"", VALUE, 1000..3000 step 1000, engine=""PKEY"")
pt = createPartitionedTable(db, comments_table, ""reviews"", ""device_id"", 
primaryKey=`device_id, 
indexes={""comment"":""textindex(parser='chinese', full=true, lowercase=true)""}
)
pt.tableInsert(comments_table)
","result = select * from pt where matchAny(textCol=comment, terms=""电池 屏幕"")
"
681,,,mfirstNot,"在分析股票交易量数据时，给定一个时间索引序列vol，其中包含无效记录（NULL）和零值。请找出每个交易日近3日窗口内首次出现的有效交易量（非空且非零）。输入数据格式为日期:2023.01.01到2023.01.05对应值[0,NULL,3,NULL,5]，输出结果存入变量result。","T = 2023.01.01..2023.01.05
vol = indexedSeries(T, [0, NULL, 3, NULL, 5])
","result = mfirstNot(X=vol, window=3, k=0, minPeriods=1)
"
682,,,minuteOfHour,"某物联网平台记录了三个设备报警事件的发生时间，格式为字符串""yyyy.MM.dd HH:mm:ss""。需要从每个时间中提取分钟部分的数值，用于分析故障集中在哪些分钟区间。已知输入数据为[""2023.08.10 09:15:30"", ""2023.08.10 09:46:58"", ""2023.08.10 10:03:22""]，变量名为deviceTime，请输出包含各时间对应分钟数的整型向量，存储到result。","deviceTime = datetimeParse([""2023.08.10 09:15:30"", ""2023.08.10 09:46:58"", ""2023.08.10 10:03:22""], ""yyyy.MM.dd HH:mm:ss"")",result = minuteOfHour(deviceTime)
683,,,movingWindowIndex,在物联网温度监测场景中，设备每小时采集一次温度数据，形成向量tempData（长度为10）。现需为每个窗口生成对应的索引位置，窗口大小为4小时，且每个窗口必须固定长度为4。初始窗口不足时用NULL填充。请编写代码实现，输出结果赋值给result。,"tempData = 25..34
","result = movingWindowIndex(tempData, 4, true)
"
684,,,mpercentileTopN,在物联网监控系统中，有10个温度传感器每小时采集一次数据，其中部分设备存在缺失值。现需要根据湿度指标对温度数据进行筛选:在每5小时的滑动窗口内，取湿度最高的前2个温度值，计算其25%分位数（当分位点位于两数之间时取中点）。请给出实现此需求的代码，已知输入向量为temperature（含空值的FLOAT类型）和humidity（含空值的INT类型），输出结果存入result变量。,"temperature = [72.5, 68.0, None, 75.3, 70.1, 73.8, 69.5, 71.2, None, 74.6]
humidity = [45, 52, 60, None, 55, 48, 58, 50, 62, 57]
","result = mpercentileTopN(temperature, humidity, percent=25, window=5, top=2, interpolation=""midpoint"", ascending=true)
"
685,,,mr,有三个物联网设备分别记录了不同时间段内的温度数据，存储为表device1、device2、device3，每个表包含timestamp和temperature两列。需要计算所有设备的温度极差（整体最大值与最小值的差值）。输入数据格式为数据源列表ds，输出结果为标量数值存储在result。,"device1 = table(2023.01.01T00:00:00 + 0..9 as timestamp, 18.2 19.1 17.8 20.5 22.3 21.7 19.9 18.6 17.2 20.0 as temperature)
device2 = table(2023.01.01T10:00:00 + 0..9 as timestamp, 24.5 23.8 22.1 25.0 26.3 24.9 23.5 22.7 21.8 25.5 as temperature)
device3 = table(2023.01.01T20:00:00 + 0..9 as timestamp, 15.3 16.8 14.9 17.2 18.1 16.5 15.8 17.6 16.9 18.3 as temperature)
ds = [sqlDS(<select * from device1>), sqlDS(<select * from device2>), sqlDS(<select * from device3>)]
","mapFunc = def(t): return [max(t.temperature), min(t.temperature)]
reduceFunc = def(x,y): return [i > j ? i : j for i,j in zip(x,y)], [i < j ? i : j for i,j in zip(x,y)]
finalFunc = def(arr): return arr[0] - arr[1]
result = mr(ds, mapFunc, reduceFunc, finalFunc)
"
686,,,mskewTopN,"物联网设备监控中需要分析温度异常波动。给定设备时序数据表包含时间戳(time)、设备编号(device)、温度读数(temp)、电源电压(volt)，请对每个设备按500毫秒时间窗口，取电压最高的前3个温度值，计算其分布的偏移程度。输入表结构为(time TIMESTAMP, device SYMBOL, temp DOUBLE, volt DOUBLE)，输出结果存入result变量。","time = 2023.08.15T09:30:00.000 + 200 * 0..9
device = take(`A`B, 10)
temp = 35.1 34.9 36.2 33.8 34.5 35.9 34.2 36.8 33.5 35.4
volt = 4.8 5.1 4.6 5.3 5.0 4.7 5.2 4.9 5.4 5.1
t = table(time, device, temp, volt)
","result = select mskewTopN(temp, volt, 500, 3) as skewness from t context by device
"
687,,,msumTopN,在物联网场景中，每个传感器每30分钟采集一次环境噪声等级（分贝）和功耗数据。请计算每个传感器在最近3个采样窗口内，噪声最高的两次功耗累计值。输入表device_log包含列:设备编号device_id，采集时间collect_time，噪声等级noise_db，功耗power_consumption。输出结果需包含原始时间戳和计算结果result，并按设备分组呈现。,"device_log = table(take(`X001`Y002, 12) as device_id, 2023.06.01T09:00:00 + 30*60*(0..11) as collect_time, rand(65..95,12) as noise_db, rand(80..120,12)*0.1 as power_consumption)","result = select device_id, collect_time, msumTopN(power_consumption, noise_db, 3, 2, false) as result from device_log context by device_id"
688,,,next,"某物联网设备每半小时采集一次室内温度数据。给定包含连续5次温度值的向量temps，格式为[36.5,37.1,36.8,37.5,37.2]。要求生成新的序列展示每个时段的温度变化量，即当前温度与下一时段温度的差值，最后时段留空，结果存储到result变量。","temps = [36.5, 37.1, 36.8, 37.5, 37.2]",result = temps - next(temps)
689,,,quarterOfYear,"某物联网平台记录了设备2023年的四次维护日期，需统计每个维护所在的季度。给定DATE类型数组dates为[2023.01.15, 2023.04.20, 2023.09.05, 2023.12.12]，请输出各日期对应的季度数，结果为整型向量result。","dates = [2023.01.15, 2023.04.20, 2023.09.05, 2023.12.12]",result = quarterOfYear(dates)
690,,,readLine,"处理工业物联网场景中的温度监测日志文件'temp_log.txt'，每行记录格式为'设备编号,温度值'。如何按顺序读取全部监测记录并将结果拼接成分号分隔的字符串？已知输入文件包含四行数据，文件操作变量命名为tempFile，最终输出结果存入变量result。","
tempHandle = file(""temp_log.txt"", ""w"")
records = [""TS-001,35.6"", ""TS-002,34.8"", ""TS-003,36.2"", ""TS-005,33.9""]
each(writeLine, tempHandle, records)
close(tempHandle)
","
tempFile = file(""temp_log.txt"")
result = []
do {
line = tempFile.readLine()
if(isNull(line)) break
result.append!(line)
} while(true)
result = concat(result, ""; "")
"
691,,,regexFindStr,"现有三条交易日志记录，每条记录的格式为字符串，包含失败的交易ID（格式为TX后接数字和字母组合，例如TX12AB）。需要从每条记录中提取所有失败的交易ID，结果存储在变量result中。输入数据为向量tradeLogs=[""交易失败:ID=TX45GH错误"", ""错误ID=TX67IJ; ID=TX89KL"", ""ID=TX12MN无效操作""], 输出结果为包含所有匹配ID的元组。","tradeLogs = [""交易失败:ID=TX45GH错误"", ""错误ID=TX67IJ; ID=TX89KL"", ""ID=TX12MN无效操作""]","result = regexFindStr(tradeLogs, `ID=([A-Z0-9]{5})`, false)"
692,,,replace_,"在股票成交记录表中，状态字段用数字0表示挂单，1表示已撮合。现有包含代码、价格、状态的输入表t，请将状态字段的数值转换为对应的中文描述，0改为""挂单""，1改为""撮合成功""，输出结果需保留原表结构。输入表结构:t(sym SYMBOL,price DOUBLE,status INT)，输出变量名为result。","t = table(['ST001', 'ST002', 'ST003'] as sym, [45.3, 46.1, 44.9] as price, [0, 1, 0] as status)
","replace_(t, `status, 0, ""挂单"")
replace_(t, `status, 1, ""撮合成功"")
result = t
"
693,,,resample,某只股票的交易数据记录为每分钟的收盘价，时间从09:30开始连续15分钟，数值为1到15的整数。需要将价格序列按5分钟窗口进行分割，找出每个时段内的最高成交价，并以左边界时间戳标记结果。,"index = temporalAdd(2023.01.01T09:30:00, 0..14, ""m"")
s = indexedSeries(index, 1..15)
","result = s.resample(rule=""5min"", func=max)
"
694,,,rowCount,"在物联网设备监测中，某工作站记录了三个传感器在连续三日的采样数据（包含空值）。请计算每日实际采集到有效数据的传感器数量。输入表t结构:timeCol(DATE)包含2023.01.01到2023.01.03，sensor1(DOUBLE)为[10.5,NULL,9.8]，sensor2(DOUBLE)为[NULL,15.2,12.1]，sensor3(DOUBLE)为[8.3,NULL,7.5]，输出结果变量名为result的整型向量。","timeCol = 2023.01.01..2023.01.03
sensor1 = [10.5, NULL, 9.8]
sensor2 = [NULL, 15.2, 12.1]
sensor3 = [8.3, NULL, 7.5]
t = table(timeCol, sensor1, sensor2, sensor3)","result = rowCount(t.sensor1, t.sensor2, t.sensor3)"
695,,,rowPrev,"某物联网平台每小时记录三个传感器的温度值，存储在列式元组tempData中。输入数据为[[31.2,30.8,29.7],[28.4,27.9,NULL]]，要求生成新的列式元组，每行元素右移一位，首位用浮点型默认值填充。输出结果存入result变量。","tempData = [[31.2,30.8,29.7],[28.4,27.9,NULL]]
tempData.setColumnarTuple!()",result = rowPrev(tempData)
696,,,rowStdp,"某物联网公司需要评估每小时三个传感器读数的稳定性，现有表sensor_data包含5小时数据，结构为hour(1-5)、sensorA([23.5,25.8,NULL,28.4,30.1])、sensorB([18.9,20.3,22.6,24.0,NULL])、sensorC([15.3,17.2,19.5,NULL,21.8])。请生成每行三个传感器值的总体标准差向量，结果存入变量result。","sensor_data = table(1..5 as hour, [23.5, 25.8, NULL, 28.4, 30.1] as sensorA, [18.9, 20.3, 22.6, 24.0, NULL] as sensorB, [15.3, 17.2, 19.5, NULL, 21.8] as sensorC)","result = rowStdp(select sensorA, sensorB, sensorC from sensor_data)"
697,,,rowVar,某环保实验室每小时记录三个不同位置的PM2.5浓度数据，数据存储在表pmReadings中，包含时间段列period和监测点数据p1、p2、p3。请计算每小时三个监测点浓度的样本差异程度（平方离差的平均值），结果存入变量result。,"pmReadings = table(1..4 as period, [35.2, 38.1, 33.9, 41.5] as p1, [28.4, 31.7, NULL, 39.0] as p2, [42.8, 36.5, 30.2, 44.1] as p3)","result = rowVar(pmReadings.p1, pmReadings.p2, pmReadings.p3)"
698,,,saveModel,"需要将训练好的客户购买行为预测模型持久化存储，输入数据表包含年龄、收入、是否购买三列（变量名t，格式:table(age,income,purchase)），输出结果变量名为result，要求将模型文件保存至指定路径""/data/models/purchaseModel.bin""","age = rand(25..60, 100)
income = rand(5000..25000, 100)
bias = 15
coef_age = 0.3
coef_income = -0.0002
err = norm(0, 5, 100)
score = bias + coef_age*age + coef_income*income + err
purchase = array(BOOL).append!(score > 30)
t = table(age, income, purchase)
","model = randomForestClassifier(sqlDS(<select * from t>), `purchase, `age`income)
result = saveModel(model, ""/data/models/purchaseModel.bin"")
"
699,,,setTimeoutTick,某金融交易集群在运维过程中，发现网络波动可能导致控制节点误判数据节点状态。现在需要将判断节点存活的时间窗口调整为2分钟，管理员应在控制节点执行怎样的操作？输入数据无需准备，执行结果需存入result变量。,,result = setTimeoutTick(120)
700,,,stopClusterReplication,某金融机构的主集群已配置异步复制到从集群以进行实时数据同步。由于突发系统维护需求，需立即暂停所有新的复制任务投递和接收，但允许已执行的任务继续完成。请编写执行该操作的代码，无需准备额外输入数据，操作结果保存到变量result中。,,result = stopClusterReplication()
701,,,subscribeTable,某证券公司需要实时监控股票行情，当接收到实时报价数据后，每5秒统计一次各股票的最高价和最低价。输入数据来自名为quote_stream的共享流表，包含ts（时间戳）、symbol（股票代码）、price（价格）三个字段。请创建订阅任务将计算结果写入result_table表中，该表结构包含begin_time（起始时间）、symbol、high（最高价）、low（最低价）字段。,"
// 创建原始报价流表
colNames = `ts`symbol`price
colTypes = [TIMESTAMP,SYMBOL,DOUBLE]
enableTableShareAndPersistence(table=streamTable(1000000:0, colNames, colTypes), tableName=""quote_stream"", cacheSize=1000000)

// 创建结果存储表
result_table = keyedTable(`begin_time`symbol, 1000000:0, `begin_time`symbol`high`low, [TIMESTAMP,SYMBOL,DOUBLE,DOUBLE])
","
// 定义处理函数
def calcHighLow(mutable resultTbl, msg){
tmp = select max(price) as high, min(price) as low, symbol 
from msg 
group by symbol, interval(ts, 5s, ""prev"") as begin_time
resultTbl.append!(tmp)
}

// 创建订阅（每500条或5秒触发处理）
subscribeTable(
tableName=""quote_stream"",
actionName=""realTimeStats"",
handler=calcHighLow{result_table},
msgAsTable=true,
batchSize=500,
throttle=5,
reconnect=true
)

// 结果引用
result = result_table
"
702,,,symbol,"在分析股票行业分类数据时，现有数据表包含字符串格式的分类代码列industry_str（如""Bank35""），需要将其转换为高效存储的类型向量。输入表结构为(industry_str STRING)，输出结果需存入变量result。","industryStr = [""Bank""+string(rand(10..50,8)), ""Tech""+string(rand(30..60,12))].flatten()
t = table(industryStr as industry_str)",result = symbol(t.industry_str)
703,,,symmetricDifference,"在分析两支物联网设备ID分布时，需要找出两个监控区域独有的设备编号。已知区域A包含设备[1001, 1003, 1005, 1007]，区域B包含设备[1002, 1003, 1005, 1009]。如何快速生成仅在单一区域出现的设备集合，结果存储在result中？（输入格式:area_devices为集合，输出格式:集合）","areaA = set([1001, 1003, 1005, 1007])
areaB = set([1002, 1003, 1005, 1009])",result = areaA ^ areaB
704,,,t3,某工业传感器每2分钟记录一次设备的振动强度数据，存储在名为vibration的数组中（包含12个浮点数值）。需要基于最新的5个观测点，使用三重指数平滑算法计算每个时刻的趋势值，其中趋势平滑因子设置为0.7，最终结果存入变量result。,vibration = 68.3 67.8 68.5 69.1 68.9 69.4 70.2 69.7 70.5 71.0 70.8 70.6,"result = t3(vibration, 5, 0.7)"
705,,,tmkurtosisTopN,在物联网设备监测场景中，假设有一个设备每间隔一段时间记录一次温度值（X）和信号强度（S）。现在需要分析最近的5个时间窗口中，选取信号强度最高的前2个温度值计算其峰度（无偏估计）。输入数据格式为:时间列T（类型为DATETIME），温度值X（INT类型向量，存在空值），信号强度S（INT类型向量，存在空值）。输出结果保存到变量result中，要求峰度计算时采用降序排序并排除S为空值对应位置的X。,"T = 2023.01.03T09:00:00 + 1..10
X = [23, 25, 24, 00, 22, 26, 21, 27, 28, 20]
S = [5, 8, 00, 3, 2, 00, 4, 1, 6, 7]
t = table(T as timestamp, X as temperature, S as signal)
","result = tmkurtosisTopN(t.timestamp, t.temperature, t.signal, 5, 2, false, false)
"
706,,,tmTopRange,某物联网传感器每半小时采集一次环境指标，部分数据因传输问题缺失。假设时间列为ts，数值列为val，其中val包含NULL和浮点数。请计算每个时刻前2小时内指标持续攀升的连续次数，将结果存入result变量。输入数据格式:ts为DATETIME类型向量，val为DOUBLE类型向量；输出格式为整型向量，变量名result。,"ts = 2023.05.15T09:00:00 + 0..5 * 30m
val = [NULL, 3.5, 4.0, NULL, 5.2, 6.1]","result = tmTopRange(ts, val, 2h)"
707,,,tmwsumTopN,"在量化交易中，需要根据传感器采集的实时指标计算设备状态特征。给定一个包含时间戳（time）、电流强度（current）、电压值（voltage）、信号质量（quality）的数据表，要求按照最近4小时的时间窗口，选取信号质量最高的3条记录，计算这些记录中电流与电压的加权内积。输入数据形如:time为[2023.06.01T09:00:00, 09:30:00, 10:15:00, 10:45:00, 11:30:00]，current为[2.1, 3.4, 1.8, 4.6, 2.9]，voltage为[220, 215, 218, 210, 225]，quality为[78, 92, 85, , 88]（注意存在空值），最终结果存储在result变量中。","time = [2023.06.01T09:00:00, 2023.06.01T09:30:00, 2023.06.01T10:15:00, 2023.06.01T10:45:00, 2023.06.01T11:30:00]
current = [2.1, 3.4, 1.8, 4.6, 2.9]
voltage = [220, 215, 218, 210, 225]
quality = [78, 92, 85, int(), 88]
t = table(time as time, current as current, voltage as voltage, quality as quality)
","result = select tmwsumTopN(time, current, voltage, quality, 4h, 3) as topN from t
"
708,,,trim,"在物联网设备管理中，处理设备ID时发现有些记录前后包含多余空格，需要清理。给定一个字符串向量deviceIds，包含三个元素:""  D123  "", ""E456 "", ""  F789""。请生成代码去掉每个元素首尾的空白字符，将处理结果存储在result变量中，要求输出格式为[""D123"",""E456"",""F789""]。","deviceIds = [""  D123  "", ""E456 "", ""  F789""]",result = trim(deviceIds)
709,,,trima,某股票分析场景中，给定过去7个交易日的收盘价数据，需要计算窗口长度为4的对称加权移动平均值来平滑价格波动。输入数据为包含日期（date列）和收盘价（close列）的表，变量名为dailyPrices。输出结果存储在result中，要求保留三位小数。,"dailyPrices = table(2023.10.01+0..6 as date, [25.0, 25.5, 26.2, 25.8, 24.9, 24.5, 23.8] as close)","result = round(trima(dailyPrices.close, 4), 3)"
710,,,with,在物联网设备的传感器数据中，需要统计每个设备最近3次的温度读数平均值，并筛选出平均值超过35℃的设备。已知设备信息表device_info包含设备ID（device_id）、型号（model）字段，传感器数据表sensor_data包含设备ID（device_id）、时间戳（ts）、温度（temp）字段。请构造查询语句，要求先创建中间临时表存储带设备型号的最近3次温度数据，最终输出设备型号及其平均温度，结果变量名为result。,"device_info = table([""D001"",""D002"",""D003""] as device_id, [""A100"",""B200"",""A100""] as model)
sensor_data = table([""D001"",""D001"",""D001"",""D002"",""D002"",""D003"",""D003""] as device_id, 2024.01.01T00:00:00+(0..6) as ts, [36.5,35.8,38.2,34.1,32.9,37.4,36.0] as temp)
","result = with device_temp as (
select device_info.model, sensor_data.temp 
from sensor_data inner join device_info 
on sensor_data.device_id = device_info.device_id 
context by sensor_data.device_id 
limit -3
)
select model, avg(temp) as avg_temp 
from device_temp 
group by model 
having avg_temp > 35
"
711,,,wsum,"在物联网系统中，有三个传感器的测量值（浮点型向量sensorReadings=[8.4,9.1,7.3]）需要与对应的质量系数（浮点型向量qualityFactors=[0.2,0.5,0.3]）进行加权融合，请计算质量加权的综合监测值并将结果存入result变量，输出为DOUBLE型标量。","sensorReadings = [8.4, 9.1, 7.3]
qualityFactors = [0.2, 0.5, 0.3]","result = wsum(sensorReadings, qualityFactors)"
712,,,zigzag,"给定某物联网设备连续采集的振动幅度数据，数据存储在名为`sensor`的向量中，数值序列为[12.5, 15.0, 14.8, 17.2, 16.9, 20.5, 18.3, 22.0, 19.5]。需要找出振动强度的关键转折点，要求过滤掉回撤幅度小于5%的波动，当出现连续相同极值时保留首个极值点。最终输出一个与输入等长的向量，仅突出显示符合条件的极值数据，其余位置置空，结果存储在result变量。","sensor = [12.5, 15.0, 14.8, 17.2, 16.9, 20.5, 18.3, 22.0, 19.5]
","result = zigzag(sensor, change=5, percent=true, retrace=true, lastExtreme=false)
"
713,,,acosh,"在物联网设备的温度异常检测中，测得三个监测点的散热系数分别为[2.5, 3, 4.5]。需要将这些数值转换为反双曲余弦特征值用于后续分析，输入数据存储在向量thermal_coeff中，输出结果需要存入变量result。请实现该数据处理过程。","thermal_coeff = [2.5, 3, 4.5]
","result = acosh(thermal_coeff)
"
714,,,addNode,"在物联网边缘计算场景中，需要为实时传感器分析集群新增两个计算节点，具体要求如下:
- 节点IP为192.168.2.100和192.168.2.101
- 端口分别为9100和9200
- 节点别名为node5和node6
- 要求加入名为""sensor_group""的计算组
- 需要自动保存节点配置信息
请编写满足上述需求的分布式系统配置代码，最终将结果保存到变量result。",// 节点配置不需要额外数据准备，参数直接在函数中指定,"result = addNode([""192.168.2.100"",""192.168.2.101""], [9100,9200], [""node5"",""node6""], true, `computenode, ""sensor_group"")"
715,,,addVolumes,"某金融数据库集群需要实时扩展存储容量以处理新增的市场行情数据，需立即生效两个新的磁盘卷路径""/finance/quote/2024""和""/finance/tick/2024""而不中断服务。已知输入数据格式为字符串向量volumePaths包含这两个路径，输出结果存储在变量result中，该如何操作？","volumePaths = [""/finance/quote/2024"", ""/finance/tick/2024""]",result = addVolumes(volumePaths)
716,,,autocorr,某传感器每天记录一次温度数据，形成时间序列temperature（1000个元素，类型为DOUBLE）。现需分析当前温度与三天前温度的相关性，要求使用整个序列的均值计算。请编写代码实现并保存结果为result。,"n = 1000
temperature = array(DOUBLE, n, n, NULL)
temperature[0] = 25.0  # 初始温度
r = rand(0.5, n) - 0.25  # 生成随机波动[-0.25,0.25)

for(i in 0:(n-2)){
# 模拟温度变化的AR(1)过程，保持正相关性
temperature[i+1] = 0.9 * temperature[i] + r[i]
}
","result = autocorr(temperature, 3)
"
717,,,base64Decode,某物联网设备采集的传感器数据以二进制格式0x5A3D存储，并进行了Base64编码后得到字符串变量encoded_data。请将其解码还原为原始的二进制数据，并将结果存储在变量result中。输入数据格式为字符串标量，输出为BLOB标量。,"encoded_data = base64Encode(blob(""0x5A3D""))",result = base64Decode(encoded_data)
718,,,binaryExpr,"给定一个物联网设备表，包含设备ID列（deviceID）。需要为每个设备ID添加固定前缀""Sensor_""，生成完整的设备编号列。输入表变量名为devices，包含字符串类型列deviceID，输出结果为添加前缀后的字符串向量，存储在变量result中。",devices = table(`A001`B002`C003 as deviceID),"expr = binaryExpr(""Sensor_"", sqlCol(""deviceID""), +)
result = sql(select=expr, from=devices).eval()"
719,,,bondDirtyPrice,某贴现债券的结算日期为2023年5月15日，到期日为2025年5月15日，票面利率为0%，年收益率为4%，采用实际/360日计数方式。请计算该债券每100元面值的当前应计价格，结果保留到result变量。,"settlement = 2023.05.15
maturity = 2025.05.15
coupon = 0.0
yield = 0.04
basis = 2","result = bondDirtyPrice(settlement, maturity, coupon, yield, basis=basis, bondType=1)"
720,,,bondDuration,现有一笔零息债券，结算日为2023年5月15日（变量名settle_date），到期日为2035年8月20日（maturity_date），票面利率为0%（coupon_rate），年收益率为4%（yield_rate），日计数基准采用实际/365。请计算该债券的麦考利久期，并将结果存入变量result。,"settle_date = 2023.05.15
maturity_date = 2035.08.20
coupon_rate = 0.0
yield_rate = 0.04
basis_type = 3
bond_type = 2
","result = bondDuration(settle_date, maturity_date, coupon_rate, yield_rate, basis=basis_type, bondType=bond_type)
"
721,,,byRow,给定一个包含三支股票过去五个交易日收盘价的矩阵priceMatrix，其中每行代表一支股票，每列对应一个交易日。需要计算每支股票在这五个交易日内的价格波动率，使用标准差作为衡量指标，并将结果存储在变量result中。输入矩阵格式为3行5列的矩阵，变量名为priceMatrix；输出结果为长度为3的向量。,"priceMatrix = matrix([12.5 13.2 14.0 12.8 13.5], [15.0 14.8 15.2 14.5 15.1], [22.3 21.9 22.5 23.0 22.7])","result = byRow(std, priceMatrix)"
722,,,case,在物联网设备监控场景中，需要根据传感器温度值将数据划分为三个等级（低温:temp<10，正常:10≤temp≤30，高温:temp>30），并统计各等级的平均湿度。输入表t包含timestamp（时间戳）、deviceId（设备ID）、temp（温度）、humidity（湿度）四列，输出结果应包含class（等级标签）和avgHumidity（平均湿度）两列，存储到变量result。,"t = table(2023.01.01T00:00:00 + 0..6 as timestamp, `A`B`A`C`B`A`C as deviceId, 5 15 25 35 8 32 28 as temp, 45 60 65 70 50 75 55 as humidity)
","result = select avg(humidity) as avgHumidity from t group by case when temp <10 then ""低温"" when temp <=30 then ""正常"" else ""高温"" end as class
"
723,,,cells,给定一个4行4列的传感器温度矩阵sensorData（元素按行填充1-16），需依次提取第1行第2列、第3行第4列、第4行第1列的温度读数组成结果向量，矩阵变量名为sensorData，结果存入result。,sensorData = (1..16).reshape(4:4),"result = cells(sensorData, [0,2,3], [1,3,0])"
724,,,cols,某物联网平台采集的温度监测数据表tempData包含设备ID、时间戳、温度值、湿度值四个字段，共有1000条记录。请统计该表包含的字段总数，并将结果存入变量result。,"tempData = table(take(`Device001, 1000) as deviceID, 2023.01.01T00:00:00 + 1..1000 as timestamp, rand(20.0..30.0, 1000) as temperature, rand(40.0..60.0, 1000) as humidity)
","result = cols(tempData)
"
725,,,cos,"设备传感器采集到三个时间点的弧度值，需计算其对应的余弦值以分析振动幅度变化。输入数据存储在名为angles的向量中，值为[0.5, 1.0, 1.5]。请将其转换为对应的余弦值序列存入result变量。","angles = [0.5, 1.0, 1.5]
","result = cos(angles)
"
726,,,covar,某气象站记录了三个不同地点在过去一周内每天的最高温度和最低温度，数据分别存储为3x3的矩阵tempHigh（各地点前三天的最高温）和tempLow（对应最低温）。需要分析这两组温度数据之间的协方差，结果保存到变量result中。,"tempHigh = matrix(28 32 29, 26 30 27, 24 28 25)
tempLow = matrix(18 22 20, 16 21 18, 15 19 16)","result = covar(tempHigh, tempLow)"
727,,,crc32,"在物联网设备管理中，有一个包含3个设备标识符的列表`deviceList`（类型为SYMBOL向量，值为[""DX1001"", ""SENSOR_A2"", ""NODE_5F""]）和初始校验值100。需要为每个设备标识生成数值型校验码，最终将计算结果存储在变量result中。请编写实现该需求的代码。","deviceList = [`DX1001, `SENSOR_A2, `NODE_5F]
initialSum = 100
","result = crc32(deviceList, initialSum)
"
728,,,create,在金融交易场景中，需要创建一个分布式数据库存储每日各股票的行情数据。数据库按交易日期的值范围（2023.01.01至2023.01.31）和股票代码的HASH（分20个分区）进行组合分区，使用TSDB引擎。在该库中创建名为'quotes'的表，结构包含交易日期（DATE类型，使用delta压缩）、股票代码（SYMBOL类型）、收盘价（DOUBLE）和成交量（INT）。分区列为日期和股票代码，每个分区内按股票代码和交易日期排序，仅保留同一分区内重复数据的最新记录。请编写代码实现并将结果表对象赋值给result。,"if(existsDatabase(""dfs://trade"")) dropDatabase(""dfs://trade"")
","create database ""dfs://trade"" partitioned by VALUE(2023.01.01..2023.01.31), HASH([SYMBOL,20]), engine='TSDB'
create table ""dfs://trade"".""quotes""(
tradeDate DATE[compress=""delta""],
symbol SYMBOL,
close DOUBLE,
volume INT
)
partitioned by tradeDate, symbol,
sortColumns=`symbol`tradeDate,
keepDuplicates=LAST
result = loadTable(""dfs://trade"", ""quotes"")
"
729,,,createIMOLTPTable,"在物联网场景中，需要创建一个实时存储设备监测数据的表，要求使用复合主键区分不同设备的每分钟数据，建立两个二级索引:一个是允许重复的温度字段索引，另一个是电压与时间组合的唯一性索引。已知数据库句柄变量名为devDB，输入表结构为[devID,timestamp,temp,voltage](LONG,TIMESTAMP,DOUBLE,DOUBLE)，输出变量需命名为result，请写出实现代码。","devDB = database(directory=""oltp://iot_devices"", partitionType=VALUE, partitionScheme=1001..2000, engine=""IMOLTP"")
schemaTable = table(1:0, [""devID"",""timestamp"",""temp"",""voltage""], [LONG,TIMESTAMP,DOUBLE,DOUBLE])","result = createIMOLTPTable(
dbHandle=devDB,
table=schemaTable,
tableName=""device_metrics"",
primaryKey=[""devID"",""timestamp""],
secondaryKey=[""temp"", [""voltage"",""timestamp""]],
uniqueFlag=[false, true]
)"
730,,,createReactiveStateEngine,"某证券交易系统需要实时追踪每支股票最近5次报价的移动平均和标准差，并只保留交易时间在09:30:00至11:30:00之间的计算结果。已知输入表tradeStream包含[sym,time,price]字段，类型为[SYMBOL,TIME,DOUBLE]，输出表outputTable需要存储[sym,time,ma,mstd]字段。请实现该流式处理逻辑，最终计算结果存储到result变量。","sym = take(`AAPL`MSFT, 10)
time = 09:25:00.000 + 1..10 * 900
price = 150.0 + cumsum(rand(2.0,10)-1.0)
tradeStream = table(sym, time, price)

outputTable = table(100:0, `sym`time`ma`mstd, [SYMBOL,TIME,DOUBLE,DOUBLE])
","rse = createReactiveStateEngine(
name=""stockAnalysis"",
metrics=[<time>, <mavg(price,5)>, <mstd(price,5)>],
dummyTable=tradeStream,
outputTable=outputTable,
keyColumn=""sym"",
filter=<time between 09:30:00.000 : 11:30:00.000>
)
rse.append!(tradeStream)
result = outputTable
"
731,,,createSnapshotJoinEngine,在物联网场景中，设备状态表和传感器读数表需要实时关联。状态表包含设备ID、型号、状态值，传感器表包含设备ID、型号、温度读数。每个设备组的历史状态需要全部保留，但传感器只取最新读数。要求输出结果包含设备双时间戳（数据到达时间）、合并后的状态系数（状态值*0.8）和温度读数，结果存储在关联结果表中。,"share streamTable(1:0, `arrivalTime`devID`model`status, [TIMESTAMP, INT, SYMBOL, DOUBLE]) as deviceStatus
share streamTable(1:0, `collectTime`devID`type`temp, [TIMESTAMP, INT, SYMBOL, DOUBLE]) as sensorReadings
output = table(100:0, [`devID`model, `statusTime`sensorTime, `adjStatus`temperature], [INT, SYMBOL, TIMESTAMP, TIMESTAMP, DOUBLE, DOUBLE])
","metrics = [<status*0.8>, <temp>]
engine = createSnapshotJoinEngine(
name=""iotMonitor"",
leftTable=deviceStatus,
rightTable=sensorReadings,
outputTable=output,
metrics=metrics,
matchingColumn=[[`devID`,`model],[`devID`,`type]],
keepLeftDuplicates=True,
keepRightDuplicates=False,
isInnerJoin=False
)

# 模拟设备状态更新
statusData = table(2023.09.01T09:00:00.000+1..6 as arrivalTime, [1,1,2,2,3,3] as devID, take(`A550`B200,6) as model, rand(100.0,6) as status)
appendForJoin(engine, True, statusData)

# 模拟传感器数据到达
sensorData = table(2023.09.01T09:00:00.500+1..4 as collectTime, [1,2,2,3] as devID, take(`A550`B200,4) as type, rand(50.0,4) as temp)
appendForJoin(engine, False, sensorData)

result = select * from output
"
732,,,createTable,"在物联网场景中，需要为智能工厂的2000台设备创建元数据存储表，包含设备ID（符号型）、设备类型（符号型）、地理坐标（双精度浮点元组）和安装日期（日期型）四个字段。要求创建基于设备类型分区的维度表，数据库路径为""dfs://factory""，表名为""device_meta""，请编写相应的初始化代码并验证表结构是否正确。","def initDeviceDatabase(dbPath, tbName){
if(existsDatabase(dbPath)){
dropDatabase(dbPath)
}
db = database(dbPath, VALUE, `A`B`C`D)
t = table(1:0, `device_id`device_type`location`install_date, [SYMBOL,SYMBOL,DOUBLE[],DATE])
db.createTable(t, tbName)
}

dbPath = ""dfs://factory""
tbName = ""device_meta""
initDeviceDatabase(dbPath, tbName)","result = loadTable(dbPath, tbName).schema().colDefs"
733,,,cumcovar,在物联网设备监控中，传感器A和B连续四天记录的读数分别存储为sensorA和sensorB。计算每天结束时的累积协方差，以分析两者的关联性变化。输入数据格式为两个向量，变量名分别为sensorA和sensorB，输出结果存入result变量。,"sensorA = [3, 6, 2, 5]
sensorB = [8, 4, 3, 7]
","result = cumcovar(sensorA, sensorB)
"
734,,,cumstd,"假设有一个传感器每分钟采集的温度数据矩阵tempData，包含3个传感器，数据为[[0.5,-0.3,1.2],[0.8,0.6,1.0],[1.1,0.2,0.9],[null,0.5,1.1],[0.7,0.9,null]]。要求计算每个传感器读数随时间递增的稳定性变化指标，结果存入result。输入矩阵列名为s1,s2,s3，输出要求保留6位小数。","tempData = matrix([0.5,0.8,1.1,NULL,0.7], [-0.3,0.6,0.2,0.5,0.9], [1.2,1.0,0.9,1.1,NULL]).rename!([""s1"",""s2"",""s3""])",result = cumstd(tempData).round(6)
735,,,decimalMultiply,在物联网传感器的数据采集中，两个DECIMAL类型的数组sensorA（测量值，3位小数）和sensorB（校准系数，2位小数）需要进行乘法运算，要求计算结果保留3位小数并解决浮点精度问题。已知输入数据格式为DECIMAL32数组和DECIMAL64标量，输出结果存储为result变量。,"sensorA = [decimal32(12.345, 3), decimal32(23.678, 3), decimal32(34.999, 3)]
sensorB = decimal64(2.55, 2)","result = decimalMultiply(sensorA, sensorB, 3)"
736,,,decompress,某物联网设备采集了从500到5000的连续传感器读数，存储时使用LZ4算法压缩。现在需要将其解压以进行分析，请编写代码恢复原始数据并存储在变量result中。输入数据为压缩后的向量compressedData，输出结果为解压后的向量，变量名需为result。,"sensorData = 500..5000
compressedData = compress(sensorData, ""lz4"")",result = decompress(compressedData)
737,,,det,"在物联网场景中，三个传感器连续采集了三个时间点的监测数据，形成3x3矩阵。其中第三时间点的第一个传感器数据缺失(用NULL表示)，矩阵变量名为x，格式如下:[1,6,NULL]为第一列，[2,5,7]为第二列，[3,4,0]为第三列。请计算该矩阵处理空值后的行列式结果，并将结果存入变量result。",x = matrix(1 2 3 6 5 4 NULL 7 0).transpose().reshape(3:3),result = det(x)
738,,,dynamicGroupCumcount,在物联网设备监控场景中，需要根据温度累积值动态划分设备工作状态（0=低温态，1=中温态，2=高温态）。当设备ID为DeviceA的记录序列依次出现累计温度2→7→15→18，DeviceB出现3→9→21时，如何实时统计各状态的事件累计数？输入数据包含设备ID、时间戳、温度累积值，当前状态标签current_state和前一状态标签prev_state，输出结果为包含三个状态累计数的元组。,"device = take(`DeviceA`DeviceB, 7)
timestamp = 2023.01.01T09:00:00.000 + 0 1 2 3 0 1 2
cum_temp = [2,7,15,18,3,9,21]
current_state = [0,1,2,2,0,1,2]
prev_state = [00i,0,1,2,00i,0,1]

inputTable = table(device, timestamp, cum_temp, current_state, prev_state).sortBy!(`device`timestamp)
","result = select dynamicGroupCumcount(current_state, prev_state, 3) as `state0`state1`state2 from inputTable context by device
"
739,,,elasticNet,"在金融数据分析场景中，给定包含10条股票记录的测试表testData，包含股票收益率列y、市场指数变动列rate、GDP增长率列gdp和样本权重列weight。现需构建回归模型分析收益率影响因素，要求使用混合正则化方法抑制过拟合（L1和L2惩罚比例为7:3），对归一化的特征变量计算包含截距项的回归方程，并为不同样本设置权重指标。请编写代码实现该需求，输入表结构为(y=FLOAT,rate=FLOAT,gdp=FLOAT,weight=INT)，输出结果存入变量result。","y = [0.15, -0.08, 0.23, -0.12, 0.18, 0.05, -0.03, 0.11, 0.09, -0.07]
rate = [0.12, -0.05, 0.19, -0.08, 0.15, 0.03, -0.01, 0.08, 0.06, -0.04]
gdp = [2.45, 1.78, 3.12, -0.45, 2.89, 1.23, 0.98, 1.67, 2.34, -0.12]
weight = [2,1,3,2,1,2,3,1,2,1]
testData = table(y as y, rate as rate, gdp as gdp, weight as weight)
","result = elasticNet(testData, yColName=`y, xColNames=`rate`gdp, alpha=0.8, l1Ratio=0.7, intercept=true, normalize=true, swColName=`weight)
"
740,,,elasticNetBasic,在量化分析中，我们收集了某板块30只股票的本周收益率数据（return向量），以及它们的市盈率（pe_ratio）、流通市值（market_cap）和技术指标（rsi）三个因子数据（factorTable表）。需要建立多因子回归模型分析各指标的影响，要求返回包含方差分析、回归统计、系数详情和残差数据的完整字典结果，同时使用L1和L2正则化比例为3:7的正则项组合。,"return = 0.01 + 0.3 * (1..30).norm().cumsum()
factorTable = table(
rand(10.0,30) as pe_ratio,
rand(1000000000.0,30) as market_cap,
rand(100.0,30) as rsi
)
","result = elasticNetBasic(return, factorTable, mode=2, alpha=0.7, l1Ratio=0.3, normalize=true, maxIter=1500)
"
741,,,fromJson,"在物联网监控系统中，收到一条设备的温度记录JSON数据，格式为{""form"":""table"",""type"":{""ts"":""TIMESTAMP"",""deviceId"":""SYMBOL"",""temp"":""DOUBLE""},""value"":[[1650000000000,1650000001000],[""D001"",""D002""],[25.3,28.7]]}。现在需要将该JSON字符串解析为DolphinDB表对象，并将转换结果存储在变量result中。输入数据变量名为jsonStr，输出结果为内存表对象。","jsonStr = '{""form"":""table"",""type"":{""ts"":""TIMESTAMP"",""deviceId"":""SYMBOL"",""temp"":""DOUBLE""},""value"":[[1650000000000,1650000001000],[""D001"",""D002""],[25.3,28.7]]}'
","result = fromJson(jsonStr)
"
742,,,fromUTF8,"某物联网设备采集的传感器标签数据以UTF-8编码存储，包含中文""电压""和""电流""两个监测项。现需要将这两个标签转换为GBK编码格式进行存储。给定字符串向量sensorData=[""电压"", ""电流""]，请编写DolphinDB代码实现该编码转换，结果存入result变量。","sensorData = [""电压"", ""电流""]","result = fromUTF8(sensorData, ""gbk"")"
743,,,getActiveMaster,在一个分布式集群监控系统中，需要实时获取当前协调全局任务的主控节点标识名称。已知该操作无需输入参数，返回结果是一个字符串类型的管理节点别名。请编写代码提取该名称并存入变量result。,,result = getActiveMaster()
744,,,getAggregator,"在实时股票分析场景中，已经创建了一个名为""priceMA""的流式聚合引擎，用于计算每支股票10窗口的移动平均价。现需要获取该引擎的schema结构，其中原始输入表包含交易时间（tradeTime）、证券代码（securityID）、最新成交价（lastPx）三列，输出结果需存入result变量。","t = streamTable(1000:0, `tradeTime`securityID`lastPx, [TIMESTAMP, SYMBOL, DOUBLE])
enableTableShareAndPersistence(table=t, tableName=`tickStream, asynWrite=true)

metrics = <[ema(lastPx, 10)]>
outputTable = table(1000:0, `securityID`tradeTime`ema10, [SYMBOL, TIMESTAMP, DOUBLE])
createReactiveStateEngine(
name=""priceMA"",
metrics=metrics,
dummyTable=t,
outputTable=outputTable,
keyColumn=""securityID"",
keepOrder=true
)
","result = getAggregator(""priceMA"").schema()
"
745,,,getAuditLog,"在物联网设备管理系统中，需要追踪用户""dev_ops""在2023年6月1日至6月7日期间对数据库进行的表结构变更操作，包括新增列、修改列注释和删除列。请提取符合条件的所有审计日志，结果存入名为result的表格变量，包含用户ID、操作时间和操作类型等字段。","userName = ""dev_ops""
startDate = 2023.06.01
endDate = 2023.06.07
operationTypes = [""ADD_COLUMN"", ""SET_COLUMN_COMMENT"", ""DROP_COLUMN""]","result = getAuditLog(userName, startDate, endDate, operationTypes)"
746,,,getCachedSymbolBaseMemSize,"在物联网设备监控场景中，系统使用SYMBOL类型存储百万级传感器编号以节省内存。运维人员需要实时查看当前所有传感器编号字典编码在内存中的实际占用空间（字节数）。已知存在变量名为device_log的表，其结构为(ts TIMESTAMP, deviceId SYMBOL)，请获取当前内存占用值并存入result变量。","sym = `sensor + string(1..1000000)
data = table(take(now(), 1000000) as ts, sym as deviceId)
device_log = data
","result = getCachedSymbolBaseMemSize()
"
747,,,getClusterDFSDatabases,某工业物联网平台使用分布式存储系统管理设备监测数据，当前集群中存在两个分布式数据库，分别用于存放传感器历史记录和实时告警信息，名称为'dfs://sensor_history'和'dfs://alert_stream'。如何获取当前系统中所有分布式数据库的完整名称列表，并将结果存入变量result？,,result = getClusterDFSDatabases()
748,,,getCurrentCatalog,在物联网设备管理中，系统需要通过切换至指定目录来访问传感器元数据表。已知当前会话已切换到名为'sensor_catalog'的目录，请获取当前所在的目录标识。输入数据为预定义的字符串变量targetCatalog赋值为'sensor_catalog'，输出结果为字符串并存入变量result。,"targetCatalog = ""sensor_catalog""","use CATALOG targetCatalog
result = getCurrentCatalog()"
749,,,getDatabaseClusterReplicationStatus,作为分布式物联网平台管理员，需检查所有数据库是否开启跨集群异步数据备份功能。已知存在两个数据库:'dfs://iot_sensor'（已启用）和'dfs://iot_logs'（未启用），请编写代码获取它们的状态信息，将结果存入变量result。,"
login(""admin"", ""123456"")
db1 = ""dfs://iot_sensor""
if(existsDatabase(db1)) dropDatabase(db1)
create database(db1)
setDatabaseForClusterReplication(db1, true)

db2 = ""dfs://iot_logs""
if(existsDatabase(db2)) dropDatabase(db2)
create database(db2)
setDatabaseForClusterReplication(db2, false)
","
result = getDatabaseClusterReplicationStatus()
"
750,,,getOLAPCacheEngineSize,在实时金融交易系统中，为了优化内存资源分配，需要监测OLAP引擎缓存池的实时状态。系统已配置缓存池最大可用空间为200MB，请编写代码获取当前缓存池的内存消耗详情，包含四项指标:实际占用内存、持久化列内存、索引指针内存、总配额上限，并将统计结果存入变量result。,"setOLAPCacheEngineSize(0.2)
","result = getOLAPCacheEngineSize()
"
751,,,getQueryStatus,在金融实时监控系统中，某节点需要查看当前正在处理的股票分析任务进展。已知存在异步执行的查询任务，请编写代码获取该节点发起的进行中任务的执行细节，要求返回表结构包含任务ID、用户身份、原始语句摘要、耗时毫秒数、内存占用字节、子任务完成比例等字段，结果存入result变量。,"# 模拟运行中的查询任务
import dolphindb as ddb
s = ddb.session()
s.connect(""localhost"", 8848, ""admin"", ""123456"")

# 创建分布式表并提交查询
script = '''
if(existsDatabase(""dfs://stock_db"")) dropDatabase(""dfs://stock_db"")
db = database(""dfs://stock_db"", VALUE, 2023.01.01..2023.12.31)
t = table(take(now(), 1000000) as timestamp, rand(`AAPL`MSFT`AMZN, 1000000) as symbol, rand(100.0, 1000000) as price)
pt = db.createPartitionedTable(t, ""stock_data"", ""timestamp"").append!(t)

submitJob(""job1"", ""scan job"", ""select * from pt where symbol in `AAPL`MSFT, price>95.0 group by symbol"")
'''
s.run(script)
","# 获取当前节点任务状态
result = s.run(""getQueryStatus()"")
"
752,,,getRunningQueries,"某证券公司的实时风控系统需要追踪当前正在处理的交易数据分析任务，筛选出由特定用户（用户ID为""risk_engineer""）发起的、尚未结束（endTime为空）的任务详情。输入数据为本地节点当前执行任务表，包含userID、endTime等字段，输出结果为符合条件的数据行并存储在变量result中。","setParam(""perfMonitoring"", 1)","result = select * from getRunningQueries() where userID = ""risk_engineer"" and endTime = NULL"
753,,,getStreamEngineStat,"在实时计算多只股票的两个不同因子时，系统需要监控所有流处理组件的运行指标。已知已创建了一个名为""tsEngine""的时间序列引擎处理交易量滚动求和，以及一个名为""reactiveEngine""的响应式状态引擎计算开盘价变化率。输入数据为共享流表trades，包含time（时间戳）、sym（股票代码）、price（价格）、qty（数量）字段。请获取当前所有流引擎的状态字典，并存储在result变量中。","
share streamTable(10000:0, `time`sym`price`qty, [TIMESTAMP,SYMBOL,DOUBLE,INT]) as trades
output1 = table(10000:0, `time`sym`sumQty, [TIMESTAMP,SYMBOL,INT])
output2 = table(10000:0, `sym`rate, [SYMBOL,DOUBLE])

tsEngine = createTimeSeriesEngine(name=""tsEngine"", windowSize=60000, step=60000, metrics=<[sum(qty)]>, dummyTable=trades, outputTable=output1, timeColumn=`time, keyColumn=`sym)

reactEngine = createReactiveStateEngine(name=""reactiveEngine"", metrics=<[ratios(price)]>, dummyTable=trades, outputTable=output2, keyColumn=`sym)

subscribeTable(tableName=""trades"", actionName=""tsAggregator"", handler=append!{tsEngine}, msgAsTable=true)
subscribeTable(tableName=""trades"", actionName=""reactAggregator"", handler=append!{reactEngine}, msgAsTable=true)
","
result = getStreamEngineStat()
"
754,,,invUniform,"在物联网质量控制中，某零件加工尺寸偏差服从区间[1.8,4.2]毫米的均匀分布。需要计算三种典型概率（0.1表示最小常见偏差，0.75表示典型偏差上限，0.99表示最大允许偏差）对应的实际偏差值。已知输入概率向量为probs=[0.1,0.75,0.99]，要求输出计算结果到result变量，输出格式为浮点型向量。","probs = [0.1, 0.75, 0.99]","result = invUniform(1.8, 4.2, probs)"
755,,,invWeibull,"在物联网设备可靠性分析中，某传感器寿命遵循特定分布模型，已知形态因子a=1.5，比例系数b=2.0。需要计算三种典型失效概率（5%基准值、50%中位数、95%高概率）对应的寿命临界值，输入概率向量为[0.05,0.5,0.95]，请返回对应的生存时间数值并将结果存储在result变量中。","alpha = 1.5
beta = 2.0
X = [0.05, 0.5, 0.95]","result = invWeibull(alpha, beta, X)"
756,,,ipaddr,"某物联网平台需要处理设备连接信息，现有设备地址数据存储为以下字符串格式:[""2001:0db8:85a3:0000:0000:8a2e:0370:7334"", ""fe80::1ff:fe23:4567:890a"", ""::ffff:192.168.0.1""]，变量名为devices。请将这些地址转换为数据库内置的专用地址类型，并将转换结果存储在result变量中。","devices = [""2001:0db8:85a3:0000:0000:8a2e:0370:7334"", ""fe80::1ff:fe23:4567:890a"", ""::ffff:192.168.0.1""]",result = ipaddr(devices)
757,,,isControllerInitialized,在部署高可用物联网集群时，需要确认主节点的核心调度服务是否启动完成。请编写DolphinDB代码检查当前leader节点的初始化状态，并将检查结果（布尔值）存储在变量result中。集群环境已正确配置，无需准备额外输入数据。,// 无数据需要准备，函数直接检测节点状态,result = isControllerInitialized()
758,,,iterate,"假设有一个温度传感器的初始校准值为80，每次根据当前校准值乘以调整系数0.75并叠加环境修正值序列[6, -2, 4, 8]。要求计算每次迭代后的综合校准值，结果存入result变量。输入数据格式为:init标量=80，coeffs标量=0.75，input向量=6 -2 4 8。输出为浮点型向量。","dailyAdjustments = [6, -2, 4, 8]","result = iterate(80, 0.75, dailyAdjustments)"
759,,,knn,在工业设备监测中，根据传感器采集的温度和振动特征判断故障类型。现有18台设备的状态数据，其中前6台正常（标签0），后12台异常（标签1）。传感器数据存储在名为sensorData的表中，包含两列temperature和vibration，每行对应一个设备样本。请使用三阶邻近分类算法（采用曼哈顿距离）建立预测模型，并将训练结果保存到result变量。,"temperature = [72.3, 73.1, 71.9, 75.0, 74.5, 73.8, 82.4, 85.1, 83.7, 86.2, 84.9, 80.3, 87.6, 88.9, 86.4, 89.1, 90.5, 91.2]
vibration = [4.1, 4.3, 4.0, 4.5, 4.4, 4.2, 6.8, 7.1, 6.9, 7.3, 7.0, 6.5, 7.9, 8.2, 7.7, 8.5, 8.9, 9.0]
sensorData = table(temperature, vibration)
faultLabels = take(0,6) join take(1,12)
","result = knn(faultLabels, sensorData, ""classifier"", 3, 1)
"
760,,,loadMvccTable,在物联网监控场景中，设备状态数据以并发读写表形式存储在 /iot/data 路径下的 env_monitor 表中，表结构包含采集时间（ts）、设备编码（device_code）、温度（temp）、湿度（humi）四个字段，类型分别为 TIMESTAMP、SYMBOL、DOUBLE、DOUBLE。请将该持久化存储的表载入内存进行分析，并将结果存储在变量 result 中。,"n = 8
ts = 2023.06.01T09:00:00 + rand(60000, n)
device_code = take(`D001`D002`D003, n)
temp = 20.0 + rand() * 15
humi = 40.0 + rand() * 30

deviceData = table(ts, device_code, temp, humi)
dbPath = ""/iot/data""
tbName = ""env_monitor""

mvccTB = mvccTable(1:0, `ts`device_code`temp`humi, [TIMESTAMP,SYMBOL,DOUBLE,DOUBLE], dbPath, tbName)
mvccTB.append!(deviceData)
","result = loadMvccTable(""/iot/data"", ""env_monitor"")
"
761,,,loadText,"某证券公司的股票交易数据文件包含两行以#开头的注释，随后是各列数据。其中时间列为""yyyymmdd""格式，需转换为日期类型，且仅需加载股票代码、日期、开盘价和收盘价四列。已知文件路径为""/data/stock.csv""，列顺序为code,date,open,high,close,vol。请编写代码实现数据加载并将结果赋值给result。","
t = table(`A001`B002`C003 as code, 20230901 20230902 20230903 as date, 45.3 46.1 47.8 as open, 46.5 47.2 48.3 as high, 45.8 46.5 47.9 as close, 10000 12000 15000 as vol)
saveText(t, ""/data/stock.csv"", delimiter=',', append=true)
","
schema = extractTextSchema(""/data/stock.csv"")
update schema set type = ""DATE"" where name == ""date""
schema[`format] = ["""",""yyyyMMdd"","""","""","""",""""]
schema[`col] = [0,1,2,4]
result = loadText(""/data/stock.csv"", schema=schema, skipRows=2)
"
762,,,min,给定一个物联网设备的每小时温度监测表deviceTemp，包含设备编号（deviceId）为符号向量和温度值（temperature）为整数向量两列。请计算每个设备的最低温度记录，并将结果存储在变量result中，要求结果包含设备编号和对应的最低温度。,"deviceTemp = table(`D001`D001`D002`D002 as deviceId, [45, 48, 36, 38] as temperature)",result = select min(temperature) as min_temp from deviceTemp group by deviceId
763,,,mmaxPositiveStreak,"在物联网设备电压监测中，给定包含异常值的原始电压序列voltages=[3.2, -4.1, NULL, 2.8, 5.6, -1.5, NULL, 7.3]（浮点数组），先使用相邻有效值向前填补缺失存入变量v。需要找出每个监测点往前4个采样窗口内连续正常电压(正值)的累计和峰值，结果存入result。","voltages = [3.2, -4.1, NULL, 2.8, 5.6, -1.5, NULL, 7.3]
v = ffill!(voltages)","result = mmaxPositiveStreak(v, 4)"
764,,,monthOfYear,某物联网平台记录了多个设备的首次启动时间，存储为时间戳类型。现在需要从这些时间戳中提取对应的月份数值用于分析设备激活情况。已知设备启动时间向量为ts，包含两个时间戳:2023年3月15日和2023年8月22日。请编写代码返回包含对应月份数值的整型向量，结果存储在result变量中。,"ts = [2023.03.15T00:00:00, 2023.08.22T18:30:45]",result = monthOfYear(ts)
765,,,moveChunksAcrossVolume,某量化平台需要将历史高频交易数据的存储块迁移到新挂载的磁盘卷以释放空间。已知源文件路径为volumeX/CHUNKS，包含3个待迁移的分区标识分别为c1/c2/c3，目标路径为volumeY/CHUNKS的空目录，迁移后需删除源文件。请编写迁移操作的完整代码，要求最终结果存入变量result。,"srcPath = ""volumeX/CHUNKS""
destPath = ""volumeY/CHUNKS""
chunkIds = [""c1"", ""c2"", ""c3""]
","result = moveChunksAcrossVolume(srcPath, destPath, chunkIds)
"
766,,,mstdp,"某物联网设备每秒钟采集一次环境温度数据，数据格式为时间类型索引的向量temp，时间从2023.01.01T00:00:00开始连续6秒。需要计算每个时刻向前3秒时间窗口内的温度波动程度（总体标准差），其中窗口至少包含2个有效数据。输入向量值为[1.8, 4.2, 2.5, 6.1, 3.7, 5.9]，输出结果存储在result变量中。","temp = array(DOUBLE, [1.8, 4.2, 2.5, 6.1, 3.7, 5.9]).rename!(datetime(2023.01.01T00:00:00)+0..5*1000)
temp.setIndexedVector!()
","result = mstdp(temp, 3s, 2)
"
767,,,nunique,在销售记录中，客户和货品的组合可能存在重复，且部分货品信息缺失。请统计包括空值在内的唯一客户-货品组合总数，并将结果存储在result中。输入数据sales包含客户号（整数列customer）、货品标识（符号列item，存在空值），输出结果为单个数值的变量result。,"sales = table(
[105, 105, 108, 108, 108, 112, 112, 112] as customer,
take(`A`B``C`A, 8) as item
)","result = nunique([sales.customer, sales.item])"
768,,,osqp,"一个投资者需要在两种资产上分配资金，总金额为10万元。资产A的占比至少30%，资产B不超过60%。已知风险系数矩阵为[[0.04, 0.006],[0.006, 0.01]]，预期收益调整向量为[-2, -4]。如何建立优化模型求最小风险组合？输入q向量为[-2,-4]，P矩阵为2x2半正定矩阵，A矩阵包含资金总和约束，lb含下限约束，ub含上限约束，最终返回结果存入result。","P = matrix([0.04,0.006,0.006,0.01], 2, 2)
q = [-2, -4]
A = matrix([1,1,1,0,0,1], 3:2).transpose()
lb = [100000, 0.3*100000, -inf]
ub = [100000, inf, 0.6*100000]","result = osqp(q, P, A, lb, ub)"
769,,,partition,在物联网设备状态监测场景中，数据库使用日期范围分区存储设备信息。现需查询前两个时间分区（索引号为0和1）内的所有设备状态记录。已知输入表pt包含字段date(DATE)、deviceID(SYMBOL)、status(INT)，请编写查询语句获取满足条件的数据并存入result。,"dbName = ""dfs://iot_device_status""
if existsDatabase(dbName):
dropDatabase(dbName)

startDates = 2023.01.01 + 0..2*5
db = database(dbName, RANGE, startDates)

n = 50
date = rand(2023.01.01..2023.01.15, n)
deviceID = ""D"" + string(rand(1000..9999, n))
status = rand([0,1,2], n)
t = table(date, deviceID, status)

pt = db.createPartitionedTable(t, `pt, `date).append!(t)
","result = select * from pt where partition(date, [0, 1])
"
770,,,pdfNormal,某温度传感器的测量误差服从均值为0，标准差为0.5的正态分布。现在需要计算误差值为-0.2、0、0.3处的概率密度。已知输入数据X是一个数组变量，包含这三个误差值，输出结果保存到变量result中。请编写相应的代码。,"X = [-0.2, 0, 0.3]","result = pdfNormal(0, 0.5, X)"
771,,,ploop,假设某物联网平台采集了多个传感器的温度数据，需要并行计算每个设备最近3次测量的移动平均温度，并将结果按设备聚合。输入表sensor_readings包含device_id（STRING类型）、timestamp（DATETIME类型）、temperature（DOUBLE类型）三个字段，输出结果需包含设备编号、时间戳和移动平均值三列，最终结果存储在result变量。,"device_list = [""D001"",""D002"",""D003""]
timestamps = 2023.01.01T09:00:00 + 0..2 * 600
sensor_readings = table(
take(device_list,6) as device_id,
(timestamps join timestamps + 300) as timestamp,
rand(20.0..30.0,6) as temperature
).sortBy(`device_id`timestamp)
","def calc_moving_avg(dev_id, data){
filtered = select * from data where device_id == dev_id
return select device_id, timestamp, mavg(temperature,3) as moving_avg from filtered context by device_id
}
result = ploop(calc_moving_avg{, sensor_readings}, device_list)
result = unionAll(result)
"
772,,,quantileSeries,"某物联网设备记录了每小时的环境温度（单位:摄氏度），存储为数值数组temp_data，格式为[23.5, 17.8, 29.3, 14.6, 31.2, 25.7, 19.4, 22.1, 27.9, 18.5]。需要计算30%、60%、90%三个位置的分位测量值，并要求当分位点位于两个数据点之间时取两者中点。请编写代码实现该需求，结果存入result变量。","temp_data = [23.5, 17.8, 29.3, 14.6, 31.2, 25.7, 19.4, 22.1, 27.9, 18.5]","result = quantileSeries(temp_data, [0.3, 0.6, 0.9], 'midpoint')"
773,,,randDiscrete,在模拟股票交易策略时，需要根据预设的权重从5只标的（变量名为stock_list，类型为SYMBOL向量）中进行8次带概率抽选，其中各标的权重比为2:3:5:4:1。请生成符合要求的抽样序列，存入变量result。,"stock_list = [`AAL, `BBR, `CCI, `DDOG, `ETSY]
weights = [2.0, 3.0, 5.0, 4.0, 1.0]","result = randDiscrete(stock_list, weights, 8)"
774,,,rebalanceChunksAmongDataNodes,某电力监控系统集群新增了4个存储节点后，需要立即触发跨节点的历史数据存储优化任务，要求仅搬运5天前更新的冷数据块并保留执行轨迹。请生成操作指令并返回迁移路径表。输入数据格式由系统自动管理，无需预置；输出结果为四列结构表，包含源节点、块ID、目标节点、目标卷路径，存储在变量result中。,,"result = rebalanceChunksAmongDataNodes(true, 5.0)"
775,,,regroup,一个物联网系统记录了三个设备（d1、d2、d3）每分钟内的多秒级温度采样数据，存储为行名精确到秒（格式HH:MM:SS）、列对应设备的温度矩阵m。现在需要找出每分钟各设备的最高温度值。已知矩阵m有50行，行名为09:00:00到09:04:59的随机时间，列名为`d1`d2`d3。请生成按分钟分组的最高温度矩阵，结果存入result。,"m = matrix(rand(90..120, 50), 50:3).rename!(format(09:00:00+0..49*1000, ""HH:mm:ss""), [`d1`d2`d3])","result = regroup(m, minute(m.rowNames()), max, true)"
776,,,right,"在物联网设备管理中，每个设备ID的后四位代表生产批次信息。已知变量deviceIDs包含以下字符串:[""DT202309A0015"", ""DT202311B0008"", ""DT202402C0012""]。需要提取所有设备ID的最后4位批次号，将结果存入变量result。","deviceIDs = [""DT202309A0015"", ""DT202311B0008"", ""DT202402C0012""]
","result = right(deviceIDs, 4)
"
777,,,rowAnd,某工厂监控系统记录了设备的三项安全指标数据，表safety_checks包含三个布尔列voltage_ok、temperature_ok、pressure_ok（true表示达标）。需要筛选出同时满足三项安全指标的设备记录，生成对应的布尔向量，变量名为result。,"safety_checks = table(
[true, false, true, false, true] as voltage_ok,
[true, true, true, false, false] as temperature_ok,
[true, true, false, true, true] as pressure_ok
)
","result = rowAnd(safety_checks)
"
778,,,rowBeta,在金融分析中，需要评估三只股票连续四天的收益率对大盘指数的敏感度。已知股票收益率存储在3行4列的矩阵stockReturns中，每行对应一只股票，列表示交易日。大盘指数收益率存储在同样结构的矩阵marketReturns中，其中第二只股票在第四天无对应指数数据。请编写代码计算每只股票的敏感系数，结果存入result。,"stockReturns = matrix([0.02, -0.01, 0.015, 0.03], [0.01, 0.005, -0.009, 0.02], [0.03, 0.02, NULL, 0.01]).transpose()
marketReturns = matrix([0.012, 0.008, -0.005, 0.015], [0.01, 0.009, 0.007, NULL], [0.015, 0.01, 0.02, 0.008]).transpose()","result = rowBeta(stockReturns, marketReturns)"
779,,,rowKurtosis,四台设备每隔五分钟采集一次电压数据，共采集五次。分析各设备电压读数的分布形态，计算每行的峰度（使用无偏估计）。输入数据为矩阵voltage_matrix，每行对应一台设备的五次采集值，输出结果存储在变量result。,"voltage_matrix = matrix([12.1,12.3,12.0,12.4,12.2], [11.9,11.7,12.0,11.8,11.6], [13.0,13.2,13.1,12.9,13.3], [10.5,10.4,10.6,10.3,10.5])","result = rowKurtosis(voltage_matrix, false)"
780,,,rowWsum,"在投资组合分析中，给定三个投资标的在不同交易日的持仓量矩阵xPortfolio和单位收益矩阵yReturn，如何计算每个交易日各标的组合总收益？其中xPortfolio是3x3矩阵[50 120 90, 80 75 110, 100 60 85]，yReturn是3x3矩阵[0.12 0.08 0.15, 0.09 0.07 0.11, 0.14 0.06 0.13]。要求输出结果为长度为3的数值向量，存储在result变量中。","xPortfolio = matrix([50, 120, 90], [80, 75, 110], [100, 60, 85])
yReturn = matrix([0.12, 0.08, 0.15], [0.09, 0.07, 0.11], [0.14, 0.06, 0.13])","result = rowWsum(xPortfolio, yReturn)"
781,,,saveTable,"在某物联网监控场景中，需要将内存中的传感器记录表存储到本地数据库作为备份。已知表deviceMetrics包含5000条数据，字段为检测时间（collectTime，DATETIME类型）、设备编号（devID，STRING类型）、电压值（voltage，FLOAT类型）。请将该表存入路径为""/iot/db""的数据库，设定存储表名为power_log，开启数据压缩存储模式，要求不追加到现有数据，最终将操作结果赋值给变量result。","db = database(""/iot/db"")
times = 2023.08.01T09:30:00 + 0..4999
devices = ""D"" + lpad(string(1..50), 4, ""0"")
deviceMetrics = table(times as collectTime, take(devices,5000) as devID, rand(220.0..240.0,5000) as voltage)","result = saveTable(db, deviceMetrics, `power_log, false, true)"
782,,,setMaxConnections,某高频交易节点因策略客户端激增，需在开市前将最大并发连接数从2500提升至5000以容纳更多实时连接。请写出动态调整并获取最新配置值的代码，无需准备输入数据，输出结果保存到变量result。,,"setMaxConnections(5000)
result = getClusterPerf().maxConnections
"
783,,,slice,某物联网设备记录了传感器ID、时间戳和温度值，存储在表t中，包含列sensor_id、ts、temp。现在需要提取前两行记录（索引0到1）中的传感器ID和温度两列。输入表t结构为sensor_id(SYMBOL)、ts(TIMESTAMP)、temp(DOUBLE)，输出结果应存储在result变量中。,"t = table(
`S001`S002`S003 as sensor_id,
[2023.01.01T00:00:00, 2023.01.01T00:01:00, 2023.01.01T00:02:00] as ts,
[25.3, 26.1, 23.8] as temp
)
","result = t.slice(0:2, [0,2])
"
784,,,submitJobEx,"在物联网场景中，需要异步处理传感器采样数据表`sensorData`（包含`id`和`val`两列，1000万条记录），要求提交一个后台任务:按设备ID分组计算数值列的均值。任务优先级设为7级，最多分配4个线程，任务ID指定为""sensorAvg""，最终计算结果变量命名为result。（注意:输入表和分组计算逻辑需在prepareCode中预置）","sensorData = table(take(1..1000, 10000000) as id, rand(100.0, 10000000) as val)

def calcSensorAvg(tblName, idRange){
data = loadTable(tblName)
return select avg(val) as avgVal from data where id between idRange[0] : idRange[1] group by id
}
","result = submitJobEx(""sensorAvg"", ""传感器均值计算"", 7, 4, calcSensorAvg, ""sensorData"", [1, 1000])
"
785,,,submitJobEx2,"在量化回测场景中，需要异步计算某只股票最近5个交易日的高、低、收盘价移动平均线，并在计算完成后自动将结果记录到系统日志。已知输入数据表tickData包含以下字段:timestamp(TIMESTAMP), symbol(SYMBOL), high(DOUBLE), low(DOUBLE), close(DOUBLE)，请创建异步任务，计算结果成功后日志需包含""MA_RESULT:成功""，失败则记录""MA_RESULT:异常原因""，最终将任务执行状态存储到result变量。","|
tickData = table(2023.01.01T09:30:00 2023.01.02T09:30:00 2023.01.03T09:30:00 as timestamp, `AAPL`AAPL`AAPL as symbol, 152.3 153.8 154.2 as high, 150.5 151.2 152.1 as low, 151.8 152.9 153.5 as close)","|
def calcMavg(window, data){
return {
high_ma: moving(avg, data.high, window),
low_ma: moving(avg, data.low, window),
close_ma: moving(avg, data.close, window)
}
}

def resultHandler(jobId, jobDesc, success, res){
desc = ""MA_RESULT:"" + (success ? ""成功"" : (""异常:"" + res))
writeLog(desc)
result = (success ? 1 : 0)
}

submitJobEx2(""MA_Job1"", ""移动平均计算"", 7, 4, resultHandler, calcMavg, 5, tickData)"
786,,,tmmax,"在物联网设备温度监测场景中，给定一个包含时间戳t（日期类型）和温度值temp的记录表，要求计算每个时刻往前3天时间窗口内的最高温度（忽略NULL值对窗口范围的影响）。输入表结构为(t datetime, temp double)，请使用窗口函数生成结果并存入result变量。举例说明:当某条记录的temp为NULL时，窗口最大值应基于有效数据进行计算。","t = [2023.01.01, 2023.01.01, 2023.01.03, 2023.01.05, 2023.01.07, 2023.01.09]
temp = [28.5, NULL, 26.8, NULL, 27.3, 25.9]
m = table(t as t, temp as temp)
","result = select *, tmmax(t, temp, 3d) as max_temp from m
"
787,,,tmovingWindowData,某物联网设备采集了一组不规则时间戳的温度数据，时间列sensorTime格式为时间类型，温度值temperature为数值型。请为每个观测点生成包含左边界在内的最近3秒窗口内的温度集合，结果变量需为数组类型存储到result。,"sensorTime = 2023.01.01T09:00:00 + [1, 2, 3, 5, 6, 8, 9, 11, 12, 14]
temperature = 1..10
","result = tmovingWindowData(sensorTime, temperature, 3s, leftClosed=true)
"
788,,,tmrank,假设有一个高频股票交易系统，其中记录了某只股票在不同时刻的价格（包含缺失值）。需要计算每个时刻前3秒时间窗口内的价格百分比排名，其中缺失值视为最小值，重复价格使用平均排名方式。给定时间戳t为TIMESTAMP类型，股票代码sym为SYMBOL类型，价格price为DOUBLE类型。请生成计算结果到变量result，要求输出为DOUBLE类型向量。,"t = 2023.10.01T09:30:00.000 + [0, 1000, 2000, 4000, 5000, 6000, 7000, 8000, 9000]
sym = take(`stockA, 9)
price = [100.5, NULL, 102.3, 98.7, 102.3, NULL, 105.0, 102.3, 103.8]
t1 = table(t as time, sym, price)
","stockA_data = select time, price from t1 where sym == `stockA
result = tmrank(stockA_data.time, stockA_data.price, ascending=false, window=3000, ignoreNA=false, tiesMethod='average', percent=true)
"
789,,,tmsumTopN,"在物联网监测系统中，存在一组传感器每分钟记录一次状态指标和数据值。给定一个包含时间戳（time）、设备读数（reading）、设备优先级（priority）的表，请找出每个时间点前5分钟内按照优先级降序排名的前3台设备，并计算这些设备的读数总和。输入表结构:time(DATETIME), reading(INT), priority(INT)，输出结果存入变量result，要求返回DOUBLE类型向量。","time = 2023.05.15T09:00:00 + 1..6
reading = [120, 145, 130, 160, 115, 125]
priority = [3, 5, 2, 8, 4, 1]
sensorData = table(time as time, reading as reading, priority as priority)
","result = tmsumTopN(sensorData.time, sensorData.reading, sensorData.priority, 5, 3, false)
"
790,,,transaction,"在物联网设备管理中，需要原子性更新设备状态并清理旧数据。假设共享表devices包含timestamp(时间戳)、deviceId(设备ID)、status(状态)、temperature(温度)字段。当执行删除状态为""offline""的记录，同时将温度超过40度的设备状态标记为""alert""时，若任意操作失败需保证数据不变。请实现该事务操作，最终返回处理后的设备总数并赋值给result。","timestamp = 2023.09.05T09:34:07 2023.09.05T09:35:02 2023.09.05T09:36:15
deviceId = `D001`D002`D003
status = [""online"", ""offline"", ""alert""]
temperature = [38.5, 41.2, 42.0]
devices = table(timestamp, deviceId, status, temperature)
share devices as sharedDevices
","def processDevices(){
delete from sharedDevices where state = ""offline""  # 故意使用错误字段名state
update sharedDevices set status = ""alert"" where temperature > 40
select count(*) as total from sharedDevices
}

transaction {
result = processDevices()
}
"
791,,,adaBoostRegressor,在物联网设备管理中，需要根据设备的运行时间（hours）、环境温度（temp）和工作电压（voltage）预测电池剩余寿命。现有包含100条样本的数据表device_data，包含四列:[life]（剩余天数，浮点数）、[hours]（日均工作时间，整数）、[temp]（平均温度，浮点数）、[voltage]（工作电压，浮点数）。请使用集成学习方法训练回归模型，要求采用自适应加权策略，设置基础树数量为8轮、样本权重调整方式为平方误差函数、学习步长为0.2，最终将训练好的模型对象存储在变量result中。,"n = 100
hours = rand(8..16, n)
temp = rand(25.0..40.0, n).round(1)
voltage = rand(3.2..4.2, n).round(1)
base_life = 365 - 2*hours + 5*(35-temp) + 50*(voltage-3.5)
life = base_life + norm(0, 5, n)
device_data = table(life, hours, temp, voltage)
","ds = sqlDS(<select * from device_data>)
result = adaBoostRegressor(
ds,
yColName=`life,
xColNames=`hours`temp`voltage,
numTrees=8,
learningRate=0.2,
loss='square'
)
"
792,,,addFunctionView,在物联网环境中，受限用户需要获取指定设备某日的平均温度指标，但无权限直接访问分布式数据库'db://sensors'中的'readings'表。请定义一个函数，参数为设备编号（字符串类型）和日期（日期类型），通过该函数间接计算平均温度，并将其封装为可跨会话共享的视图。调用时使用设备编号'S123'和日期2023.05.15，将视图注册结果存入变量result。,"def calculateDeviceStats(deviceID, targetDate) {
return select avg(temperature) as avgTemp 
from loadTable(""db://sensors"", ""readings"") 
where deviceID=deviceID, ts.date=targetDate
}",result = addFunctionView(calculateDeviceStats)
793,,,adfuller,某物联网系统每小时采集一次温度数据，存储在数组变量temp_data中。现需对该数据进行平稳性检验，要求回归模型包含常数项和线性趋势项，最大滞后期设为3，根据BIC信息准则自动选择滞后期长度，并获取完整的回归分析结果。将检验结果存储在变量result中。请提供相应的代码实现。,"temp_data = 20.0 + 0.5 * 0..23 + rand(1.0, 24)
","result = adfuller(temp_data, 3, regression=""ct"", autoLag=""bic"", regResults=true)
"
794,,,and,在物联网传感器监控中，有一个设备状态表包含设备ID和温度读数。请筛选出设备ID为101且温度超过30度的所有记录。输入表名为sensor_data，包含字段device_id（整数类型）和temperature（整数类型），输出结果存储在变量result中，要求返回完整的匹配记录。,"sensor_data = table([101,102,101,103] as device_id, [29,31,32,28] as temperature)
","result = select * from sensor_data where device_id==101 && temperature>30
"
795,,,appendForPrediction,"在实时债券收益率预测场景中，给定一个包含45条记录的市场报价表inputData，结构包含[symbol, time, askCleanPrice, bidCleanPrice, midYield, askYield, bidYield, duration, assetClass, sourceID, settleRate]字段，其中assetClass取值为0、1、3。需要将这批数据传输到名为""liveCurveEngine""的收益率曲线引擎进行实时预测，请返回系统实际处理的数据记录数并存储在result变量中。输入表字段类型要求:symbol为SYMBOL，time为TIMESTAMP，价格字段为DECIMAL32(3)，duration为DOUBLE，assetClass为INT，sourceID为INT，settleRate为STRING。","inputData = table(take(`A`B`C, 45) as symbol, 
datetimeAdd(now(), 1..45*500, 'm') as time,
decimal32(rand(95.0..105.0,45),3) as askCleanPrice,
decimal32(rand(95.0..105.0,45),3) as bidCleanPrice,
decimal32(rand(3.0,45),3) as midYield,
decimal32(rand(2.8,45),3) as askYield,
decimal32(rand(3.2,45),3) as bidYield,
(rand(5.0,45)+5).sort() as duration,
take(0 1 3,45) as assetClass,
take([101],45) as sourceID,
take(""O/N"",45) as settleRate)
","result = appendForPrediction(engine=""liveCurveEngine"", data=inputData)
"
796,,,asin,"在物联网设备的角度校准中，采集到一组[-1,1]范围内的正弦特征值，存储为向量sensorSignals。需要将这些特征值转换为对应的原始弧度角度。已知输入数据为向量sensorSignals = [0, 0.5, 0.707107]，输出结果应为对应的弧度值向量，赋值给result。","sensorSignals = [0, 0.5, 0.707107]",result = asin(sensorSignals)
797,,,asis,在实时监控系统中存在一个传感器数值数组sensorReadings，现需要创建该数据的实时视图。当修改视图第2个元素为0后，原数组中对应位置同步变化。请实现该过程并将修改后的原数组存入result。,"
sensorReadings = [15, 23, 37, 42]
","
realTimeView = asis(sensorReadings)
realTimeView[2] = 0
result = sensorReadings
"
798,,,backupDB,"某金融机构需要将存储交易记录的分布式数据库进行灾备。数据库路径为""dfs://tradeDB""，按交易日期和客户ID的组合分区。现需将整个数据库完整备份至""/backup/finance_2023""，保留数据快照并保持并行处理。请编写代码实现该需求，输入包含数据库路径和备份目录变量，输出存入result。","
dbPath = ""dfs://tradeDB""
backupDir = ""/backup/finance_2023""

n = 2000
clientID = rand(1000..9999, n)
tradeDate = 2023.01.01..2023.01.05
date = rand(tradeDate, n)
amount = rand(1000.0, n)
t = table(clientID, date, amount)

if(existsDatabase(dbPath)) {
dropDatabase(dbPath)
}

dateDB = database(, RANGE, 2023.01.01..2023.01.05)
clientDB = database(, HASH, [INT, 10])
db = database(dbPath, COMPO, [dateDB, clientDB])

pt = db.createPartitionedTable(t, `trades, `date`clientID)
pt.append!(t)
","
result = backupDB(backupDir, dbPath)
"
799,,,bfill_,"在物联网设备的温度监控中，部分时间点的温度数据因传输问题缺失。需要依据后续最近的有效值对这些缺失进行填充，但每个缺失位置最多只能向后查找一个有效值。输入表sensorData包含ts（时间戳，类型为DATETIME）、deviceId（设备编号，类型为SYMBOL）、temperature（温度值，类型为DOUBLE），其中temperature数据为[22.5, NULL, NULL, 25.3, NULL]。请处理该表并将结果存入result，使得temperature列变为[22.5, NULL, 25.3, 25.3, NULL]。","ts = [2023.01.01T09:00:00, 2023.01.01T09:05:00, 2023.01.01T09:10:00, 2023.01.01T09:15:00, 2023.01.01T09:20:00]
deviceId = take(`A, 5)
temperature = [22.5, NULL, NULL, 25.3, NULL]
sensorData = table(ts, deviceId, temperature)
","bfill!(sensorData, 1)
result = sensorData
"
800,,,businessYearBegin,"某公司的财务年度从每年3月开始，现需按每隔三个完整年度统计股票交易数据的平均价格和总交易量。给定包含日期（date, DATE类型）、股票代码（sym, SYMBOL）、交易量（vol, INT）和价格（price, DOUBLE）的表格trade，请生成以财务年度首个工作日为分组依据的聚合查询，其中result包含分组日期、均价和总量。","date = 2013.05.15 2016.05.16 2019.05.17 2022.05.18 2025.05.19
sym = take(`AAPL,5)
vol = 10000 8500 9200 10500 13200
price = 45.8 92.6 148.3 217.5 305.9
trade = table(date, sym, vol, price)
","result = select avg(price), sum(vol) from trade group by businessYearBegin(date, 3, 2013.03.01, 3)
"
801,,,cdfExp,"假设某物联网设备的故障间隔时间服从均值为2.5小时的指数分布，请计算以下时间点（0.5、1.0、2.0、3.0小时）的累计故障概率。输入数据为列名为t的数值型向量[0.5,1.0,2.0,3.0]，要求计算结果保留6位小数，并将结果赋值给变量result。","t = [0.5, 1.0, 2.0, 3.0]","result = cdfExp(2.5, t)"
802,,,cdfF,"在统计假设检验中，某检验统计量服从分子自由度3、分母自由度5的F分布。现有三个观测值[0.5,1.5,2.5]，要求计算它们的累积分布概率。输入数据包含整型变量df1=3，df2=5，浮点向量x_vals=[0.5,1.5,2.5]，输出结果存储在变量result中，格式为浮点向量。","df1 = 3
df2 = 5
x_vals = [0.5, 1.5, 2.5]","result = cdfF(df1, df2, x_vals)"
803,,,clearAllTSDBSymbolBaseCache,"某物联网系统在完成历史数据归档后，发现内存中有大量不再关联缓存数据和事务的TSDB符号基底残留。已知数据库""dfs://sensors""中存在按日分区的设备记录表""metrics""，且部分时间段的符号基底未被引用。请编写DolphinDB代码清理这些无效缓存，执行结果存入变量result。","
login(""admin"", ""123456"")
if(existsDatabase(""dfs://sensors"")){
dropDatabase(""dfs://sensors"")
}
dbDate = 2023.01.01..2023.01.03
db = database(""dfs://sensors"", VALUE, dbDate, engine='TSDB')
t = table(take(dbDate,6) as date,[""XJ-700"",""XJ-700"",""XJ-701"",""XJ-701"",""XJ-702"",""XJ-702""] as deviceID,rand(35.0..38.0,6) as value)
pt = db.createPartitionedTable(t,`metrics,`date,`deviceID).append!(t)
select * from pt where date in dbDate
clearTableCache(db)
","
result = clearAllTSDBSymbolBaseCache()
"
804,,,convertEncode,"某金融系统接收到客户名称数据customerNames，格式为字符串向量，其中每个元素使用GBK编码（例如""客戶A""，二进制形式为0xBFD7BDA4）。现在需要将这些数据转换为UTF-8编码以便后续国际化处理。请编写代码完成编码转换，要求输出结果为UTF-8编码的字符串向量并存储在result变量中。","customerNames = [""\xBF\xD7\xBD\xA4A"", ""\xBF\xD7\xBD\xA4B""]  // GBK编码的""客戶A""和""客戶B""","result = convertEncode(customerNames, ""gbk"", ""utf-8"")"
805,,,createDimensionTable,"在物联网场景中，需要创建一个不分区的小表存储智能设备元数据，包含设备ID、状态、位置、注册日期四个字段。设备ID与注册日期组合具有唯一性，要求对状态字段建立高效查询索引，并使用压缩算法优化日期存储。已知输入表变量名为deviceMeta，数据库路径为""dfs://iot""，输出结果变量需保存为result。请编写实现代码。","dbHandle = database(""dfs://iot"", VALUE, 2020.01.01..2024.12.31, engine=""PKEY"")
deviceMeta = table(
1001 1002 1003 as deviceID,
[""active"",""inactive"",""standby""] as status,
[""A12-F3"",""B5-02"",""C9-17""] as location,
[2023.05.01, 2022.11.15, 2024.01.20] as regDate
)","result = createDimensionTable(dbHandle, deviceMeta, ""devices"", 
compressMethods={""regDate"":""delta""}, 
primaryKey=[""deviceID"",""regDate""], 
indexes={""status"":""bloomfilter""}
)"
806,,,createDistributedInMemoryTable,在金融交易系统中，需要设计一个分布式存储结构，要求将不同上市公司股票数据按代号分散到不同服务器节点，每个节点内再按自然月拆分。输入表包含交易日（DATE）、股票代号（SYMBOL）、收盘价（DOUBLE）、成交量（INT）四列，最终存储结构变量名为result，请实现该逻辑。,"colNames = [""date"", ""symbol"", ""price"", ""volume""]
colTypes = [DATE, SYMBOL, DOUBLE, INT]
globalParts = [""AAPL"", ""GOOG"", ""TSLA""]
localRange = [2023.01.01, 2023.02.01, 2023.03.01]","result = createDistributedInMemoryTable(
tableName=""distributedTrade"",
colNames=colNames,
colTypes=colTypes,
globalPartitionType=VALUE,
globalPartitionScheme=globalParts,
globalPartitionColumn=""symbol"",
localPartitionType=RANGE,
localPartitionScheme=localRange,
localPartitionColumn=""date""
)"
807,,,cummin,"在物联网监控系统中，设备A和B每小时的温度数据存储在一个矩阵tempData中，设备A第一小时到第四小时记录为[12.5,13.2,11.8,14.0]，设备B对应时段记录为[15.0,14.5,14.3,16.1]。需要实时展示每个设备在每个监测点的历史最低温度，要求输出格式与输入矩阵一致，计算结果存入变量result。","tempData = matrix([12.5,13.2,11.8,14.0], [15.0,14.5,14.3,16.1])",result = cummin(tempData)
808,,,cumrank,"某物联网设备每小时采集一次温度数据，记录在向量temp中，包含[29, 32, NULL, 32, 28]五个时间点的读数。现在需要计算每个时刻的温度在当前及之前所有有效读数中的排名（NULL视为无效值，遇到相同温度取最大排名位置），并将结果转换为百分制形式。请输出计算结果到result。","temp = [29, 32, NULL, 32, 28]","result = cumrank(temp, ascending=false, ignoreNA=true, tiesMethod='max', percent=true)"
809,,,cumvarpTopN,在实时监控三个设备的温度数据时，需要按采集时间倒序动态计算每个设备最近5个有效温度值的总体离散程度。输入表结构为设备编号（deviceID）、温度（temp）、时间戳（ts）（允许有空值），输出结果存入变量result。,"
deviceID = take(1..3, 10)
temp = 39.6 38.2 40.1 37.9 38.8 39.2 41.5 36.7 38.0 39.3
ts = [2023.01.01T09:00:00, 2023.01.01T09:05:00, NULL, 2023.01.01T09:15:00, 2023.01.01T09:10:00, NULL, 2023.01.01T09:20:00, 2023.01.01T09:25:00, 2023.01.01T09:30:00, 2023.01.01T09:35:00]
t = table(deviceID, temp, ts)
","
result = select cumvarpTopN(temp, ts, 5, false) as result from t context by deviceID
"
810,,,cumwsumTopN,"在股票因子分析中，每个时间点需根据质量评分倒序选取前两只标的，计算其因子强度与流动性的滚动加权总和。已知输入向量X表示强度[5,3,8,2,6]，Y表示流动性[2,4,1,5,3]，排序依据S为质量评分[0.7,0.2,0.9,0.5,0.8]，输出结果存入变量result。","X = [5, 3, 8, 2, 6]
Y = [2, 4, 1, 5, 3]
S = [0.7, 0.2, 0.9, 0.5, 0.8]
","result = cumwsumTopN(X, Y, S, 2, ascending=false)
"
811,,,dayOfMonth,在物联网设备日志分析中，设备触发时间记录在变量trigger_time中，数据格式为NANOTIMESTAMP类型的向量，例如2023.08.03T14:23:45.000000000。需要提取每个事件发生的当月自然日序号，结果存入result。,"trigger_time = [2023.08.03T14:23:45.000000000, 2023.08.17T09:12:34.567890123, 2023.08.29T23:59:59.999999999]",result = dayOfMonth(trigger_time)
812,,,deny,某电商平台需禁止运营组“ops_team”在数据库“dfs://user_logs”和“dfs://transaction”中创建新表以防止误操作。请编写权限控制代码，要求结果存入变量result。,,"result = deny(""ops_team"", DBOBJ_CREATE, [""dfs://user_logs"",""dfs://transaction""])"
813,,,drop,"在物联网场景中，某湿度传感器每小时记录一次数据并存放在表envData中，包含5条时序记录（时间列为ts，数值为humidity）。现需剔除最新采集的3个数据点，保留前两条有效记录，如何处理？输入表结构如下:envData(ts[datetime], humidity[float])，要求输出结果变量名为result。","envData = table(2023.10.01T08:00:00 2023.10.01T09:00:00 2023.10.01T10:00:00 2023.10.01T11:00:00 2023.10.01T12:00:00 as ts, [45.6, 47.2, 48.9, 50.1, 52.3] as humidity)
","result = envData.drop(-3)
"
814,,,dropPartition,"在物联网设备监控系统中，分布式数据库按日期和设备区域存储传感器数据。数据库结构为组合分区，第一级按自然日值分区，第二级按设备ID范围分区（0-100,100-200）。当前需要清除2023.03.15当天所有属于低耗能区域（ID区间0-100）的异常监测记录，并同步更新数据库的分区结构信息。已知数据库路径为""dfs://sensorDB""，表名为""readings""，结构包含(collectTime,deviceID,metric)。请编写操作代码，要求输出结果存入变量result。","login(""admin"", ""123456"")
dbPath = ""dfs://sensorDB""
if existsDatabase(dbPath) {
dropDatabase(dbPath)
}

deviceIDs = 0..199
dates = 2023.03.13..2023.03.17

dbDate = database(, VALUE, dates)
dbZone = database(, RANGE, [0,100,200])
db = database(dbPath, COMPO, [dbDate, dbZone])

t = table(take(dates, 1000) as collectTime, rand(deviceIDs, 1000) as deviceID, rand(100.0, 1000) as metric)
pt = db.createPartitionedTable(t, ""readings"", `collectTime`deviceID)
pt.append!(t)
","dbHandle = database(dbPath)
partitionCondition = [2023.03.15, 0]
result = dropPartition(dbHandle, partitionCondition, tableName=`readings, deleteSchema=true)
"
815,,,eachPre,在物联网监测系统中，三个传感器连续三个时间点的记录值存储为3行3列矩阵sensor_data，每列对应一个传感器，每行为时间点。需计算各传感器每个时间点相对前一个时间点的增量，初始前值视为0。输入数据格式为矩阵sensor_data，输出结果为3行3列矩阵result。,"sensor_data = matrix(1 4 7, 2 5 8, 3 6 9)
","result = 0 -:P sensor_data
"
816,,,eq,"在生产线质量检测中，三个检测点连续三次抽样的尺寸误差数据存储为3x3矩阵sampleErrors（数据依次为0.2,0.5,0.3,0.5,0.5,0.4,0.6,0.5,0.1）。请识别哪些位置的误差恰好达到合格标准线0.5，将结果矩阵存入result。","sampleErrors = [0.2,0.5,0.3,0.5,0.5,0.4,0.6,0.5,0.1]$3:3",result = sampleErrors == 0.5
817,,,existsTable,"在物联网场景中，某设备日志数据库按设备ID哈希分区存储。现需要验证设备编号为""D23""的传感器数据表是否已经创建。已知数据库路径为""dfs://iotDevices""，目标表名为sensorD23。请检测该表是否存在并将结果存入变量result。","login(""admin"", ""123456"")
deviceIDs = ""D""+lpad(string(1..50), 2, '0')
dbPath = ""dfs://iotDevices""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
db = database(dbPath, HASH, [SYMBOL, 10], engine=""TSDB"")
if(!existsTable(dbPath, ""sensorD22"")) db.createPartitionedTable(table(1:0,`devID`ts`voltage,[SYMBOL,TIMESTAMP,DOUBLE]), ""sensorD22"", `devID)","result = existsTable(""dfs://iotDevices"", ""sensorD23"")"
818,,,fill_,在物联网设备状态表中，现有数据包含设备编号（device_id，INT类型）、运行状态（status，INT类型）和采集时间（ts，TIMESTAMP类型）。需要将运行状态列的所有数值更新为待机状态代码0，并保持其他列不变。请编写代码实现该批量更新操作，最终结果存储在变量result中。,"device = table(1001 1002 1003 as device_id, 1 2 3 as status, 2023.10.01T09:00:00 2023.10.01T09:01:00 2023.10.01T09:02:00 as ts)
","fill!(device, ""status"", 0)
result = device
"
819,,,fmin,"在优化一个二维目标函数时，初始猜测参数为[0, 0]，要求设置最大迭代次数不超过100次。已知该函数形式为 f(x,y) = (x-3)^2 + (y+2)^2 +5，输入数据已定义为myFunc函数，接受向量参数返回标量值。编写代码进行优化计算，并将结果字典存入result变量。","def myFunc(params) {
x = params[0]
y = params[1]
return pow(x-3.0, 2) + pow(y+2.0, 2) + 5
}","result = fmin(myFunc, [0.0, 0.0], maxIter=100)"
820,,,getAllDBs,"某金融机构需要定期检查当前节点部署的所有分布式数据库状态。已知已存在两个数据库""equity_market""和""bond_trades""，要求获取数据库信息字典，其中键为无前缀的数据库名称，值包含表标识信息和状态。请写出能返回该字典的代码，结果存入result。","login(""admin"", ""123456"")
if(existsDatabase(""dfs://equity_market"")) {dropDatabase(""dfs://equity_market"")}
if(existsDatabase(""dfs://bond_trades"")) {dropDatabase(""dfs://bond_trades"")}
db1 = database(""dfs://equity_market"", VALUE, 2023.01.01..2023.12.31)
db2 = database(""dfs://bond_trades"", RANGE, 0..100*10)",result = getAllDBs()
821,,,getDFSDatabases,"某用户需要查看自己在分布式存储系统中被授权访问的所有数据库列表。已知系统中存在一个按交易日分区的股票高频交易库""dfs://stockTAQ""，包含名为""trades""的表。请编写DolphinDB代码实现该需求，返回结果存储在变量result中。输入数据库路径变量为dbPath，表变量名为tradeTable，输出结果为字符串数组。","login(""admin"", ""123456"")
if(existsDatabase(""dfs://stockTAQ"")){
dropDatabase(""dfs://stockTAQ"")
}
dbPath = ""dfs://stockTAQ""
tradeTable = database(dbPath, VALUE, 2023.01.01..2023.01.05).createTable(`trades, `timestamp`symbol`price`volume, [DATETIME, SYMBOL, DOUBLE, LONG])",result = getDFSDatabases()
822,,,getDfsRebalanceConcurrency,管理员在调整物联网集群的数据平衡策略后，需要验证系统允许的并发再平衡任务上限是否已设为3。请编写代码获取该参数的当前值，并将结果存入变量result。已知系统已预先完成参数调整，无需额外输入数据，输出结果为整数。,resetDfsRebalanceConcurrency(3),result = getDfsRebalanceConcurrency()
823,,,getJobMessage,在实时日志分析系统中，用户提交的日志解析任务出现异常终止。已知异常任务的标识符为parseLog123，需要获取任务执行期间引擎生成的全部状态跟踪记录，包含时间戳和迭代进度。输入数据已存在变量jobID中，要求返回多行文本结果存入result变量。,"jobID = ""parseLog123""
def logParser(n){
(1..n).each{
try{
print(""Processing batch_""+it)
if(it==3){undefFunc()} // 人为制造错误节点
sleep(500)
}
catch(ex){println(ex)}
}
}
submitJob(jobID,""LogParser"",logParser,5)
getJobReturn(jobID,true)",result = getJobMessage(jobID)
824,,,getLeftStream,"在物联网传感器场景中，设备实时上传温度和环境压力数据。需要先将温度数据进行3周期移动求和处理，然后将处理结果与压力数据的首个采样值进行时序对齐连接。如何将温度处理引擎的计算结果实时传递到连接引擎的左侧输入通道？已知原始数据表名为sensor_readings，结构为(ts TIMESTAMP, device_id SYMBOL, temp DOUBLE, pressure DOUBLE)，最终连接结果需要包含(ts TIMESTAMP, device_id SYMBOL, sum_temp DOUBLE, first_pressure DOUBLE)。","share streamTable(1000:0, `ts`device_id`temp`pressure, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE]) as sensor_readings
output = table(100:0, `ts`device_id`sum_temp`first_pressure, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE])
leftStream = table(1:0, `device_id`ts`sum_temp, [SYMBOL, TIMESTAMP, DOUBLE])
rightStream = table(1:0, `device_id`ts`first_pressure, [SYMBOL, TIMESTAMP, DOUBLE])

windowJoin = createWindowJoinEngine(
name=""sensor_join"",
leftTable=leftStream,
rightTable=rightStream,
outputTable=output,
metrics=<[sum_temp, first_pressure]>,
matchingColumn=`device_id,
timeColumn=`ts,
windowSize=0,
useSystemTime=false
)
","tempProcessor = createReactiveStateEngine(
name=""temp_processor"",
metrics=<[ts, msum(temp,3)]>,
dummyTable=sensor_readings,
outputTable=getLeftStream(windowJoin),
keyColumn=""device_id""
)

subscribeTable(tableName=""sensor_readings"", actionName=""join_temp"", offset=0, handler=append!{tempProcessor}, msgAsTable=true)
insert into sensor_readings values(2023.08.01T09:00:00.000 + 1..6, take(`D001`D002,6), rand(100.0,6), rand(1000.0,6))
result = exec ts, device_id, sum_temp, first_pressure from output order by ts,device_id
"
825,,,getNodeType,在分布式物联网数据处理平台中，某个边缘设备需要根据当前节点的角色调整任务分发策略。请编写代码检测当前运行环境的节点类型代码，并将结果存储在变量result中。输入数据由系统环境自动提供，无需额外准备；输出为整型数值，例如0代表数据节点，4代表计算节点。,,result = getNodeType()
826,,,getSystemLoadAvg,在物联网设备的实时性能监控场景中，需要获取当前系统在过去1分钟内的平均工作负载数值用于资源预警。请编写代码获取该指标，输入数据直接来自操作系统内核统计，计算结果保留6位小数，将结果存储在浮点型变量result中。,// 注:该函数直接读取系统内核数据，无需额外数据准备,"result = round(getSystemLoadAvg(),6)"
827,,,getTabletsMeta,在物联网平台中，分布式数据库iotDB下的设备日志表按设备ID划分为多个分区。需要获取磁盘空间占用最大的前五个分区的元数据，包含路径、表名、记录条数和磁盘使用量，并将结果按占用降序排列存储在变量result中。输入数据格式为分区表device_logs，输出结果为表格，变量名result。,"if(existsDatabase(""dfs://iotDB"")) {
dropDatabase(""dfs://iotDB"")
}
db = database(""dfs://iotDB"", VALUE, 1..5)
n = 500000
t = table(rand(1..5, n) as deviceId, rand(100.0, n) as temp, rand(200, n) as pressure)
db.createPartitionedTable(t, `device_logs, `deviceId).append!(t)
n=700000
t=table(rand(1..5, n) as deviceId, rand(50.0, n) as humidity, rand(300, n) as voltage)
db.createPartitionedTable(t, `sensor_readings, `deviceId).append!(t)","result = getTabletsMeta(""/iotDB/%"", `device_logs, true, -1).sort!(`diskUsage desc).head(5)"
828,,,getTransactionStatus,在物联网设备数据入库过程中，运维人员需要实时追踪所有事务的执行状态以保障数据完整性。请编写DolphinDB代码查询当前数据库中所有事务的详细信息，包括事务编号、启动时刻、操作类别、当前进度状态及影响的分区总数，将结果以表格形式存储在变量result中。,,result = getTransactionStatus()
829,,,getTSDBCachedSymbolBaseMemSize,在分析高频股票行情数据的存储效率时，需要检测TSDB引擎中证券代码字典编码的内存占用情况。已知存在TSDB数据库dfs://stock_tick，其中包含数据表trades，该表具有SYMBOL类型的instrument列、DOUBLE类型的price列以及TIMESTAMP类型的ts列，且已存储交易数据。请获取当前字典编码缓存占用的内存字节数，并将结果存入变量result。,"
login(""admin"", ""123456"")
dbName = ""dfs://stock_tick""
tableName = ""trades""
if(existsDatabase(dbName)) dropDatabase(dbName)
db = database(dbName, VALUE, 2023.01.01..2023.01.03, TSDB)

schema = table(
array(SYMBOL,0) as instrument,
array(DOUBLE,0) as price,
array(TIMESTAMP,0) as ts
)
t = db.createPartitionedTable(schema, tableName, `ts, `instrument, sortColumns=`instrument)
data = table(take(`AAPL`TSLA`AMZN, 1000) as instrument, rand(100.0, 1000) as price, take(2023.01.01T09:30:00..2023.01.01T11:00:00, 1000) as ts)
t.append!(data)
","
result = getTSDBCachedSymbolBaseMemSize()
"
830,,,glm,"在金融风控中，需要根据客户的财务指标预测贷款违约情况。现有包含客户月收入（单位:美元）、资产负债率（小数形式）和是否违约（1表示违约，0表示正常）的历史数据表loan_data，请构建一个二分类预测模型。输入数据表结构为:[income:DOUBLE, debt_ratio:DOUBLE, default_flag:INT]，要求输出包含各特征系数统计量的分析结果，并将模型对象保存到result变量。","income = norm(50000, 10000, 500).round(2)
debt_ratio = uniform(0.0, 1.0, 500).round(3)
b0 = -3
b1 = 0.0001
b2 = 5

log_odds = b0 + b1*income + b2*debt_ratio
prob = 1 / (1 + exp(-log_odds))
default_flag = each(cumsum, prob > uniform(0.0, 1.0, 500)).int()

loan_data = table(income, debt_ratio, default_flag)
","ds = sqlDS(<select * from loan_data>)
result = glm(ds, `default_flag, `income`debt_ratio, ""binomial"")
"
831,,,hourOfDay,某物联网温度传感器每隔一段时间记录一次数据，时间戳存储在变量timestamps中，格式为TIMESTAMP，对应的温度值在temperature变量中。如何提取每个记录时间的小时部分，结果存入result？,"timestamps = [2023.10.05T05:15:00, 2023.10.05T15:48:00, 2023.10.05T22:30:00, 2023.10.06T08:00:00]
temperature = [23.5, 25.1, 22.8, 24.3]",result = hourOfDay(timestamps)
832,,,isort,"在股票分析场景中，给定一个包含股票代码、当日收益率和波动率的数据表（表名为stock_data，结构为symbol字符串类型，return浮点型，volatility浮点型），需要获取先按收益率降序排列、再按波动率升序排列的股票索引序列。输入数据示例:[`AAPL,3.5,0.8]、[`MSFT,-1.2,1.1]、[`GOOG,2.4,0.5]，要求输出结果为排序后的原始行号序列，存放在result变量中。","
stock_data = table(`AAPL`MSFT`GOOG as symbol, [3.5, -1.2, 2.4] as return, [0.8, 1.1, 0.5] as volatility)
","
result = isort([stock_data.return, stock_data.volatility], [false, true])
"
833,,,kmeans,某电商平台需要根据用户的购物频率和平均消费金额对客户进行分组分析。现有数据存储在user_behavior表中，包含user_id（STRING）、monthly_orders（INT）和avg_spend（DOUBLE）三列，共计150条记录。要求将客户分为3个具有不同消费特征的类型，并输出各类型中心点信息到result变量。,"user_behavior = table(150:0, `user_id`monthly_orders`avg_spend, [STRING, INT, DOUBLE])
orders1 = norm(5, 1.2, 50).int()
spend1 = norm(300.0, 50.0, 50)
orders2 = norm(15, 2.5, 50).int()
spend2 = norm(800.0, 100.0, 50)
orders3 = norm(25, 3.0, 50).int()
spend3 = norm(1500.0, 200.0, 50)
insert into user_behavior values (take(""A"",50).join(take(""B"",50)).join(take(""C"",50)), orders1.join(orders2).join(orders3), spend1.join(spend2).join(spend3))
","result = kmeans(select monthly_orders, avg_spend from user_behavior, 3, maxIter=250, init='k-means++', randomSeed=42)
"
834,,,loadNpy,在金融分析中，某股票分钟级波动率存储在名为volatility_2023.npy的二进制文件中，数据为3行2列的浮点矩阵，其中无效值以NaN填充。请读取该文件并将转换后的DolphinDB矩阵结果存入变量result，要求保留原始数据中的空值标记。,"
data = matrix([[0.023, NULL], [0.018, 0.035], [NULL, 0.041]])
saveAsNpy(""volatility_2023.npy"", data)
","
result = loadNpy(""volatility_2023.npy"")
"
835,,,loadTableBySQL,假设有一个分布式数据库中的分区表trades，存储了各股票代码的日频交易数据，包含字段sym（股票代码）、date（日期）、price（收盘价）、volume（成交量）。请从该表中提取股票代码为'IBM'、日期在2023年第一季度，且仅保留日期、收盘价、成交量三列的数据，并将结果存入变量result。,"n = 10000
t = table(
take('IBM', n) as sym,
2023.01.01 + rand(90, n) as date,
150.0 + rand(20.0, n) as price,
rand(100000, n) as volume
)
db = database(""dfs://stockDB"", VALUE, ['IBM','MSFT','AAPL'])
trades = db.createPartitionedTable(t, `trades, `sym).append!(t)
","st = sql(<select date, price, volume from trades where sym='IBM' and date between 2023.01.01:2023.03.31>)
result = loadTableBySQL(st)
"
836,,,loc,在物联网设备监控场景中，存在一个6行5列的传感器状态矩阵m，行标签为设备编号101至106，列标签为2023.05.01至2023.05.05的日期。需要获取编号103到105设备在第三到第四天的监测数据视图，当原始数据变更时结果同步更新，如何实现？,"m = rand(100, 6:5).rename!(101..106, 2023.05.01..2023.05.05)
m.setIndexedMatrix!()
","result = m.loc(rowFilter=103:105, colFilter=2023.05.03:2023.05.04, view=true)
"
837,,,lt,"在量化投资场景中，我们需要验证某个投资组合是否完全包含在另一个更大的资产池中。给定两个证券代码集合setA=set([4,6])和setB=set([8,9,4,6])，要求验证setA的所有元素是否都是setB的元素且两者不相等，最终返回布尔判断结果到result变量。","setA = set(4 6)
setB = set(8 9 4 6)",result = setA < setB
838,,,makeKey,"假设有一个物联网设备温度监测数据集，包含以下三列数据:  
- deviceID列（SYMBOL类型）:`D001`D002`D001  
- timestamp列（DATETIME类型）:2023.01.01T08:00:00, 2023.01.01T08:05:00, 2023.01.01T08:10:00  
- temp列（INT类型）:28, 32, 30  

请创建一个字典，其中每个键由deviceID和时间戳组合生成，对应值为温度值。然后查询设备D001在2023.01.01T08:10:00时刻的温度读数，将结果存入变量result。","
deviceID = `D001`D002`D001  
timestamp = [2023.01.01T08:00:00, 2023.01.01T08:05:00, 2023.01.01T08:10:00]  
temp = 28 32 30
","
compositeKeys = makeKey(deviceID, timestamp)  
tempDict = dict(compositeKeys, temp)  
result = tempDict[makeKey(`D001, 2023.01.01T08:10:00)]  
"
839,,,mannWhitneyUTest,"现有两组来自不同传感器监测的每日风速数据（单位:m/s），传感器A记录了[3.2, 4.1, 5.0, 2.9, 3.8]，传感器B记录了[4.5, 3.7, 4.9, 5.2, 4.0, 3.5]。需要验证这两个传感器的测量结果分布是否存在显著性差异，要求返回计算结果对象。输入数据格式为两个数值向量sensorA和sensorB，输出结果存入变量result。","sensorA = [3.2, 4.1, 5.0, 2.9, 3.8]
sensorB = [4.5, 3.7, 4.9, 5.2, 4.0, 3.5]","result = mannWhitneyUTest(sensorA, sensorB, false)"
840,,,matchPhrasePrefix,"某物联网平台存储了设备日志数据，表log_data包含字段deviceID（INT）、logID（INT）、message（STRING）。现需筛选出所有包含短语""error occurred""且该短语后接以""sen""开头单词的日志条目，返回符合条件的数据到result变量。已知message列已创建英文文本索引（不区分大小写，不使用词干提取）。","messageData = [
""Error occurred in sensor unit A"",
""Error occurred during system startup"",
""Warning: sensor unit B is overheating"",
""Error occurred with sensor network failure"",
""No issues detected in server cluster""
]
log_data = table([1001,1001,1002,1002,1003] as deviceID, [1,2,1,2,1] as logID, messageData as message)

if existsDatabase(""dfs://iotDB""):
dropDatabase(""dfs://iotDB"")
db = database(directory=""dfs://iotDB"", partitionType=VALUE, partitionScheme=[1001,1002,1003], engine=""PKEY"")
pt = createPartitionedTable(db, log_data, ""log_pt"", ""deviceID"", primaryKey=`deviceID`logID, 
indexes={""message"":""textindex(parser=english, full=false, lowercase=true, stem=false)""})
pt.tableInsert(log_data)
","result = select * from pt where matchPhrasePrefix(message, ""error occurred"", ""sen"")
"
841,,,matchPrefixSuffix,"在物联网设备日志中筛选出包含以""err""开头且""tion""结尾的单词的记录。输入表devLog包含字段deviceId（INT）、ts（TIMESTAMP）、logContent（TEXT），文本索引已设置在logContent列。输出结果需包含所有匹配字段并赋值给result。","devLog = table([1001,1002,1003,1004] as deviceId, 2023.01.01T00:00:00 + 0..3 as ts, [
""Sensor errorcondition detected at station"",
""Normal temperature variation"",
""Exception: communication failure"",
""Errornetworkconnection lost""
] as logContent)

if existsDatabase(""dfs://iotDB""):
dropDatabase(""dfs://iotDB"")
db = database(""dfs://iotDB"", VALUE, 1000..2000, engine=""PKEY"")
pt = createPartitionedTable(db, devLog, ""ptLog"", ""deviceId"", indexes={""logContent"":""textindex(parser=english, full=false, lowercase=true, stem=true)""})
pt.tableInsert(devLog)
","result = select * from pt where matchPrefixSuffix(logContent, ""err"", ""tion"")
"
842,,,maxDrawdown,"某物联网设备的运行效率数据按小时记录在一个数组中，表示设备连续工作时的累积效率值（单位:%）。给定输入向量efficiencyMetrics = [120, 135, 110, 140, 95, 125, 90]，要求计算该设备运行效率的最大回撤率。输入数据为数值型向量，输出结果需存储在变量result中，返回浮点数值。","|
efficiencyMetrics = [120, 135, 110, 140, 95, 125, 90]","|
result = maxDrawdown(efficiencyMetrics, true)"
843,,,med,"在评估三个基金产品的净值稳定性时，需要确定每个产品的典型净值水平。给定矩阵fundNAV包含4个时间点的数据:基金A列为[1200,1250,1300,缺失]，基金B列为[950,缺失,1000,1050]，基金C列为[800,850,900,950]。忽略缺失数据，计算各基金净值分布的中间值存入result。","fundA = [1200, 1250, 1300, NULL]
fundB = [950, NULL, 1000, 1050]
fundC = [800, 850, 900, 950]
fundNAV = matrix(fundA, fundB, fundC)",result = med(fundNAV)
844,,,mimax,在物联网温度监测系统中，四个传感器每半小时记录一次数据，形成矩阵sensorReadings（6行4列，行表示时间递增，列表示不同传感器）。需要找出每个传感器在最近3次读数中温度峰值的首次出现位置，忽略不足窗口的初始计算结果。输入矩阵变量名为sensorReadings，输出结果存入变量result。,"sensorReadings = matrix(
28 32 30 29,
31 NULL 28 30,
33 29 31 28,
30 31 29 27,
29 34 NULL 32,
32 28 33 31
)","result = mimax(sensorReadings, 3)"
845,,,miminLast,"在物联网温度监测场景中，设备每两小时记录一次温度数据。现有时间索引序列temps，包含5个元素:[NULL, 15, 14, 14, 16]，对应时间戳为2023.03.01T00:00至2023.03.01T08:00。需要找出每个时间点前4小时窗口内的最低温度位置（当存在多个最小值时取最右侧）。请输出计算结果到result变量。","
timePoints = 2023.03.01T00:00 + 0..4 * 2h
tempValues = [NULL, 15, 14, 14, 16]
temps = indexedSeries(timePoints, tempValues)
","
result = miminLast(temps, 4h)
"
846,,,mLowRange,"假设有一个温度传感器每日采集的数据，存储在时间索引序列X中，其中日期为2023.01.01到2023.01.05，对应的温度值依次为[NULL, 22.5, NULL, 23.0, 21.8]。需要计算每个时间点前2天的窗口内，左侧连续出现更高温度的天数（包含当日），当窗口内至少有1个有效数据时才进行计算，结果存储在变量result中。输入数据格式为时间索引序列，输出结果为相同格式的序列。","date = 2023.01.01 + 0..4
values = [NULL, 22.5, NULL, 23.0, 21.8]
X = indexedSeries(date, values)
","result = mLowRange(X, window=2d, minPeriods=1)
"
847,,,mmse,"在股票市场中，给定某只股票过去的价格变动作为自变量x，以及对应的收益率作为因变量y，需要计算每个时间点前4个观测的滚动回归系数和预测误差，且窗口内至少需要2个有效数据。请用x数组[0.03, 0.02, -0.01, 0.04, -0.02]和y数组[0.05, 0.03, -0.02, 0.06, 0.01]生成计算结果，要求最终结果存储在变量result中。输入数据格式为向量，输出为包含两个向量的元组。","x = [0.03, 0.02, -0.01, 0.04, -0.02]
y = [0.05, 0.03, -0.02, 0.06, 0.01]","result = mmse(y, x, 4, 2)"
848,,,mslr,"在物联网传感器监测中，某设备每5分钟采集一次温度（自变量）和功耗（因变量）数据，现有6条连续记录分别为温度[22.5,24.8,25.3,23.7,26.0,24.2]℃和功耗[105,112,115,108,120,116]瓦。现需用4个时间点的滑动窗口计算能耗与温度的线性关系，要求窗口至少包含3个有效数据点，最终返回各窗口的回归方程参数。","powerConsumption = [105, 112, 115, 108, 120, 116]
temperature = [22.5, 24.8, 25.3, 23.7, 26.0, 24.2]
","result = mslr(powerConsumption, temperature, 4, 3)
"
849,,,mvarp,某工厂传感器每半小时采集一次环境湿度数据，存储于名为humidity_table的表中，包含时间戳列ts（TIMESTAMP类型）和湿度值列humidity（FLOAT类型）。请计算每个时间点最近4小时滑动窗口中的总体离散程度，要求窗口内至少有3个有效观测值。结果存入变量result。,"humidity_table = table(2023.06.15T08:00:00 + 0 30 90 150 210 270 330 minute as ts, [45.2, 47.8, NULL, 49.1, 48.3, 46.5, 48.9] as humidity)","result = mvarp(humidity_table.humidity, 4h, 3)"
850,,,nanosecond,在分析高频交易订单的纳秒级时间戳时，给定一个包含两个NANOTIMESTAMP元素的向量timeStamps，分别为2023年7月15日9点30分25.123456789和9点30分25.987654321。需要提取每个时间点的纳秒分量生成整型向量，结果存入result变量。,"timeStamps = [2023.07.15 09:30:25.123456789, 2023.07.15 09:30:25.987654321].nanotimestamp()",result = nanosecond(timeStamps)
851,,,pair,某物联网平台需要记录设备状态变化的时间点和对应状态码。已知前一次记录时间为prevTime=2023.10.10T09:30:00，状态码prevCode=101；当前记录时间为currentTime=2023.10.10T09:30:15，状态码currentCode=208。请将前次与当前的时间点组合为一个时间区间对，状态码组合为状态变迁对，并将这两个数据对合并存储到结果变量result中。输入数据均为标量，输出要求为包含两个数据对的元组。,"prevTime = 2023.10.10T09:30:00
currentTime = 2023.10.10T09:30:15
prevCode = 101
currentCode = 208","result = [prevTime:currentTime, prevCode:currentCode]"
852,,,partial,在量化策略中，需要动态创建特征计算函数。给定一个双参数函数用于计算乘方值（base^exponent），现需构造一个新函数始终执行立方运算。输入变量x=5，请编写代码实现该功能，并将计算结果存入result变量。输入数据为标量数值型变量x，输出结果为数值型标量。,x = 5,"def powOperation(a, b): return a ** b\ncube = partial(powOperation, 3)\nresult = cube(x)"
853,,,randBeta,某物联网传感器采集的湿度调节比例服从特定Beta分布，形状参数为1.8和2.3。现需要生成3个调节比例模拟值，并将结果存入变量result。输入数据格式为直接传入参数，输出为长度为3的浮点数向量。,,"result = randBeta(1.8, 2.3, 3)"
854,,,randExp,在物联网设备的故障模拟中，假设某设备的故障间隔时间服从均值为3.5分钟的指数分布。现在需要使用时间戳索引和分布参数，生成5个符合该分布的随机间隔秒数（输入参数名为mean_val=3.5，生成数量num=5），将结果存储在变量result中。输入数据为数值型参数，输出结果为长度为5的浮点向量。,"mean_val = 3.5
num = 5","result = randExp(mean_val, num)"
855,,,randomForestClassifier,"在物联网设备故障预测场景中，现有传感器数据表device_data包含状态列status（0正常，1故障）、温度temperature、振动vibration字段。需要基于设备温度和振动特征建立分类模型，其中故障类别数为2，要求构建包含15棵决策树的森林模型，每次分裂时选择50%的特征列，其他参数保持默认。请编写实现代码，输入表结构为[status:int,temperature:double,vibration:double]，输出结果存储到变量result。","device_data = table(100:0, `status`temperature`vibration, [INT,DOUBLE,DOUBLE])
normal = take(0, 50)
temp_normal = norm(25.0, 2.0, 50)
vib_normal = norm(2.5, 0.3, 50)
insert into device_data values (normal, temp_normal, vib_normal)

fault = take(1, 50)
temp_fault = norm(45.0, 5.0, 50)
vib_fault = norm(8.0, 1.2, 50)
insert into device_data values (fault, temp_fault, vib_fault)
","ds = sqlDS(<select * from device_data>)
result = randomForestClassifier(ds, `status, `temperature`vibration, 2, 0.5, 15)
"
856,,,randUniform,"某物联网平台需要为75个设备生成环境噪声水平数据，每个设备的噪声值应在30.5分贝到75.5分贝之间均匀分布。已知设备编号存储在变量deviceIDs中，格式为[""D""+字符串序号]。请生成符合要求的噪声数值数组并将结果存入变量result。","
deviceIDs = ""D""+lpad(string(1..75), 4, '0')
","
result = randUniform(30.5, 75.5, size(deviceIDs))
"
857,,,remoteRun,"在物联网系统中，本地存储了设备基础信息表devices，包含设备编号device_id和最后检测日期last_check。所有远程节点均已共享设备状态表status_data，结构为[device_id, online_time]。请编写DolphinDB代码，获取每个设备最后一次检测日期之后的所有在线记录，合并后存储在result变量中。","devices = table(`D001`D002`D003 as device_id, 2023.09.01 2023.09.05 2023.09.10 as last_check)
nodeList = dict([""nodeA"", ""nodeB""], [""10.0.0.1"", ""10.0.0.2""], [8900, 8901])","def queryStatus(devTable){
result = dict()
foreach(node in keys(nodeList)){
host = nodeList[node].host
port = nodeList[node].port
conn = xdb(host, port)
res = remoteRun(conn, ""select device_id, online_time from status_data where online_time > (select last_check from devTable where device_id=status_data.device_id)"")
result[node].append!(res)
}
return result.values().unionAll(false)
}
result = queryStatus(devices)"
858,,,remoteRunCompatible,在物联网场景中，远程数据库连接句柄conn已建立，本地有传感器数据表deviceLog包含id（整型）、value（浮点型）两列。需要将本地定义的预处理函数（计算数值序列的均值并加2）传输到远程节点执行，函数接收传感器数值向量参数，最终计算结果存入变量result。,"deviceLog = table(1..5 as id, [102.4, 98.7, 105.2, 97.8, 103.3] as value)
def dataPreprocess(v){avg(v) + 2}","result = remoteRunCompatible(conn, dataPreprocess, exec value from deviceLog)"
859,,,resetRecoveryWorkerNum,在金融市场实时交易系统中，当前节点的数据块故障恢复效率不足，需要临时将并行恢复任务的工作线程数量提升至4个并验证配置更改结果。请编写代码实现此调整，并将最终生效的线程数存入变量result。,,"resetRecoveryWorkerNum(4)
result = getRecoveryWorkerNum()"
860,,,restore,"在物联网系统中，分布式数据库dfs://deviceDB中的表sensor_log按日期和设备型号分区。由于需要修复型号为A100的设备在所有日期的监测数据，现需从备份目录/home/iot_bak恢复该型号对应的全部分区到原表（路径通配模式为""%/A100""），并强制覆盖不一致的分区。请编写恢复代码并将结果存入变量result，输入备份目录、数据库路径、表名已存在，输出结果为恢复的分区路径数组。",,"result = restore(""/home/iot_bak"", ""dfs://deviceDB"", ""sensor_log"", ""%/A100"", force=true)"
861,,,rowMax,给定某商品的三个不同市场每分钟报价数据表marketPrices，包含列priceA、priceB、priceC，数据类型均为DOUBLE。请逐行找出三个市场中的最高报价，将结果存储在变量result中作为浮点型向量，输出顺序与原始数据行序一致。,"marketPrices = table(
10.45 10.32 10.55 as priceA,
10.50 10.28 10.54 as priceB,
10.48 10.35 10.60 as priceC
)","result = rowMax(marketPrices.priceA, marketPrices.priceB, marketPrices.priceC)"
862,,,searchK,"在股票分析中，某股票的最近交易价格数据存在缺失（用NULL表示）。给定一个数值型向量priceList，包含元素[1200, NULL, 1500, 1100, 1250, 1100, NULL]，请找出该股票有效价格中第二低的价格，并将结果赋值给变量result。输出结果为整数类型。","priceList = [1200, NULL, 1500, 1100, 1250, 1100, NULL]","result = searchK(priceList, 2)"
863,,,semiMonthEnd,在股票交易分析中，需要根据每月自定义的分界日将交易数据按半月的结束日期分组，统计每个半月内的平均成交价和总交易量。给定交易表包含日期（date）、价格（price）、数量（qty）三个字段，表名为trades，日期范围为2023.01.05至2023.03.22。要求使用20日作为半月分界日，结果变量名为result。,"dates = 2023.01.05 + 7 * 0..10
price = [45.3, 47.1, 48.9, 46.5, 44.8, 49.2, 50.1, 51.6, 52.3, 53.0, 54.5]
qty = [1200, 1500, 1350, 1600, 1420, 1550, 1480, 1620, 1570, 1650, 1400]
trades = table(dates, price, qty)
","result = select avg(price) as avg_price, sum(qty) as total_qty from trades group by semiMonthEnd(date, 20)
"
864,,,setDefaultCatalog,用户在处理多个行业数据目录时，需要在完成科技板块分析后，重置默认目录环境以确保后续操作不受影响。已知系统中存在'sectorTech'和'sectorEnergy'两个目录，请编写代码实现该操作，并检查当前默认目录状态，将结果存储在result中。输入数据为这两个目录的定义，输出为字符串变量result。,"
createCatalog(""sectorTech"")
createCatalog(""sectorEnergy"")
","
setDefaultCatalog(""sectorTech"")
setDefaultCatalog("""")
result = getCurrentCatalog()
"
865,,,setRetentionPolicy,某物联网平台使用分布式数据库存储每日设备状态监测数据，数据库按日期值分区。现需要配置数据策略:保留最近30天的数据，并将7天前的数据自动迁移到低成本存储区。已知数据库路径为dfs://iot_db，请编写配置代码，执行后返回结果的变量名为result。,"db = database(""dfs://iot_db"", VALUE, 2023.01.01..date(now()))","result = setRetentionPolicy(db, 30*24, 0, 7*24)"
866,,,sin,在物联网设备中，多个传感器记录了不同时间点的弧度值，数据以3行3列的矩阵形式存储在sensorData变量中（数据类型:double型矩阵）。请计算各测量点对应的正弦波动值，并将计算结果存储在result变量中（输出要求:double型矩阵，与输入尺寸相同）。,"sensorData = matrix([0.0, 0.5236, 1.0472], [1.5708, 0.7854, 0.3927], [2.3562, 2.7489, 3.1416])
","result = sin(sensorData)
"
867,,,stat,某物联网温度传感器连续记录了9次温度数据，其中第3次和第6次因故障未获取到有效值（记为NULL）。数据存储于变量sensorData中，格式为包含NULL值的数值向量。请使用适当的统计方法，返回该数据的平均值、最大值、最小值、有效观测数、总记录数、中位数和标准差，并将结果存储在变量result中。,"sensorData = [23.5, 25.0, NULL, 22.8, 24.3, NULL, 21.7, 26.2, 20.5]",result = stat(sensorData)
868,,,sum2,某物联网系统监测三个设备在四个时段的电流值，数据存储在4行3列的矩阵deviceCurrent中，其中第一列第2个时段、第三列第1个时段的数据缺失。请计算每个设备在所有有效时段的电流平方和，结果存入向量result。,"deviceCurrent = matrix([2.1,NULL,4.5,5.0], [3.2,6.4,NULL,1.8], [NULL,2.7,3.9,4.3])",result = sum2(deviceCurrent)
869,,,summary,某期货公司需要分析某个时段内不同合约的价格波动情况。给定一个包含时间戳（ts）、成交价格（price）、成交量（volume）和合约代码（contract_code）的分布式哈希分区表（按合约代码分为8个区），请生成一个汇总统计表要求:1）包含30、60、90三个百分位值 2）使用20%随机分区样本计算 3）数值精度达到小数点后四位。输入表变量为future_data，输出结果存入result。,"login(""admin"", ""123456"")
dbName = ""dfs://futures""
if(existsDatabase(dbName)){
dropDatabase(dbName)
}
db = database(dbName, HASH, [SYMBOL, 8])
n=5000
ts = 2024.01.01T00:00:00 + 1..n
price = norm(5000, 100, 50)  // 正态分布模拟价格
volume = rand(10000, n)
contract_code = take(`C2301`C2305`C2309`C2312, n)

t = table(ts, price, volume, contract_code)
future_data = db.createPartitionedTable(t, ""futures"", `contract_code)
future_data.append!(t)","result = summary(loadTable(dbName, ""futures""), percentile=[30,60,90], precision=0.0001, partitionSampling=0.2)"
870,,,temporalAdd,给定一个日期列表date，包含2023.09.28、2023.09.29、2023.09.30，需要根据国内证券交易所的交易日历，计算每个日期向后调整2个交易日后生成新的日期序列。已知输入数据格式为DATE类型的向量，变量名为date；要求输出格式为DATE类型的向量，变量名为result。,"
date = [2023.09.28, 2023.09.29, 2023.09.30]
","
result = temporalAdd(date, 2, `SSE)
"
871,,,tmlast,在物联网设备监控场景中，设备每隔不同时间上报温度值（包含缺失数据），需为每个检测时刻计算其前三秒时间窗口内的最后一个有效温度。输入表m包含时间戳（timestamp，TIMESTAMP类型）和温度（temperature，INT类型，可为空），输出结果需在result中展示时间戳、温度及窗口最后一个值。,"T = [2023.01.01T00:00:01.000, 2023.01.01T00:00:02.500, 2023.01.01T00:00:03.500, 2023.01.01T00:00:04.000, 2023.01.01T00:00:06.000]
X = [25, NULL, 27, 26, NULL]
m = table(T as timestamp, X as temperature)
","result = select *, tmlast(timestamp, temperature, 3s) from m
"
872,,,tmLowRange,"在物联网场景中，某水质监测设备每小时采集一次PH值，部分数据因设备故障丢失（记为NULL）。给定时间戳序列T为[2023.05.20 09:00:00, 09:10:00, 09:20:00, 09:30:00, 09:40:00, 09:50:00]，对应的PH值序列X为[7.2, NULL, 6.8, 6.5, NULL, 6.9]。请计算每个时间点前20分钟窗口内，每个PH值左侧连续比它高的有效记录的个数，结果存入变量result。","T = 2023.05.20T09:00:00.000 + 0 10m 20m 30m 40m 50m
X = [7.2, NULL, 6.8, 6.5, NULL, 6.9]
","result = tmLowRange(T, X, 20m)
"
873,,,tmwsum,在实时监控系统中，温度传感器每秒采集一次数据，湿度传感器每5秒采集一次归一化值。现在需要计算每个温度读数时间点前3分钟内的温度与湿度的乘积累计和。给定输入表包含时间戳t（分钟精度）、温度值x和湿度系数y三列，输出结果列result为各时刻滑动窗口内的内积值。,"T = 2023.01.01T09:01:00 2023.01.01T09:02:00 2023.01.01T09:03:00 2023.01.01T09:06:00 2023.01.01T09:07:00 2023.01.01T09:08:00 2023.01.01T09:09:00 2023.01.01T09:10:00 2023.01.01T09:11:00 2023.01.01T09:12:00
X = 2.1 2.3 2.5 2.7 2.9 3.1 3.3 3.5 3.7 3.9
Y = 0.15 0.18 0.21 0.24 0.27 0.30 0.33 0.36 0.39 0.42
m = table(T as t, X as x, Y as y)
","result = select *, tmwsum(t, x, y, 3m) as result from m
"
874,,,triggerPKEYCompaction,"在物联网设备监控场景中，系统记录到两组时序数据块需要立即优化读取性能。已知数据块标识为[""c7d9e2a8-3b6f-4a1c-9e1d-0f8a3b2c1d9e"", ""e5f2d741-0ac8-49db-b2c3-7f8e6d5a4b10""]，请编写同步执行存储优化的代码。输入数据为STRING类型的向量chunks，输出结果存入变量result。","chunks = [""c7d9e2a8-3b6f-4a1c-9e1d-0f8a3b2c1d9e"", ""e5f2d741-0ac8-49db-b2c3-7f8e6d5a4b10""]
","result = triggerPKEYCompaction(chunkId=chunks, async=false)
"
875,,,wls,"假设在物联网设备功耗分析中，需要根据三个环境传感器采集的温度、湿度、光照强度数据建立加权回归模型。给定5个时间点的设备功耗数据power_usage为[12.8, 14.5, 16.1, 18.9, 20.2]，温度读数temperature为[25, 26, 28, 30, 32]，湿度humidity为[58, 62, 65, 68, 70]，光照illumination为[1200, 1350, 1420, 1550, 1600]。现要求在不考虑截距项的情况下，使用权重为[0.9, 1.2, 0.8, 1.1, 0.95]的加权回归，输出模型系数向量。假设输入数据已存入矩阵sensor_data，如何编写代码获取结果并存入result？","power_usage = [12.8, 14.5, 16.1, 18.9, 20.2]
temperature = [25, 26, 28, 30, 32]
humidity = [58, 62, 65, 68, 70]
illumination = [1200, 1350, 1420, 1550, 1600]
sensor_data = matrix(temperature, humidity, illumination).transpose()
weights = [0.9, 1.2, 0.8, 1.1, 0.95]
","result = wls(power_usage, sensor_data, weights, false, 0)
"
876,,,writeObject,"某股票当日交易数据需要持久化存储，包括成交量（标量vol=1500000）、买卖价矩阵bidAsk=[[43.25,43.30],[43.20,43.35]]、活跃交易员集合traders=`A001`B002`C003、价格区间交易量字典priceLevels={1:500000,2:750000,3:300000}、最新交易信息元组tradeData=(15:30:00.000,43.28)，请将这些结构化数据打包保存到""trade.bin""文件，并返回文件是否存在的验证结果到result（布尔类型）。","vol = 1500000
bidAsk = matrix([43.25, 43.30], [43.20, 43.35])
traders = set(`A001`B002`C003)
priceLevels = dict(1 2 3, 500000 750000 300000)
tradeData = (15:30:00.000, 43.28)
fileName = ""trade.bin""","fout = file(fileName, ""w"")
fout.writeObject(vol)
fout.writeObject(bidAsk)
fout.writeObject(traders)
fout.writeObject(priceLevels)
fout.writeObject(tradeData)
fout.close()
result = file(fileName).exists()"
877,,,year,某电商平台需要统计一组订单日期的年份分布。给定一个时间类型的向量dates，包含三个日期:2015年3月18日、2018年7月22日和2015年9月5日。请编写代码提取这些日期对应的年份，并将结果存储在result变量中。输入数据格式为时间向量，输出要求为整数向量。,"dates = [2015.03.18, 2018.07.22, 2015.09.05]",result = year(dates)
878,,,all,"某物联网平台需验证所有状态标记为""正常""的设备温度是否均低于38度。现有设备监测表deviceData包含三列:deviceId(STRING)、temperature(DOUBLE)、status(STRING)，当status为""正常""时要求temperature必须小于38。请编写验证代码，结果存入变量result。","deviceData = table(
`D001`D002`D003`D004 as deviceId,
[36.5, 38.2, 37.8, 37.9] as temperature,
[""正常"", ""异常"", ""正常"", ""正常""] as status
)
","def checkTemp(row){
return row.status == ""正常"" ? row.temperature < 38 : true
}
result = all(checkTemp, deviceData)
"
879,,,anova,"在物联网场景中，某工程师采集了三类传感器设备（D1/D2/D3）每分钟的能耗数据各5条，数据按列存储在矩阵m中，结构为3列（D1列为[45,48,52,47,50]，D2列为[55,58,53,57,54]，D3列为[60,62,58,61,59]）。现需要验证不同设备类型的能耗是否存在显著差异，要求使用统计分析方法返回包含p值、F统计量、组间/组内平方和与自由度的字典result。","d1 = 45 48 52 47 50
d2 = 55 58 53 57 54
d3 = 60 62 58 61 59
m = matrix(d1, d2, d3)",result = anova(m)
880,,,brute,"在物联网传感器布局优化中，假设传感器信号强度模型为二元函数sensorSignal，其返回值越小信号衰减越严重。给定二维坐标参数x范围为[-5,5]划分为30个等间距点，y范围为[-5,5]划分为30个等间距点，请通过网格搜索法找出信号最弱点的坐标及其对应强度值。要求输入为自定义函数sensorSignal，输出结果存储在变量result中，包含xopt（坐标向量）和fopt（最小强度值）。","def sensorSignal(pos) {
x = pos[0]
y = pos[1]
// 模拟三个信号发射塔的叠加信号
mainTower = 50 - 3*pow(x-2,2) - 4*pow(y+1,2)
backupTower1 = 20*exp(-(pow(x+3,2)+pow(y-2,2))/2)
backupTower2 = 15*exp(-(pow(x-4,2)+pow(y+3,2))/3)
return -(mainTower + backupTower1 + backupTower2)  // 取负值转换为最小化问题
}
ranges = ((-5,5,30), (-5,5,30))
","result = brute(sensorSignal, ranges, finish=NULL)
"
881,,,byColumn,"在物联网场景中，三个传感器连续5分钟采集的数值分别存储在矩阵m中，列为sensor1、sensor2、sensor3，数值依次为(5,8,3,2,9)、(4,6,7,1,5)、(12,10,8,6,4)。请对每列数据计算3分钟移动平均（忽略初始不足窗口的数据点），结果存入变量result，要求保持矩阵结构。","m = matrix([5,8,3,2,9], [4,6,7,1,5], [12,10,8,6,4])","result = byColumn(mavg{,3}, m)"
882,,,cdfBinomial,某生产线每天生产15个零件，已知单个零件为次品的概率是0.25。质检部门需要计算当随机抽取样本时，出现3到8个次品数的累计概率分布值。给定试验次数参数为15，成功概率参数0.25，输入数值向量为3到8的连续整数，输出计算结果到变量result。,X = 3..8,"result = cdfBinomial(15, 0.25, X)"
883,,,cj,在物联网场景中，需要为所有监测设备生成全量时间点的记录组合。现有设备信息表device_info包含设备ID和类型两列（3行数据），时间表time_points包含检测时刻列（3个时间点）。请创建包含所有设备与时间点组合的二维表，结果变量名为result。,"device_info = table(1001..1003 as device_id, `sensor`actuator`controller as device_type)
time_points = table(2023-01-01T00:00:00 2023-01-01T00:30:00 2023-01-01T01:00:00 as check_time)
","result = cj(device_info, time_points)
"
884,,,constantDesc,假设有一个来自温度传感器的2x3矩阵数据，其中某些位置可能存在缺失值。请获取该矩阵的结构属性信息，包括是否为索引矩阵、是否存在空值、总行数和列数，并将结果存储在变量中。,"
sensorData = matrix([35.6, NULL, 28.9], [NULL, 22.1, 18.5])
","
result = constantDesc(sensorData)
"
885,,,convertExcelFormula,在股票分析中，需要将Excel公式转换为DolphinDB表达式。原公式基于A列（收盘价）和B列（交易量）的第3至20行数据，其中公式计算A3到A5单元格的平均值。输入数据格式为字符串公式，变量名为自动生成，输出结果应存储在变量result中，格式为字符串。,// 无需准备额外数据，参数直接在转换函数中指定,"result = convertExcelFormula(""AVERAGE(A3:A5)"", ""A"", ""B"", 3, 20)"
886,,,covarMatrix,你有五只股票过去100个交易日的收益率数据，存储在100行5列的矩阵中（列名为STOCK1至STOCK5）。需要计算这些股票收益率之间的协方差关系，并将结果矩阵存储在变量result中。输入矩阵每列对应一只股票，每行对应一个交易日，输出结果应为5×5的协方差矩阵。,"returnsMatrix = rand(10.0, 500).reshape(100:5).rename!(""STOCK""+string(1..5))
","result = covarMatrix(returnsMatrix)
"
887,,,createAsofJoinEngine,在期货交易场景中，需要实时将最新成交价格与市场最优报价进行关联，计算每笔成交价与对应时刻买卖中间价的绝对差值。左表trades包含字段trade_time(时间戳)、contract(合约代码)、price(价格)；右表quotes包含quote_time(时间戳)、contract(合约代码)、bid(买价)、ask(卖价)。要求创建异步连接引擎，输出结果包含时间戳、合约代码、成交价、对应买价、对应卖价及价差，结果存入result表并按全局时间顺序排列。,"share streamTable(1:0, `trade_time`contract`price, [TIMESTAMP, SYMBOL, DOUBLE]) as trades
share streamTable(1:0, `quote_time`contract`bid`ask, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE]) as quotes
share table(100:0, `time`contract`trade_price`bid_price`ask_price`spread, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE, DOUBLE, DOUBLE]) as result

// 构造测试数据
tmp1 = table(2023.06.15T09:30:00.000+[100, 300, 500] as trade_time, take(`IF2306,3) as contract, [3500.5, 3501.0, 3502.5] as price)
tmp2 = table(2023.06.15T09:30:00.000+[50, 200, 400, 600] as quote_time, take(`IF2306,4) as contract, [3499.8, 3500.2, 3501.5, 3502.0] as bid, [3500.5, 3501.0, 3502.0, 3503.5] as ask)

trades.append!(tmp1.sortBy!(`trade_time))
quotes.append!(tmp2.sortBy!(`quote_time))
","ajEngine = createAsofJoinEngine(
name=""ajFutures"",
leftTable=trades,
rightTable=quotes,
outputTable=result,
metrics=<[price, bid, ask, abs(price - (bid+ask)/2)]>,
matchingColumn=`contract,
timeColumn=[`trade_time, `quote_time],
sortByTime=true
)

subscribeTable(tableName=""trades"", actionName=""feedTrades"", handler=appendForJoin{ajEngine, true}, msgAsTable=true)
subscribeTable(tableName=""quotes"", actionName=""feedQuotes"", handler=appendForJoin{ajEngine, false}, msgAsTable=true)

sleep(150)
result = select * from result
"
888,,,createCrossSectionalEngine,在实时股票交易系统中，数据流包含时间戳、股票代码、行业分类、成交价和成交量。要求每当同一时间点的行业数据积累到5条时，立即计算该行业的最新平均价格和累计成交量，且仅保留最新时间点的数据。输入表名为trades，包含列:time（TIMESTAMP）、sym（SYMBOL）、sector（SYMBOL）、price（DOUBLE）、qty（INT）。输出表result需包含time、sector、avgPrice、totalQty字段，如何实现？,"share streamTable(1000:0, `time`sym`sector`price`qty, [TIMESTAMP, SYMBOL, SYMBOL, DOUBLE, INT]) as trades
","outputTable = table(1000:0, `time`sector`avgPrice`totalQty, [TIMESTAMP, SYMBOL, DOUBLE, INT])
engine = createCrossSectionalEngine(
name=""sectorAggregator"",
metrics=<[avg(price), sum(qty)]>,
dummyTable=trades,
outputTable=outputTable,
keyColumn=`sym,
triggeringPattern=""keyCount"",
triggeringInterval=5,
timeColumn=`time,
contextByColumn=`sector,
lastBatchOnly=true,
snapshotDir=""/snapshot"",
snapshotIntervalInMsgCount=1000
)
subscribeTable(tableName=""trades"", actionName=""sectorStats"", handler=append!{engine}, msgAsTable=true)
result = outputTable
"
889,,,createDailyTimeSeriesEngine,"在股票交易系统中，需要按两个时段（上午09:30至11:30和下午13:00至15:00）对每只股票的成交量进行30分钟滚动累加。要求引擎在新交易日首次收到数据时保留前一日未清理的分组，对未收到数据的股票用空值填充计算结果。输入数据表结构为trades(date DATE, time TIME, sym SYMBOL, volume INT)，输出结果存入output1(time DATETIME, sym SYMBOL, sumVolume INT)表，最终结果变量名为result。","# 创建带日期和时间分量的流数据表
share streamTable(1000:0, `date`time`sym`volume, [DATE, TIME, SYMBOL, INT]) as trades
# 创建输出结果表
share table(10000:0, `time`sym`sumVolume, [DATETIME, SYMBOL, INT]) as output1
","# 创建跨时段滚动聚合引擎，设置保留历史分组和空值填充
engine = createDailyTimeSeriesEngine(
name=""daily_agg"",
windowSize=1800,
step=1800,
metrics=<[sum(volume)]>,
dummyTable=trades,
outputTable=output1,
timeColumn=`date`time,
keyColumn=`sym,
sessionBegin=09:30:00 13:00:00,
sessionEnd=11:30:00 15:00:00,
keyPurgeDaily=false,
fill=""null"",
forceTriggerTime=60
)

# 注入测试数据
insert into trades values(2024.05.06, 09:25:30.000, `AAPL, 100)
insert into trades values(2024.05.06, 09:35:15.000, `MSFT, 200)
insert into trades values(2024.05.06, 14:55:45.000, `AAPL, 150)
insert into trades values(2024.05.07, 09:30:05.000, `MSFT, 300)

# 获取计算结果
result = select * from output1
"
890,,,createDeviceEngine,实时监控多个物联网设备温度，需计算每个设备最近5个时间点的温度移动均值，并保留原始数据。输入表包含设备ID（SYMBOL）、时间戳（TIMESTAMP）、温度（DOUBLE），变量名为sensorData。输出表需包含设备ID、时间戳、原始温度及移动平均温度，变量名为statsResult，并按设备分组且保持数据输入顺序。,"dummy = table(1:0, `deviceID`ts`temperature, [SYMBOL, TIMESTAMP, DOUBLE])
statsResult = table(100:0, `deviceID`ts`temperature`mavg_temp, [SYMBOL, TIMESTAMP, DOUBLE, DOUBLE])
share(statsResult, `sharedStats)
","engine = createDeviceEngine(
name=""iotMonitor"",
metrics=[<temperature>, <mavg(temperature,5)>],
dummyTable=dummy,
outputTable=sharedStats,
keyColumn=""deviceID"",
keepOrder=true
)
result = engine
"
891,,,createIPCInMemoryTable,"某物联网平台需要实时传输压力传感器数据，要求通过共享内存方式实现毫秒级数据传递。已知输入流表为共享流数据表sensorStream，结构为(deviceId SYMBOL, time TIMESTAMP, pressure FLOAT)，请创建可缓存150万条记录的共享内存表用于接收数据，并建立实时订阅转发机制。","share streamTable(10000:0, `deviceId`time`pressure, [SYMBOL, TIMESTAMP, FLOAT]) as sensorStream

def generateSensorData(mutable t):
n = 500
device = take(`D001`D002, n)
ts = 2023.06.01T09:30:00.000 + 1..n
press = 95.0 + rand(5.0, n)
t.append!(table(device, ts, press))
","ipcHandle = createIPCInMemoryTable(1500000, ""ipc_sensor"", `deviceId`time`pressure, [SYMBOL, TIMESTAMP, FLOAT])

def appendToIPC(mutable ipcTable, msg):
ipcTable.append!(msg)

subscribeTable(tableName=""sensorStream"", actionName=""sensor_forward"", offset=0, handler=appendToIPC{ipcHandle}, msgAsTable=True)

# 触发数据生成
generateSensorData(sensorStream)
result = loadIPCInMemoryTable(""ipc_sensor"")
"
892,,,createStreamDispatchEngine,在物联网设备监控场景中，需要将来自1万个传感器的实时数据（包含设备ID、温度、湿度字段）均匀分发到4个处理节点，每个节点对应独立的内存表。要求分发时记录每个批次从接收数据到完成分发的耗时，且输出表需要额外包含处理耗时和精确时间戳字段。已知输入流表名为deviceStream，输出表结构相同但命名为node0到node3，最终调用结果存入result变量。,"deviceSchema = table(1:0, `devId`temp`humi, [STRING,DOUBLE,DOUBLE])
enableTableShareAndPersistence(table=streamTable(10000:0,`devId`temp`humi,[STRING,DOUBLE,DOUBLE]), tableName=`deviceStream)

outputNodes = []
for(i in 0..3){
outputTable = table(10000:0, `devId`temp`humi`elapsed`timestamp, [STRING,DOUBLE,DOUBLE,LONG,INT])
outputNodes.append!(outputTable)
}
","dispatchEngine = createStreamDispatchEngine(
name=""iotDispatch"",
dummyTable=deviceSchema,
keyColumn=""devId"",
outputTable=outputNodes,
dispatchType=""uniform"",
outputElapsedTime=true,
mode=""queue""
)

subscribeTable(tableName=`deviceStream, actionName=""dispatchSub"", handler=dispatchEngine, msgAsTable=true)
result = dispatchEngine
"
893,,,cummdd,"某量化策略的资产净值随时间变化如下:netValue = [120, 150, 135, 180, 160, 190, 140, 200]。需要依次计算每个时间点的累计最大回撤率（结果保留四位小数），输出变量名为result。请写出实现代码。","netValue = [120, 150, 135, 180, 160, 190, 140, 200]","result = round(cummdd(netValue), 4)"
894,,,cumsum4,"在物联网设备监测场景中，某装置的两个传感器连续记录了三组振动幅度偏离值。矩阵m的第0列表示传感器X的读数[2,3,6]，第1列为传感器Y的读数[4,5,7]。请计算每个传感器在每个采集时刻的振动能量累计值（各数据点的四次方历史总和），输出结果为3行2列矩阵，存储在变量result中。","m = matrix(2 3 6, 4 5 7)",result = cumsum4(m)
895,,,datehour,"在物联网设备日志中，传感器上报了两个精确到秒的时间戳记录，分别为""2023.08.15T14:25:47""和""2023.08.15T16:08:59""。现需要将这些时间统一转换为包含年月日和整点小时的标准化格式进行存储分析，输入数据为类型为STRING的向量timestamps，请输出转换后的DATEHOUR类型结果到变量result。","timestamps = [""2023.08.15T14:25:47"", ""2023.08.15T16:08:59""]
timestamps = [datetimeParse(x, ""%Y.%m.%dT%H:%M:%S"") for x in timestamps]
","result = datehour(timestamps)
"
896,,,derivative,"假设有一个金融模型使用自然指数函数来模拟资产增长，需要计算在时间点t=0.5年、1.0年和2.0年时的瞬时增长率。输入数据t是一个浮点型向量[0.5, 1.0, 2.0]，变量名为t。请编写代码求出各时间点的导数值，结果存储在result变量中，输出为浮点型向量。","t = [0.5, 1.0, 2.0]","result = derivative(exp, t, 0.001, 1, 5)"
897,,,distance,"物流公司需要评估两个仓库与对应配送中心之间的直线运输距离。仓库位置为[西经120.5005度北纬35.8815度, 东经130.7010度南纬22.4478度]，存入变量points1；配送中心位置为[东经121.4737度北纬37.7749度, 东经131.0212度南纬25.2744度]，存入变量points2。要求返回各仓库到对应配送中心的精确距离（米），结果存入result变量。","p1 = point(-120.5005, 35.8815)
p2 = point(130.7010, -22.4478)
points1 = [p1, p2]
points2 = [point(121.4737, 37.7749), point(131.0212, -25.2744)]","result = distance(points1, points2)"
898,,,dropIPCInMemoryTable,在金融实时风控场景中，存在一个跨进程共享的订单监控表risk_orders，包含四列（order_id字符串类型，trade_time时间戳类型，amount双精度类型，status整型）。现需在完成数据分析后回收该表占用的内存资源，请编写操作代码。要求输入表结构准确对应，输出结果存储在变量result中。,"sharedOrders = createIPCInMemoryTable(`risk_orders, 2000, `order_id`trade_time`amount`status, [SYMBOL,TIMESTAMP,DOUBLE,INT])",result = dropIPCInMemoryTable(`risk_orders)
899,,,dynamicGroupCumsum,"在物联网设备能耗监控中，设备根据累计能耗动态调整状态类别（低/中/高负载）。每个时间点记录设备的当前累计能耗值、当前负载等级，以及前一次的累计能耗和负载等级。请计算每个负载等级下的实时累计能耗总和，结果变量名为result。输入数据格式为:cumValue=[15,25,40,55], prevCumValue=[NULL,15,25,40], membership=[0,1,2,2], prevMembership=[NULL,0,1,2], groupCount=3。","cumValue = 15 25 40 55
prevCumValue = [NULL,15,25,40]
membership = [0,1,2,2]
prevMembership = [NULL,0,1,2]
groupCount = 3","result = dynamicGroupCumsum(cumValue, prevCumValue, membership, prevMembership, groupCount)"
900,,,files,在物联网设备日志管理中，某天的日志存储在路径'/iot_logs/20231005'下，其中包含device1.log、data.dat、device2.log三个文件。需要获取该目录下所有日志文件（扩展名为.log）的详细信息，包括文件名、类型、大小、最后访问和修改时间，并将结果存储在变量result中。,"
directory = ""/iot_logs/20231005""
if(not exists(directory)) createDir(directory)
saveText(1..10, directory+""/device1.log"")
saveText(1..5, directory+""/data.dat"")
saveText(1..8, directory+""/device2.log"")
","
result = files(""/iot_logs/20231005"", ""%.log"")
"
901,,,getDynamicConfig,在金融高频交易系统中，运维团队需要快速查阅当前支持热更新的性能调优参数清单，用于动态优化内存分配策略。请输入为空，输出结果为包含所有可即时生效配置项名称的字符串向量，并将结果存入变量result。,,result = getDynamicConfig();
902,,,getMemLimitOfQueryResult,在监控物联网设备数据分析系统的内存使用情况时，需要验证当前单个查询结果允许占用的最大内存值。已知系统配置将内存阈值设置为384MB，请编写代码获取该限制数值并以MB为单位存储到变量result中（输入数据需通过函数调用设置，结果保留原始字节单位转换后的整数值）。,"setMemLimitOfQueryResult(384 * 1024 * 1024)
","result = round(getMemLimitOfQueryResult() / 1024 / 1024)
"
903,,,getMemLimitOfTaskGroupResult,在物联网边缘计算场景中，系统管理员需要验证当前节点处理批量传感器数据时允许的最大内存使用量。已知之前配置为5GB，请编写代码获取该限制的字节数，并将结果存储在变量result中。,"setMemLimitOfTaskGroupResult(5 * 1024 * 1024 * 1024)
","result = getMemLimitOfTaskGroupResult()
"
904,,,getReactiveMetrics,"在物联网设备监控场景中，某实时计算引擎需要跟踪传感器温度和湿度的变化指标。已知已创建名为""iot_engine""的状态计算引擎，输入流表结构为(deviceID STRING, ts TIMESTAMP, temp DOUBLE, humidity DOUBLE)，需要获取该引擎当前配置的各项计算指标。请输出包含指标名称和对应计算逻辑的两列结果表，保存到变量result。","dummy = streamTable(1:0, `deviceID`ts`temp`humidity, [STRING,TIMESTAMP,DOUBLE,DOUBLE])
outputTable = streamTable(1:0,`deviceID`ts`metricName`value,[STRING,TIMESTAMP,STRING,DOUBLE])
metrics = [<ts>, <temp-humidity>, <mavg(temp,3)>]
createNarrowReactiveStateEngine(name=""iot_engine"", metrics=metrics, metricNames=[""time_ref"",""temp_humidity_diff""], dummyTable=dummy, outputTable=outputTable, keyColumn=`deviceID)","result = getReactiveMetrics(""iot_engine"")"
905,,,getRules,"在一个物联网设备监控系统中，存在两个温度告警规则引擎分别处理不同厂商的传感器数据。已知引擎名称为""thermalGuard_A""和""thermalGuard_B""，需要获取这两个监控引擎的完整配置详情，包括各规则集的具体条件表达式、策略执行方式以及是否存在关联的告警回调函数，最终将查询结果存入变量result。","deviceSchema = table(1:0, `sn`voltage`temp, [SYMBOL,DOUBLE,DOUBLE])
alertTable = table(100:0, `sn`timestamp`anomaly`triggeredRules, [SYMBOL,TIMESTAMP,BOOL,BOOL[]])

ruleSet_A = dict(
""THRESHOLD"", 
[< temp > 38.5 >, < voltage between 220 250 xor temp < 35 >]
)
thermalGuardA = createRuleEngine(
name=""thermalGuard_A"",
ruleSets=ruleSet_A,
dummyTable=deviceSchema,
outputColumns=`sn`anomaly,
outputTable=alertTable,
policy=""any"",
ruleSetColumn=""sn""
)

ruleSet_B = dict(
""CRITICAL_ZONE"", 
[< temp < -15 >, < temp > 55 && voltage < 180 >]
)
thermalGuardB = createRuleEngine(
name=""thermalGuard_B"",
ruleSets=ruleSet_B,
dummyTable=deviceSchema,
outputColumns=`sn`anomaly,
outputTable=alertTable,
policy=""all"",
ruleSetColumn=""sn""
)
","result = getRules([""thermalGuard_A"", ""thermalGuard_B""])
"
906,,,getStreamingRaftGroups,在物联网边缘计算场景中，为确保数据同步可靠性，需要筛选出节点规模达到3个以上的流数据高可用组。已知各节点返回的Raft组信息表包含id（整型）和sites（逗号分隔的节点地址字符串）字段，请获取去重后的有效组信息并将结果赋值给result。,,"result = select id, sites from pnodeRun(getStreamingRaftGroups) where size(split(sites, "","")) >=3 and isDuplicated([id,sites], FIRST)=false"
907,,,getStreamingStat,实时监控系统中需要检查所有订阅节点的平均处理延迟和最新消息延迟，输入数据包含当前节点的订阅连接状态，输出结果为发布节点别名、累计消息延迟和最后消息延迟的表格，变量名为result。,"
// 创建流数据表并启用共享
st1 = streamTable(1000:0, `timestamp`value, [TIMESTAMP, DOUBLE])
enableTableShareAndPersistence(st1, ""sensor_stream"")

// 创建订阅处理函数
def dataHandler(mutable t, msg) {
t.append!(msg)
}

// 建立两个不同订阅
subscribeTable(tableName=""sensor_stream"", actionName=""alert_system"", handler=dataHandler, msgAsTable=true)
subscribeTable(tableName=""sensor_stream"", actionName=""monitor_dashboard"", handler=dataHandler, msgAsTable=true)

// 发送测试数据
data = table(2023.01.01T00:00:00.000 + 1..1000 as timestamp, rand(100.0,1000) as value)
sensor_stream.append!(data)
","
result = select publisher, cumMsgLatency, LastMsgLatency from getStreamingStat().subConns where publisher like ""sensor_stream%""
"
908,,,getTSDBTableIndexCacheStatus,"某物联网平台采用TSDB引擎存储百万级传感器数据，运维人员需要监控当前数据库中各表的索引内存占用情况以优化资源配置。已知存在数据库""dfs://iot_sensors""，包含按设备ID哈希分区的温控表""thermo_records""和振动表""vibration_logs""，请编写Docker脚本获取这些表对应的Level File索引内存使用详情，要求返回包含数据库名、chunk标识、表名及内存占用的结构化结果。","t1 = table(1 2 3 1 2 3 as deviceID, 2023.06.01T00:00:00..2023.06.01T00:00:05 as ts, 25.4 26.1 24.9 25.8 26.3 24.7 as temperature)
t2 = table(1 2 3 1 2 3 as deviceID, 2023.06.01T00:00:00..2023.06.01T00:00:05 as ts, 0.12 0.15 0.18 0.11 0.14 0.17 as amplitude)

dbName = ""dfs://iot_sensors""
if existsDatabase(dbName):
dropDatabase(dbName)
db = database(dbName, HASH, [INT, 3], engine='TSDB')

thermoTable = db.createPartitionedTable(t1, ""thermo_records"", ""deviceID"", sortColumns=`ts)
vibrationTable = db.createPartitionedTable(t2, ""vibration_logs"", ""deviceID"", sortColumns=`ts)

thermoTable.append!(t1)
vibrationTable.append!(t2)

flushTSDBCache()
","result = getTSDBTableIndexCacheStatus()
"
909,,,getUsersByGroupId,"某金融机构的管理员需要查看风控部门所有成员的账户信息。已知组标识变量groupId为字符串""risk_control""，要求编写代码获取该组成员列表，结果存入变量result。输入数据为字符串类型的groupId，输出结果为字符串数组类型的result。","|
groupId = ""risk_control""","|
result = getUsersByGroupId(groupId)"
910,,,gpFit,用户训练了一个遗传编程模型，用于根据实时行情数据预测未来一天的股票收益率。输入数据包含时间戳、股票代码、收益率（ret）、短期均线（ma）和波动率（volatility）字段，存储在名为stream的流数据表中。现在需要获取适应度最高的3个候选公式及其相关性指标，要求输出结果包含公式表达式、适应度评分和公式间相关性矩阵。,"t = table(2023.01.01T09:30:00..2023.01.01T09:30:30 as time, take(`AAPL,31) as symbol, 0.01+0.1*rand(31,1) as ret, 10.0+rand(31.0,1) as ma, 0.05+0.01*rand(31.0,1) as volatility)
metrics = [[t.ret],[t.ma],[t.volatility]]
engine = createGPLearnEngine(stream=t, metrics=metrics, y=t.ret, splitRatio=0.8, windowSize=30, labelCol=`ret, maxLen=1000)
","result = engine.gpFit(programNum=3, programCorr=true)
"
911,,,hour,"在物联网场景中，有三个温度传感器记录数据的精确时间戳（格式为DATETIME向量，变量名timestamps），需要提取每个事件发生对应的整点时刻部分。给定输入数据为[""2023.05.15 09:30:45"",""2023.05.15 14:15:20"",""2023.05.15 23:59:59""]，请生成包含各时间对应钟点数的整型向量result。","timestamps = [2023.05.15T09:30:45, 2023.05.15T14:15:20, 2023.05.15T23:59:59]",result = hour(timestamps)
912,,,ifNull,"在物联网系统中，温度传感器采集的数据存储在向量sensorData中，其中存在缺失值（用NULL表示）。需要将缺失的部分替换为对应位置的默认值defaultValues中的数值，生成填补后的结果result。输入数据格式为sensorData=[3,,5,,7]（int类型向量），defaultValues=[0,2,0,4,0]（int类型向量），输出结果为result=[3,2,5,4,7]（int类型向量）","sensorData = int([3,,5,,7])
defaultValues = [0,2,0,4,0]","result = ifNull(sensorData, defaultValues)"
913,,,indexedSeries,"在物联网场景中，两个温度传感器分别在不同时间点采集到数据（时间戳为2023.01.01 09:00:00到2023.01.01 09:30:00的每分钟数据，其中sensorA缺失09:10分数据，sensorB缺失09:20分数据）。需要计算每分钟两传感器的温度总和，缺失时刻显示空值。输入数据格式为:时间数组t1=[09:00,09:05,09:15,09:25,09:30]，sensorA数值a=[36.1,36.3,36.5,36.7,36.9]；时间数组t2=[09:00,09:10,09:20,09:30]，sensorB数值b=[22.8,22.9,23.0,23.1]，输出结果存储在result变量中。","t1 = 2023.01.01T09:00:00 2023.01.01T09:05:00 2023.01.01T09:15:00 2023.01.01T09:25:00 2023.01.01T09:30:00
a = [36.1, 36.3, 36.5, 36.7, 36.9]
t2 = 2023.01.01T09:00:00 2023.01.01T09:10:00 2023.01.01T09:20:00 2023.01.01T09:30:00
b = [22.8, 22.9, 23.0, 23.1]","s1 = indexedSeries(t1, a)
s2 = indexedSeries(t2, b)
result = s1 + s2"
914,,,initcap,"某物联网平台采集的设备型号数据存储在变量deviceList中，格式为STRING向量。要求对每个字符串中由非字母数字分隔的单词进行处理:各单词首字母大写，其余字母小写，例如将""3rd#unit测试""转换为""3Rd#Unit测试""。请输出转换后的结果到result变量。","deviceList = [""sensor-node-v2.5"", ""3rd#unit测试"", ""DATA-COLLECTOR_001""]
","result = initcap(deviceList)
"
915,,,invStudent,"在物联网设备异常检测中，需要根据自由度为8的t分布计算不同概率阈值对应的分界值。已知四个累计概率值分别为0.02、0.15、0.85和0.98，请生成对应的分布临界点并存入result变量。输入数据格式为标量df=8，浮点型向量X=[0.02,0.15,0.85,0.98]，输出结果保留6位小数。","df = 8
X = [0.02, 0.15, 0.85, 0.98]","result = invStudent(df, X)"
916,,,isMonthEnd,假设有一个设备维护时间记录表，其中记录了四次维护操作的timestamp列数据，分别为2023-02-28 08:30:00.000、2023-03-15 14:20:00.000、2023-04-30 23:59:59.999和2023-05-01 00:00:05.000。需要验证哪些维护操作恰好在当月的最后一天执行。其中输入数据存储在TIMESTAMP类型向量maintenance_ts，输出结果为布尔值向量result。,"maintenance_ts = [timestamp(""2023-02-28 08:30:00.000""), timestamp(""2023-03-15 14:20:00.000""), timestamp(""2023-04-30 23:59:59.999""), timestamp(""2023-05-01 00:00:05.000"")]",result = isMonthEnd(maintenance_ts)
917,,,isNothing,在金融系统中，需要判断订单处理函数是否接收到可选的分红比率参数。已知交易函数包含价格和可选比率参数，当用户未传递比率时需要特殊标识。给定一个调用示例:函数被调用两次，第一次只传股价，第二次传入股价和空值。如何检测这两种情况下比率参数的传入状态？输入数据格式为函数调用返回值，要求输出包含两个布尔结果的向量存入result。,"def tradeCheck(price, ratio): return isNothing(ratio)
","case1 = tradeCheck(98.5,)
case2 = tradeCheck(102.3, NULL)
result = [case1, case2]
"
918,,,isortTop,"给定某物联网传感器采集的温度和湿度数据，温度越高、湿度越低的样本优先级越高。请找出满足该排序规则的前2个样本对应的索引。输入数据为元组，包含温度数组tmp=[29,31,30,32,28]和湿度数组humidity=[65,60,62,58,63]，变量名分别为tmp和humidity。输出结果为索引数组存储在result变量中。","tmp = [29,31,30,32,28]
humidity = [65,60,62,58,63]","result = isortTop([tmp,humidity], 2, [false,true])"
919,,,isValley,"在股票分析中，给定一个包含时间戳（timestamp，datetime类型）和价格（price，double类型）的表stockData，其中price列的数据为[160.0, 155.0, 155.0, 155.0, 158.0]。请检测price列中所有满足非严格条件的谷值点（即允许相邻元素等于当前值），并将布尔结果向量存储在变量result中。","stockData = table([2023.10.01T09:30:00, 2023.10.01T09:31:00, 2023.10.01T09:32:00, 2023.10.01T09:33:00, 2023.10.01T09:34:00] as timestamp, [160.0, 155.0, 155.0, 155.0, 158.0] as price)","result = isValley(stockData, false)"
920,,,listRemotePlugins,"在部署海外物联网平台时，需要确认某个非结构化数据库连接插件的最新可用版本。给定插件仓库地址为""http://plugins.dolphindb.com/plugins""，要求获取该仓库中指定数据库适配器的版本信息表，并将查询结果存储在变量result中。输入参数包括字符串类型的插件名称""mongodb""和目标仓库地址字符串，输出结果为包含插件名称和版本信息的二维表结构。",,"result = listRemotePlugins(""mongodb"", ""http://plugins.dolphindb.com/plugins"")
"
921,,,loadIPCInMemoryTable,"在物联网应用中，多个进程需要访问实时采集的传感器数据。假设已存在一个跨进程共享内存表""sensor_shared""，其包含timestamp（时间戳）、sensor_id（传感器编号）和value（数值）三列。请编写代码加载该表，并将结果存储在变量result中。","
// 创建共享内存表并插入示例数据（模拟其他进程已创建的场景）
def createIPCInMemoryTable(tableName, capacity, colNames, colTypes){
return table(capacity:0, colNames, colTypes).share(tableName, ""SHARED"")
}

sharedTable = createIPCInMemoryTable(""sensor_shared"", 1000, `timestamp`sensor_id`value, [TIMESTAMP, SYMBOL, DOUBLE])
data = table(2023.10.01T00:00:00.000 + 0..5 as timestamp, take(`A`B`C, 6) as sensor_id, rand(100.0, 6) as value)
sharedTable.append!(data)
","
result = loadIPCInMemoryTable(""sensor_shared"")
"
922,,,loadRecord,"某工业设备二进制日志文件中每条记录包含传感器ID（固定20字节字符串）、时间戳（4字节整型）、温度（4字节浮点）、湿度（4字节浮点）。已知文件头有100字节的元数据，需要读取第6到第10条记录（共5条）。请写出加载这些数据并赋值给result的代码。输入变量:文件路径""/iot/sensors.bin""，输出变量:内存表result。","
// 定义数据模式，包含固定长度字段
schema = [
(""sensor_id"", SYMBOL, 20),
(""timestamp"", INT),
(""temperature"", FLOAT),
(""humidity"", FLOAT)
]
","
// 跳过100字节头部，读取5条记录
result = loadRecord(""/iot/sensors.bin"", schema, skipBytes=100, count=5)
"
923,,,log10,在分析无线信号强度时，某监测系统记录了四个基站的初始功率值，存储为2行2列的矩阵m，元素依次为1、10、100、1000。需要将这些功率值转换为以10为底的对数单位，生成结果矩阵result。,"m = matrix([1,10],[100,1000])",result = log10(m)
924,,,matchSuffix,"在物联网设备日志分析中，需要查找所有包含以特定错误编号结尾的故障描述记录。给定数据表包含设备ID、时间戳和日志信息，其中日志信息列已建立英文文本索引（不启用词干提取）。要求查询日志信息中包含以""404""结尾的单词的所有记录，并将结果保存为result变量。输入表结构:log_table(id INT, ts TIMESTAMP, message STRING)，输出结果需包含所有原始字段。","login(""admin"", ""123456"")
if(existsDatabase(""dfs://iotDB"")){
dropDatabase(""dfs://iotDB"")
}
db = database(directory=""dfs://iotDB"", partitionType=VALUE, partitionScheme=1..3, engine=""PKEY"")

deviceLogs = [
""Sensor connection error404 detected"",
""Temperature module fail404: critical"",
""Battery low warning"",
""Network timeout error404: retrying"",
""Motor vibration alert"",
""error404: pressure sensor offline"",
""Normal shutdown completed"",
""error500: internal system failure""
]

t = table(1..8 as id, 2023.09.01T09:00:00 + 1..8 as ts, deviceLogs as message)

pt = createPartitionedTable(db, t, ""log_table"", ""id"", `id, indexes={""message"":""textindex(parser=english, full=false, lowercase=true, stem=false)""})
pt.append!(t)
","result = select * from pt where matchSuffix(message, ""404"")
"
925,,,maxIgnoreNull,"有两组温度传感器记录的每小时数据，存储在向量sensorA和sensorB中。sensorA = [25.3, 空值, 28.7, 22.1]，sensorB = [24.8, 26.5, 空值, 22.0]。请找出每个小时的有效最高温度:当某小时某一传感器数据缺失时取可用值，两者都有效时取较大值。要求输入为两个4元素向量，输出结果存入result变量。","sensorA = [25.3, NULL, 28.7, 22.1]
sensorB = [24.8, 26.5, NULL, 22.0]
","result = maxIgnoreNull(sensorA, sensorB)
"
926,,,migrate,"某物联网平台的设备数据原存储在数据库""dfs://devices""的表""sensor_2023""中，已备份到目录""/iot/backup""。现需要将该表恢复到新数据库""dfs://devices_2024""并重命名为""sensor_latest""。已知备份数据采用VALUE分区且与新库分区方案兼容，输入数据格式为备份目录路径字符串和数据库表结构描述，请生成恢复操作代码并将结果存入变量result。","
backupDir = ""/iot/backup""
if(existsDatabase(""dfs://devices"")) dropDatabase(""dfs://devices"")
deviceIDs = `D001`D002`D003`D004
n = 5000
t = table(rand(deviceIDs, n) as deviceId, rand(2023.01.01T00:00:00..2023.01.05T23:59:59, n) as ts, rand(0..100, n) as reading)
db = database(""dfs://devices"", VALUE, deviceIDs)
sensorData = db.createPartitionedTable(t, ""sensor_2023"", `deviceId).append!(t)
backup(backupDir, <select * from sensorData>, true)
","
result = migrate(""/iot/backup"", ""dfs://devices"", ""sensor_2023"", ""dfs://devices_2024"", ""sensor_latest"")
"
927,,,pack,某物联网设备采集了以下数据:设备编号（16位整数，变量名deviceID），工作状态（布尔值，变量名isActive），当前温度（单精度浮点，变量名temperature）。请将这些数据按格式要求转换为二进制流，结果存入变量result。输入数据deviceID=1024，isActive=true，temperature=23.5，输出格式为二进制字节流（变量名result）。,"deviceID = 1024
isActive = true
temperature = 23.5f","result = pack(""h?f"", deviceID, isActive, temperature)"
928,,,plotHist,"物联网公司采集了某设备1000分钟的温度数据，存储为向量tempData。需要可视化温度分布情况，绘制柱状图要求分为15个区间，重点关注15到35度范围，图表标题显示""Daily Temperature Distribution""。请生成图表对象存储到result变量。","tempData = norm(25, 3, 1000)","result = plotHist(tempData, 15, 15:35, ""Daily Temperature Distribution"")"
929,,,power,假设有一个投资信息表investments，包含三列:principal（本金，整型），annual_rate（年利率，浮点型），years（投资年数，整型）。需要计算每个投资在复利情况下的最终金额，并将结果存储在result中。要求最终金额计算公式为:本金 × (1 + 年利率)的年份次方。,"principal = [10000, 50000, 200000]
annual_rate = [0.038, 0.042, 0.035]
years = [5, 3, 7]
investments = table(principal, annual_rate, years)
","result = select principal * pow(1 + annual_rate, years) as final_amount from investments
"
930,,,randChiSquare,在金融风险管理的压力测试中，需要基于自由度参数7.3生成10个卡方分布的随机数样本，并计算这些值的算术平均数。输入数据包括自由度7.3和样本数10，输出结果为浮点型标量存储在result变量。,,"result = randChiSquare(7.3, 10).avg()"
931,,,randGamma,在模拟某个金融产品的日收益率时，假设收益率服从形状参数为3.5、尺度参数为1.8的Gamma分布。请生成3个样本数据作为模拟结果，要求最终结果存储在变量名为result的浮点型向量中。," shape_param = 3.5
scale_param = 1.8
sample_count = 3
"," result = randGamma(shape_param, scale_param, sample_count)
"
932,,,readBytes,"某智能水表每小时生成二进制日志文件，文件前16字节包含设备型号（前8字节ASCII编码）和累计流量数值（后8字节64位整型）。现需从""water_meter.dat""文件中读取完整头部信息，并将解析结果存储在变量result中，要求输出格式为包含型号和数值的元组。","
fileHandle = file(""water_meter.dat"", ""w"")
// 写入设备型号""D200Pro""（8字节）和整数流量值9876543210（8字节）
headerData = ""D200Pro"".ljust(8).encode() + longToString(9876543210)
fileHandle.writeBytes(headerData)
fileHandle.close()
","
f = file(""water_meter.dat"")
header = f.readBytes(16)
model = string(subBytes(header, 0, 8)).trim()
flowValue = long(header.subBytes(8, 8))
result = (model, flowValue)
"
933,,,ridgeBasic,在股票收益预测场景中，你需要建立一个带L2正则项的回归模型来分析市场指数和交易量对目标股票收益率的影响。输入数据表包含时间戳、收益率(y_col)、市场指数(x1)、交易量(x2)字段，要求返回包含系数估计值、标准差、t统计量和p值的统计分析表，存储在result变量中。,"timestamp = 2023.01.01 + 1..7
y_col = 0.02 -0.015 0.032 -0.008 0.025 -0.01 0.018
x1 = 3005 2998 3022 2975 3030 2982 3015
x2 = 45.2 47.8 43.5 49.1 42.3 48.6 44.9
t = table(timestamp, y_col, x1, x2)
","Y = t.y_col
X = t[['x1','x2']]
result = ridgeBasic(Y, X, mode=1, alpha=0.5, intercept=true)
"
934,,,rowCorr,在因子分析中，我们记录了三个因子在两个不同策略中的收益率矩阵factor1（3行3列）和factor2（3行3列）。需要对每个因子在两个策略中的表现进行行级相关性分析，生成浮点数向量结果存入result变量。,"factor1 = matrix(2 3 5, 4 1 9, 7 6 8)
factor2 = matrix(8 2 10, 6 4 5, 9 7 11)","result = rowCorr(factor1, factor2)"
935,,,rowMin,在物联网温度监控中，表t包含三列传感器数据temp_a（浮点型）、temp_b（浮点型）、temp_c（浮点型），需要实时找出每行三个传感器中的最低温度值。输入数据格式为内存表，输出要求将结果存储为浮点型向量result。,"t = table([36.5, 38.2, 37.1] as temp_a, [35.8, 37.5, 36.9] as temp_b, [36.1, 38.0, 37.4] as temp_c)","result = rowMin(t.temp_a, t.temp_b, t.temp_c)"
936,,,rtrim,"在工业传感器数据表中，设备标识符字段device_code存在右侧多余空格，导致数据关联错误。现需对设备编号进行清洗处理，保留温度读数temperature原始值。输入表t结构为(device_code string, temperature double)，请生成处理后的表result，要求字段名称不变。","t = table([""DVC_1001   "", ""EQP2033     "", ""SNSR_ZX   ""] as device_code, [36.8, 41.2, 38.5] as temperature)",result = update rtrim(device_code) as device_code from t
937,,,segmentby,"在物联网设备监控场景中，假设温度传感器采集到一组数据，设备状态发生3次切换。已知温度向量temp=[23,24,20,19,18,22,25]，状态向量status=[1,1,0,0,0,1,1]。要求根据状态变化分组处理，计算每个分组的温度累计最大值，最终返回与原始数据等长的结果向量并赋值给result。","temp = [23,24,20,19,18,22,25]
status = [1,1,0,0,0,1,1]","result = segmentby(cummax, temp, status)"
938,,,setComputeNodeCachingDelay,在金融实时交易系统中，管理员需要将各计算节点缓存中间结果的同步间隔调整为5分钟（300秒），并立即查询生效数值以验证变更。输入数据为变量delay=300（整型），输出结果为当前生效的同步间隔秒数，存储在变量result中。,delay = 300,"setComputeNodeCachingDelay(delay)
result = getComputeNodeCachingDelay()"
939,,,setTraceMode,为了分析高频股票交易查询的执行计划，需临时启用SQL跟踪功能记录后续请求。假设交易表trades含有时间戳、股票代码、价格和成交量字段，请编写启用跟踪的代码，无需准备输入数据，执行结果存入result。,// 无需准备数据，仅功能开关操作,result = setTraceMode(true)
940,,,skew,在分析某物联网设备的每日温度读数分布时，需要评估数据的不对称程度。已知温度数据存储在名为readings的向量中，包含20个元素，其中前19个为符合正态分布的随机数（均值25，标准差2），最后一个元素为异常值45。请使用无偏统计方法计算该温度数据的形状特征，并将结果存储在变量result中。（输入:向量readings，输出:标量result）,"readings = norm(25, 2, 19)
readings.append!(45)","result = skew(readings, false)"
941,,,startDataNode,在物联网系统中，有三个边缘计算节点需要启动以处理实时传感器数据，节点地址分别为192.168.2.100:8805、192.168.2.100:8806和192.168.2.100:8807。请编写DolphinDB代码，将这些节点配置信息存入变量nodeList，并执行启动操作，将结果存入result。输入数据格式为字符串向量，输出结果直接返回操作状态。,"nodeList = [""192.168.2.100:8805"",""192.168.2.100:8806"",""192.168.2.100:8807""]",result = startDataNode(nodeList)
942,,,stl,假设某气象站记录了全年每日平均气温数据，需要将其分解为长期变化趋势、周循环波动和随机因素。已知输入数据是一个包含365个元素的浮点型向量temperature_data，请生成对应的趋势项、周期项和残差项，并将结果存储在字典变量result中。,"n = 365
trend = 0.02 * (1..n)  # 全年缓慢升温趋势
seasonal = 3 * sin(2*pi/7 * 1..n)  # 7天为周期的温度波动
residual = rand(0.5, n) - 0.25  # 随机噪声
temperature_data = trend + seasonal + residual
","result = stl(temperature_data, 7, ""periodic"", tWindow=21, lWindow=11)
"
943,,,stopDataNode,物联网集群中有两个数据节点的网络地址记录在表node_maintenance中，其字段为address。当前需要根据该表的记录关闭这些节点，并将操作结果保存到变量。输入数据是包含address列的表node_maintenance，输出结果需要存入变量result。,"
node_maintenance = table([""172.31.22.115:9010"", ""172.31.22.116:9011""] as address)
","
targetNodes = exec address from node_maintenance
result = stopDataNode(targetNodes)
"
944,,,tema,"某温度传感器每5分钟记录一次环境温度，数据以数组形式存储在变量sensorReadings中，包含最近7次读数:[15.2, 15.4, 15.8, 16.1, 15.6, 15.3, 15.0]。需要通过三重指数平滑算法计算最近三个采样周期的趋势值，将最终计算结果存储在变量result中。输入数据格式为float类型向量，输出结果格式为float类型标量。",sensorReadings = 15.2 15.4 15.8 16.1 15.6 15.3 15.0,"result = tema(sensorReadings, 3)"
945,,,tmavg,"某物联网设备的温度数据表sensor_data记录了精确到秒的采集时间t（TIMESTAMP类型）和温度读数temp（INT类型），数据包含时间[2023-01-01 00:00:00, 00:00:02, 00:00:04, 00:00:06, 00:00:08, 00:00:10]和对应温度[22,24,25,23,20,21]。需要为每个采集时刻计算向前3秒时间窗口内的平均温度，结果存储在result中。","sensor_data = table(
temporalAdd(2023.01.01T00:00:00, 0..5*2, `s) as t, 
[22, 24, 25, 23, 20, 21] as temp
)","result = select *, tmavg(t, temp, 3s) as avg_temp from sensor_data"
946,,,tmbetaTopN,在物联网设备监控场景中，每个时间点采集设备的温度、湿度及信号强度。现需在5分钟滑动窗口内，根据信号强度从高到低筛选出前2条有效记录（空值不参与排序），计算湿度对温度的回归系数。输入数据存储在表t中，包含timestamp（时间戳，TIMESTAMP类型）、temperature（INT类型）、humidity（INT类型）、signal（INT类型可为空），计算结果存入变量result（DOUBLE类型向量）。,"T = [2023.01.03T09:00:00, 2023.01.03T09:01:00, 2023.01.03T09:02:00, 2023.01.03T09:03:00, 2023.01.03T09:04:00]
X = [25, 23, 24, 22, 20]
Y = [60, 65, 63, 68, 70]
S = [80, 75, NULL, 90, 85]
t = table(T as timestamp, X as temperature, Y as humidity, S as signal)
","result = tmbetaTopN(t.timestamp, t.temperature, t.humidity, t.signal, 300000, 2, false)
"
947,,,tmcovar,在物联网监控系统中，表device包含时间戳t（TIMESTAMP类型）、湿度传感器数值humi、温度传感器数值temp。现有4条记录:t分别为2023.01.01T10:00:00、10:02:00、10:05:00、10:06:00；humi对应为5、8、3、4；temp对应为22、25、19、21。请以3分钟为时间窗口，计算每个时刻前推窗口内humi和temp的协方差，结果列命名为result。,"t = [timestamp(""2023-01-01T10:00:00""), timestamp(""2023-01-01T10:02:00""), timestamp(""2023-01-01T10:05:00""), timestamp(""2023-01-01T10:06:00"")]
humi = [5, 8, 3, 4]
temp = [22, 25, 19, 21]
device = table(t as t, humi as humi, temp as temp)
","result = select *, tmcovar(t, humi, temp, 3m) as result from device
"
948,,,tmmed,有一只温度传感器每分钟采集一次环境数据，但部分读数可能丢失。现有一张表包含时间戳（timestamp，时间类型）和温度值（temp，浮点型，存在空值），请计算每个时刻前3分钟窗口内的温度中间值（忽略空值参与计算）。要求返回包含原始数据和对应中间值的表，结果存储在变量result中。,"timestamp = [2023.01.01T09:30:00, 2023.01.01T09:31:00, 2023.01.01T09:32:00, 2023.01.01T09:33:00, 2023.01.01T09:34:00, 2023.01.01T09:36:00]
temp = [36.5, 37.1, NULL, 36.8, 37.6, 38.0]
m = table(timestamp, temp)","result = select *, tmmed(timestamp, temp, 3m) as rolling_median from m"
949,,,transFreq,"在物联网传感器数据采集中，设备每30分钟记录一次读数，生成时间戳如下:[2023.05.15T08:00:00, 2023.05.15T08:30:00, 2023.05.15T09:00:00, 2023.05.15T09:30:00, 2023.05.15T10:00:00]。现在需要将时间戳转换为每2小时的左闭合区间（左边界为标签），输出格式为时间向量result。","
sensorTime = 2023.05.15T08:00:00 + 0..4 * 30*60*1000
","
result = transFreq(sensorTime, rule=""2H"", closed=`left, label=`left)
"
950,,,triggerTSDBCompaction,"某物联网平台存储了2024年1月10日的百万级传感器数据，TSDB引擎中产生了大量层级文件。现需对当日/temperature分区下所有数据文件的第1层级执行压缩优化，输入数据为类型为数据文件且分区路径包含""2024.01.10/temperature""的chunkID列表，变量名为chunkIds。请编写代码将操作结果存入名为result的布尔型数组。","chunkIds = exec chunkId from getChunksMeta() where type=1 and partition like ""%2024.01.10/temperature%""","result = each(def(x){triggerTSDBCompaction(x,1)}, chunkIds)"
951,,,tril,在物联网监测中，四个传感器记录了四个连续时段的数据，存储为4x4矩阵sensorData（每行代表时段，每列代表传感器）。需要生成一个新矩阵，保留每个时段及其之前两个时段的传感器数据（含当前时段），其余位置归零。输入数据为矩阵格式，变量名sensorData，输出结果存入矩阵result。,"sensorData = matrix(5 3 9 2, 8 6 4 7, 1 5 8 3, 4 2 7 6)
","result = tril(sensorData, 2)
"
952,,,updateLicense,在分布式时序数据库集群中，管理员已完成所有节点新许可证文件的部署。现需激活新授权配置并生成包含各节点别名及其对应授权截止日期的验证表。请编写操作代码，要求不重启任何服务节点，结果存储在名为result的二维表中，包含node（节点名称）和expiration（截止日期）两列。,,"pnodeRun(updateLicense)
result = table(pnodeRun(getNodeAlias) as node, pnodeRun(getLicenseExpiration) as expiration)"
953,,,winsorize,在物联网场景中，传感器采集的温度数据存储在变量sensorData中，包含20个元素（存在两个缺失值NULL，分别位于首尾位置，其余为1到18的连续整数）。需要对数据进行缩尾处理，将最低和最高各10%的值替换为相邻值，缺失值视作最大值处理。请写出处理后的结果，并赋值给变量result。,"javascript
sensorData = 1..20
sensorData[0] = NULL
sensorData[19] = NULL
","javascript
result = winsorize(sensorData, 0.1, nanPolicy='upper')
"
954,,,writeLogLevel,"在物联网系统中，当检测到设备电压骤降至23.5伏时，需要记录三条关键参数到故障日志:异常代码5005、当前电压值和""紧急:主电源失效，切换备用电路""的提示。给定整型变量err_code=5005和浮点变量voltage=23.5，如何生成包含这两个数值和提示文本的三行红色警报日志？","err_code = 5005
voltage = 23.5","result = writeLogLevel(ERROR, err_code, voltage, ""紧急:主电源失效，切换备用电路"")"
955,,,writeRecord,"某证券系统需要将最近1万笔股票交易的记录（包含时间戳、股票代码、价格）中的第501到1500条导出为二进制文件。已知数据表名为tradeData，结构为[timestamp: DATETIME, symbol: SYMBOL, price: DOUBLE]，请写出将指定范围数据写入文件并返回成功行数的代码。","timestamp = 2023.01.01T09:30:00 + 0..9999
symbol = take(`AAPL`MSFT`GOOG, 10000)
price = rand(100.0, 10000)
tradeData = table(timestamp, symbol, price)
","fh = file(""trade_records.bin"", ""w"")
result = fh.writeRecord(tradeData, 500, 1000)
"
956,,,adaBoostClassifier,"在金融服务场景中，需要通过客户的收入、负债、年龄三个财务指标预测其信用等级（0-良好,1-一般,2-较差）。给定训练数据表trainData包含四列:credit_label表示信用等级，income为月收入（单位万），debt为总负债（单位万），age为年龄。请构建一个集成学习模型，要求使用70%特征选取比例、15个基础分类器、SAMME优化算法，将训练好的分类模型字典存入result变量。","trainData = table(100:0, `credit_label`income`debt`age, [INT,DOUBLE,DOUBLE,DOUBLE])
n=8
for i in 0..2:
credit = take(i, n)
income = norm(5+i*2, 3, n)
debt = norm(10+i*5, 8, n)
age = norm(30+i*5, 5, n)
insert into trainData values(credit, income, debt, age)
","modelDS = sqlDS(<select * from trainData>)
result = adaBoostClassifier(modelDS, `credit_label, `income`debt`age, 3, maxFeatures=0.7, numTrees=15, algorithm='SAMME')
"
957,,,addReactiveMetrics,"实时监测设备状态的计算引擎已累计统计设备工作时长，现需动态扩展两个新指标:瞬时功耗的移动平均值和设备温度的历史峰值。已知输入流表结构为(deviceID, timestamp, power, temp, hours)，输出表包含(deviceID, timestamp, metricName, value)，请实现新增指标后的数据验证。","dummy = streamTable(1:0, [""deviceID"",""timestamp"",""power"",""temp"",""hours""], [STRING,TIMESTAMP,DOUBLE,DOUBLE,INT])
output = streamTable(1:0, [""deviceID"",""timestamp"",""metricName"",""value""], [STRING,TIMESTAMP,STRING,DOUBLE])

initialFactors = [<sum(hours)>]
engine = createNarrowReactiveStateEngine(
name=""deviceMonitor"",
metrics=initialFactors,
metricNames=""totalHours"",
dummyTable=dummy,
outputTable=output,
keyColumn=""deviceID""
)

seedData = table(
[""D001"",""D002"",""D003""] as deviceID,
2023.09.05T09:00:00 + 1..3 as timestamp,
rand(100.0,3) as power,
rand(500.0,3) as temp,
10..12 as hours
)
engine.append!(seedData)
","newMetrics = [<mavg(power,3)>, <cummax(temp)>]
addReactiveMetrics(""deviceMonitor"", [""powerMAvg"", ""tempPeak""], newMetrics)

testData = table(
""D004"" as deviceID,
2023.09.05T09:00:05 as timestamp,
88.5 as power,
520.0 as temp,
15 as hours
)
engine.append!(testData)
result = select * from output where deviceID=""D004""
"
958,,,beta,某量化研究员需要计算某只股票相对于市场指数的系统性风险指标。已知该股票的日收益率序列存储在变量stock_returns中，对应的市场指数日收益率存储在market_returns里。输入均为包含5个元素的数值型向量，输出要求是两者的回归模型中自变量系数估计值，结果存入result变量。,"stock_returns = 0.02 0.015 -0.008 0.032 -0.005
market_returns = 0.012 0.01 -0.006 0.025 -0.003","result = beta(stock_returns, market_returns)"
959,,,bitOr,在物联网设备监控中，某传感器在连续两个检测周期内报告的异常标识分别存储在向量alert_phase1和alert_phase2中，每个元素对应不同监测点（0正常，1异常）。如何生成综合异常报告，只要任一周期出现异常则标记为异常？,"alert_phase1 = [1,0,1,1,0]
alert_phase2 = [0,1,1,0,1]",result = alert_phase1 | alert_phase2
960,,,bucket,"在物联网设备温度监测中，有一组传感器采集到温度数据 `temps = [7, 25, 60, 38, 42, 15]`。请将数据按以下规则分类:有效温度区间为20到50度（含20不含50），该区间内等分成3段；区间外单独做异常标识。输入数据格式为整型向量，变量名temps；输出为分桶编号向量，变量名result。","temps = [7, 25, 60, 38, 42, 15]","result = bucket(temps, 20:50, 3, true)"
961,,,call,在物联网场景中，处理传感器数据表sensorData（结构:ts[时间戳]和val[浮点数值]），需要动态应用三种数值分析方法（求均值、找最大值、算标准差）并将结果按顺序存入变量result。请编写实现代码。,"ts = 2023.10.01T09:30:00.000 + 1..600 * 600
val = norm(0, 5.0, 600)
sensorData = table(ts as ts, val as val)","result = each(call{, sensorData.val}, [avg, max, std])"
962,,,cdfWeibull,"某工厂需要评估设备部件的可靠性，记录了一组运行时长数据（单位:小时）。已知该部件的寿命分布形状参数为1.5，特征寿命参数为1000小时。请计算部件在[0,500,1000,1500,2000]不同工作时长点的累计失效概率，将结果保留五位小数存入变量result。","times = [0, 500, 1000, 1500, 2000]
shape_param = 1.5
scale_param = 1000.0
","result = cdfWeibull(shape_param, scale_param, times).round(5)
"
963,,,createCatalog,"在物联网系统中，需要为温度、湿度、振动三类传感器建立独立的数据存储区域。给定字符串数组sensorTypes=[""thermal"", ""humidity"", ""vibration""]作为输入数据，请编写代码批量创建对应的存储结构，将操作结果保存到变量result中。","sensorTypes = [""thermal"", ""humidity"", ""vibration""]","result = each(createCatalog, sensorTypes)"
964,,,createEquiJoinEngine,"在实时股票处理系统中，两个流数据表分别记录各股票的最新价格和成交量。请设计一个流计算引擎，当同一股票代码和时间点的数据到达时，立即关联并计算总成交额（价格*成交量）。左表结构为流表leftStream(time TIMESTAMP, sym SYMBOL, price DOUBLE)，右表结构为流表rightStream(time TIMESTAMP, sym SYMBOL, volume DOUBLE)。输出表outputStream需包含time, sym, price, volume, total列，其中total为price与volume的乘积。请输出outputStream的所有记录到变量result。","share streamTable(1:0, `time`sym`price, [TIMESTAMP, SYMBOL, DOUBLE]) as leftStream
share streamTable(1:0, `time`sym`volume, [TIMESTAMP, SYMBOL, DOUBLE]) as rightStream
share table(100:0, `time`sym`price`volume`total, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE, DOUBLE]) as outputStream

t1 = table(2023.10.08T09:30:00.000 + 1..10 as time, take(`AAPL`MSFT, 10) as sym, rand(100.0, 10) as price)
leftStream.append!(t1)
t2 = table(2023.10.08T09:30:00.000 + 1..10 as time, take(`AAPL`MSFT, 10) as sym, rand(1000, 10) as volume)
rightStream.append!(t2)
","ejEngine = createEquiJoinEngine(name=""equiJoinDemo"", leftStream, rightStream, outputStream, <[price, volume, price*volume]>, `sym, `time, 10000, 5000)
subscribeTable(tableName=""leftStream"", actionName=""joinLeft"", handler=appendForJoin{ejEngine, true}, msgAsTable=true)
subscribeTable(tableName=""rightStream"", actionName=""joinRight"", handler=appendForJoin{ejEngine, false}, msgAsTable=true)
result = select * from outputStream
"
965,,,cumstdTopN,"在实时股票分析中，需要按证券代码分组追踪价格波动性。给定一个包含股票代码(id)和收盘价(price)的表格t，请计算每个时点向前累计窗口中，按代码分组稳定性排序后取前4个价格组成的滚动标准差。输入表结构为(id INT, price DOUBLE)，结果存储在变量result中。","id = rand(`A`B`C`D`E, 10)
price = 100.0 + norm(0, 5, 10)
t = table(id, price)
","result = select cumstdTopN(price, id, 4, ascending=false) as result from t
"
966,,,cutPoints,"某股票的三档唯一收盘价按升序排列为price = [100.0, 102.5, 104.0]，对应成交量分别为freq = [20, 50, 30]。需将此价格区间划分为2个交易量分布均衡的区间段，要求生成包含区间边界的向量。输入数据格式:price为数值向量，freq为整数向量；输出为数值向量存入result。","price = 100.0 102.5 104.0
freq = 20 50 30","result = cutPoints(price, 2, freq)"
967,,,decimal128,"在金融结算系统中，需要精确处理两笔金额数据。已知金额1以字符串形式存储为price1=""123.456""，金额2存储为price2=""78.9""。请将它们转换为保留两位小数的高精度数值类型，并计算它们的总和，结果存入变量result。输入均为字符串，输出为DECIMAL128类型。","price1 = ""123.456""
price2 = ""78.9""","a = decimal128(price1, 2)
b = decimal128(price2, 2)
result = a + b"
968,,,decimal64,"在物联网系统中，传感器采集的温度数据以字符串数组形式存储，格式为[""36.5123"", ""37.9876""]，变量名为temps。需要将其转换为高精度小数类型，保留小数点后三位（第四位四舍五入），结果存入变量result。请编写代码实现。","temps = [""36.5123"", ""37.9876""]
","result = decimal64(temps, 3)
"
969,,,dividedDifference,"某物联网设备每隔1小时记录一次温度数据，时间戳存储在变量t中，对应温度值存储在变量temp。现在需要将温度数据插值到每5分钟一个点，要求生成插值后的温度序列。其中t是三个时间点的DATETIME向量，temp是[25.0, 26.5, 28.0]的数值向量，输出结果需要存储在变量result中。","t = [2023.01.01 08:00:00, 2023.01.01 09:00:00, 2023.01.01 10:00:00]
temp = 25.0 26.5 28.0","result = dividedDifference(t, temp, `5min, closed=""right"")"
970,,,dropCatalog,"某物联网平台按项目存储设备数据，现项目""iot_project_2023""已结束，需删除对应的数据目录。已知该目录存在，请编写代码执行删除并将结果存入result。输入数据为字符串标量表示目录名称，输出结果需存储在变量result中。","
// 确保测试环境存在目标目录
createCatalog(""iot_project_2023"")
","
result = dropCatalog(""iot_project_2023"")
"
971,,,dropStreamTable,"在物联网平台维护过程中，管理员发现一个名为""sensorReadings""的传感器流表已经停止服务但仍有磁盘残留，需要彻底移除该表及其所有持久化数据。已知该表结构为[timestamp:SYMBOL, deviceID:STRING, value:DOUBLE]，当前内存中已无该表实例，请编写强制删除操作代码。","colNames = [""timestamp"",""deviceID"",""value""]
colTypes = [SYMBOL,STRING,DOUBLE]
t = streamTable(1:0,colNames,colTypes)
enableTableShareAndPersistence(t, `sensorReadings)
undef(`sensorReadings, SHARED)
","result = dropStreamTable(tableName=`sensorReadings, force=true)
"
972,,,enableTablePersistence,某物联网平台需要实时存储传感器上传的温度数据到磁盘，同时自动清理内存中超过保留期限的历史记录。假设已有一个名为sensorStream的空共享流表，包含timestamp(时间戳)、deviceID(设备ID)、temperature(温度值)三列，数据类型分别为TIMESTAMP、SYMBOL、DOUBLE。要求配置异步写入模式，启用压缩存储，按时间列每15分钟触发内存清理，仅保留最近30分钟的数据。请生成正确的配置代码将处理结果存入result变量。,"
colNames = [""timestamp"", ""deviceID"", ""temperature""]
colTypes = [TIMESTAMP, SYMBOL, DOUBLE]
sensorStream = streamTable(10000:0, colNames, colTypes)
enableTableShareAndPersistence(sensorStream, ""sensorStream"", false, true, 10000000)
","
result = enableTablePersistence(
table=sensorStream, 
asynWrite=true,
compress=true,
cachePurgeTimeColumn=`timestamp,
cachePurgeInterval=15m,
cacheRetentionTime=30m
)
"
973,,,endsWith,给定物联网设备日志文件名列表files，请筛选出所有以.log结尾的条目（不区分大小写）。输入数据files为字符串向量:`device1.log`device2.txt`device3.LOG`sys.log，输出结果保存到result，要求是布尔向量。,"files = [`device1.log, `device2.txt, `device3.LOG, `sys.log]
","result = endsWith(lower(files), "".log"")
"
974,,,eqFloat,"在量化交易中，两个策略计算出的股票价格矩阵存在微小精度差异。给定price1=matrix([0.12345678,1.2345678],[2.3456789,3.4567891])和price2=matrix([0.12345677,1.2345679],[2.3456788,3.4567891])两个DOUBLE类型矩阵，要求判断每个元素在小数点后第7位是否相等，结果存储在result变量中。","price1 = matrix([0.12345678,1.2345678],[2.3456789,3.4567891])
price2 = matrix([0.12345677,1.2345679],[2.3456788,3.4567891])","result = eqFloat(price1, price2, 7)"
975,,,esd,"某云计算平台需要监控服务器集群的CPU使用率数据，识别突发异常峰值。给定一个长度为1000的数组usage，其中第300、450、750号位置的数值存在显著异常波动。请编写代码检测该数据序列中的异常点，要求输出包含异常值索引和数值的二维表result，输入数据格式为[5.2,18.7,...,32.1]的浮点型向量。","n = 1000
usage = norm(5.0, 2.0, n).cumsum().abs() + 10  // 生成趋势型基础数据
usage[300] += 40  // 注入尖峰异常
usage[450] += 35  // 注入阶跃异常  
usage[750] += 38  // 注入脉冲异常
","result = esd(usage, hybrid=true, maxAnomalies=0.15, alpha=0.05)
"
976,,,first,在分析股票市场数据时，给定一个包含6条交易记录的时序表，包含股票代码（sym列为`A`和`B`交替）、纳秒级时间戳（time列从09:30:00开始递增）和价格（price列浮点数值）。要求提取每支股票当天的开盘价（即每个股票代码第一条记录的price值），输出结果需保留股票代码列并通过变量result存储。,"t = table(take(`A`B, 6) as sym, 2023.10.01T09:30:00.000000000 + 0..5 as time, 100.5 101.2 99.8 102.3 98.7 103.0 as price)","result = select sym, first(price) as openPrice from t group by sym"
977,,,fy5253Quarter,"某公司采用4-4-5财年制度，财年从四月份开始，将每周一设为基准日。已知闰季度设置在第三季度，需要以每两个财政季度为周期处理销售数据。给定交易表包含日期列（2022.03.15、2022.06.20、2022.09.25、2022.12.30），价格和数量字段，如何按财政季度起始日分组计算平均价格和总量？输入表结构:t1=table(date,price,qty)，输出结果列名为quarter_start、avg_price、total_qty。","date = [2022.03.15, 2022.06.20, 2022.09.25, 2022.12.30]
price = [45.6, 52.3, 48.9, 55.0]
qty = [1200, 1500, 1800, 2100]
t1 = table(date as date, price as price, qty as qty)
","result = select avg(price) as avg_price, sum(qty) as total_qty from t1 group by fy5253Quarter(date, 0, 4, 3, true, 2022.01.01, 2) as quarter_start
"
978,,,garch,某证券公司需要分析某股票收益率的波动特征以评估风险。给定包含日期（date）和日收益率（return）两个字段的100条交易数据，表名为stockData。要求建立阶数为p=1（GARCH项）和q=2（ARCH项）的波动率模型，使用最大迭代次数100次进行参数估计，将结果存储在变量result中。输入数据格式为内存表，包含DATE类型date列和DOUBLE类型return列，输出结果为包含波动率常数、ARCH项等参数的字典。,"dates = 2023.01.01 + 0..99
returns = norm(0, 0.02, 100)  # 生成100个正态分布随机数模拟收益率
stockData = table(dates as date, returns as return)
","result = garch(stockData, ""return"", [1,2], 100)
"
979,,,getAggregatorStat,在物联网设备监控场景中，某流处理引擎持续统计传感器每分钟的极值读数。现需提取该引擎的运行健康指标，包含已处理批次数、最近事件时间和队列深度，并将结果存入变量result。输入数据表为device_stream，包含时间戳列ts和数值列temperature，使用时间窗口长度为60秒的聚合规则。,"# 创建流数据表
device_stream = streamTable(10000:0, `ts`temperature, [TIMESTAMP, DOUBLE])
enableTableShareAndPersistence(device_stream, ""device_stream"", true, true)

# 创建时间序列引擎
tsAggr = createTimeSeriesEngine(name=""iot_aggr"", windowSize=60000, step=60000, metrics=<[max(temperature), min(temperature)]>, dummyTable=device_stream, outputTable=table(10000:0, `ts`max_temp`min_temp, [TIMESTAMP, DOUBLE, DOUBLE]), timeColumn=`ts, useSystemTime=false)

# 模拟数据写入
insert into device_stream values(2023.09.01T09:00:00.000, 25.8)
insert into device_stream values(2023.09.01T09:00:30.000, 28.1)
insert into device_stream values(2023.09.01T09:01:15.000, 26.4)
","result = getAggregatorStat(""iot_aggr"", false)
"
980,,,getNodePort,在集群节点状态监控系统中，存在一个表 node_status 包含字段 node(SYMBOL)、port(INT)、status(SYMBOL)，其中 status 初始值为 inactive。需要检测当前节点的运行端口是否存在于该表，若存在则更新其状态为 active，并将更新后的该节点记录存入变量 result。请写出实现代码。,"node_status = table(`Alpha`Bravo`Charlie as node, [8888, 8899, 8848] as port, `inactive`inactive`inactive as status)","current_port = getNodePort()
update node_status set status = ""active"" where port = current_port
result = select * from node_status where port == current_port"
981,,,getSupportBundle,"某物联网平台需定期导出所有节点的系统诊断日志，包含配置、数据库结构及事务状态等信息，并将结果保存在指定路径以便后续分析。已知目标目录为""/iot/logs/audit""，请实现该需求并获取生成文件的完整路径，结果存储在变量result中。输入数据为路径字符串，输出为包含时间戳的文件路径字符串。",// 该函数无需额外数据准备，直接调用即可,"result = getSupportBundle(""/iot/logs/audit"")"
982,,,getSystemCpuUsage,在物联网实时数据处理服务中，需要监测DolphinDB服务进程的CPU资源消耗。请编写代码获取当前该进程在所有CPU核上的实时利用率总和，并将计算结果存入变量result。输入数据不需要预处理，输出结果为浮点数值。,,result = getSystemCpuUsage()
983,,,gmtime,某个物联网平台的设备日志时间记录为本地时间（UTC+8时区），需要将所有时间转换为格林尼治标准时间以便统一分析。给定一个包含两个本地时间戳的向量t，分别为2023.08.18 16:45:30和2024.02.28 03:15:20，编写代码执行转换并将结果存入result。输入数据为TIMESTAMP类型变量t，要求输出结果为对应的零时区时间。,"t = [timestamp(""2023.08.18 16:45:30""), timestamp(""2024.02.28 03:15:20"")]
","result = gmtime(t)
"
984,,,gt,"在设备故障监测中，标准故障标识集合包含{100, 200, 300}，当前检测到的故障标识集合为{200}。请验证当前故障是否为标准库的严格子集（即全部元素存在于标准库且元素数量更少）。输入数据为集合standardCodes和currentCodes，输出结果为布尔值存储在result。","standardCodes = set([100, 200, 300])
currentCodes = set([200])
","result = standardCodes > currentCodes
"
985,,,installPlugin,"在物联网数据采集场景中，需要使用国外服务器获取指定版本的MQTT通信组件。需从地址""http://plugins.dolphindb.com/plugins""下载1.2.0版本的mqtt插件包，要求获取该插件的配置文件路径以便后续加载。输入参数均为字符串类型，输出结果存储在result变量中。",,"result = installPlugin(""mqtt"", ""1.2.0"", ""http://plugins.dolphindb.com/plugins"")"
986,,,intersection,"某物联网系统监测三个设备在两个时间点的状态码（整数数组statusA和statusB），需要计算每个设备在两个时刻同时有效的状态位。已知statusA为[25, 9, 63]，对应二进制11001、1001、111111；statusB为[19, 14, 55]，对应二进制10011、1110、110111。要求输出按位与后的十进制结果数组到result。","statusA = [25, 9, 63]
statusB = [19, 14, 55]",result = statusA & statusB
987,,,isMonotonicDecreasing,物联网场景中，某温度传感器的读数在连续5个时间点依次为45.3、43.2、40.0、38.5和空值，请判断其数值是否呈现持续下降的趋势。输入数据格式为浮点向量sensorReadings，输出结果存储在布尔变量result中。,"sensorReadings = [45.3, 43.2, 40.0, 38.5, NULL]",result = isMonotonicDecreasing(sensorReadings)
988,,,isNanInf,在股票分析中，需要识别某只股票的价格数据中的无效或异常值。给定一个DOUBLE类型的向量priceData，其中包含以下元素:2.5、空的数值、0除0的结果、正无穷大、负无穷大。请生成一个布尔向量result，标记每个元素是否为无效值（包括NaN、Inf或空值）。,"priceData = double([2.5, NULL, 0.0/0.0, 1.0/0.0, -3.0/0.0])
","result = isNanInf(priceData, true)
"
989,,,keyedTable,"在物联网场景中，需要实时记录设备的最新环境指标。现有三个传感器设备，每个设备有唯一编号，需要存储其最后一次上报的时间戳、温度值和湿度值。当设备重复上报时，需覆盖原有记录。已知初始数据:设备编号为[""S01"",""S02"",""S03""]，上报时间依次为[2023.01.01T09:15:00, 2023.01.01T09:16:00, 2023.01.01T09:17:00]，温度读数为[23.5,24.8,21.7]，湿度读数为[45,52,48]。随后设备S02重新上报时间为2023.01.01T09:18:00、温度25.3、湿度50的新数据。请构造数据结构并执行更新操作，最终输出完整记录表到result。","deviceID = [""S01"", ""S02"", ""S03""]
timestamp = [2023.01.01T09:15:00, 2023.01.01T09:16:00, 2023.01.01T09:17:00]
temperature = [23.5, 24.8, 21.7]
humidity = [45, 52, 48]
","kt = keyedTable(`deviceID, deviceID, timestamp, temperature, humidity)
insert into kt values([""S02""], [2023.01.01T09:18:00], [25.3], [50])
result = kt
"
990,,,lastWeekOfMonth,在物联网设备管理中，系统需要基于每月最后一个周四（周四为星期中的第4天）对设备温度进行周期性分析，起始基准日为2023.01.01，每隔2个月更新一次周期。给定设备表devices包含检测日期date（DATE类型）、设备编号device_id和温度读数temp，请按上述规则分组计算各组的平均温度，结果存入result。,"date = [2023.01.15, 2023.03.25, 2023.03.30, 2023.05.18, 2023.07.02]
device_id = `A`B`A`B`A
temp = [25.3, 26.1, 24.8, 27.5, 23.9]
devices = table(date, device_id, temp)
","result = select avg(temp) as avg_temp from devices group by lastWeekOfMonth(date, 4, 2023.01.01, 2)
"
991,,,latestIndexedTable,"在物联网设备状态监控中，每个设备由设备编号和区域码组合标识，系统需要记录每个设备最新的信号强度及上报时间。现有初始监测数据为:设备编号devID=[D001,D002,D001]，区域码zone=[101,102,101]，时间戳timestamp=[2023.05.01T09:30:00.000,2023.05.01T09:30:01.000,2023.05.01T09:30:02.000]，信号强度rssi=[-60,-55,-58]。请创建数据结构并插入后续上报数据devID=D002,D001,D001，zone=102,101,101，timestamp=2023.05.01T09:30:03.000,2023.05.01T09:30:01.500,2023.05.01T09:30:02.500，rssi=-53,-62,-57，最终返回最新状态表。输入表结构为(devID SYMBOL,zone INT,timestamp TIMESTAMP,rssi INT)，结果存储在result。","devID = take(`D001`D002`D001, 3)
zone = [101, 102, 101]
timestamp = [2023.05.01T09:30:00.000, 2023.05.01T09:30:01.000, 2023.05.01T09:30:02.000]
rssi = [-60,-55,-58]
","result = latestIndexedTable(`devID`zone, `timestamp, devID, zone, timestamp, rssi)
insert into result values([`D002,`D001,`D001], [102,101,101], [2023.05.01T09:30:03.000,2023.05.01T09:30:01.500,2023.05.01T09:30:02.500], [-53,-62,-57])
"
992,,,localtime,在处理国际期货交易数据时，记录的交易时间均为UTC标准的TIMESTAMP类型字段timestamp_utc。给定数据表trades包含交易编号trade_id、UTC时间戳timestamp_utc和成交价price三列，要求将时间戳转换为交易所所在本地时区的时间，生成包含所有原始字段和新时区时间local_time的结果表，最终结果存入变量result。,"timestamps = [2023.08.15T16:00:00, 2023.08.15T20:30:45].datetimeParse(""yyyy.MM.ddTHH:mm:ss"")
trades = table `A001`B002 as trade_id, timestamps as timestamp_utc, [4250.75, 4265.30] as price
","result = select *, localtime(timestamp_utc) as local_time from trades
"
993,,,logout,"在股票交易系统维护期间，管理员需要强制用户""Alice""从所有节点和服务端断开连接以确保数据安全。已知输入用户名为字符串类型变量`Alice`，输出结果变量为result。请编写相应的操作代码。",,"result = logout(`Alice, false)
"
994,,,makeCall,假设有一个物联网设备的监测数据表device_data，包含ts（时间戳，DATE类型）、deviceID（设备ID，SYMBOL类型）、temperature（温度，DOUBLE类型）、humidity（湿度，DOUBLE类型）。请动态构造一个查询，为每个设备按时间顺序计算温度的3天移动平均，并将结果四舍五入到两位小数，新增列命名为temp_3d_ma。要求输出结果保留所有原始列，并将最终查询结果赋值给result。,"n=100
ts = 2023.01.01 + 1..n
deviceID = take(`A`B`C, n)
temperature = rand(100.0, n)
humidity = rand(100.0, n)
device_data = table(ts, deviceID, temperature, humidity).sortBy!(`deviceID`ts)","maExpr = makeCall(mavg, sqlCol(""temperature""), 3)
formattedExpr = makeCall(format, maExpr, ""0.00"")
maCol = sqlColAlias(formattedExpr, ""temp_3d_ma"")
result = sql(select=sqlCol(""*""), maCol, from=device_data, contextBy=sqlCol(""deviceID""), csort=sqlCol(""ts"")).eval()"
995,,,mcovarTopN,假设有一个物联网设备的温度(X)和湿度(Y)监测数据，对应的时间戳(S)为5个连续时间点。请计算在长度为3的滑动窗口内，按时间排序后取前2个样本，求Y与X的协方差序列，结果存入result。输入数据格式:X和Y为数值向量，S为时间类型向量。,"X = [35.2, 34.8, 36.1, 33.9, 37.5]
Y = [62, 58, 65, 59, 63]
S = [2023.01.01T09:00:00, 2023.01.01T09:05:00, 2023.01.01T09:10:00, 2023.01.01T09:15:00, 2023.01.01T09:20:00]
","result = mcovarTopN(X, Y, S, 3, 2, ascending=True)
"
996,,,mimin,"某气象站每小时记录温度数据，但由于设备故障存在部分缺失。需要分析每个时间点过去4次有效观测中的最低温度首次出现的位置，结果存储为变量result。输入数据temp是时间索引的向量:[2023-01-01T00:00, 2023-01-01T01:00, 2023-01-01T02:00, 2023-01-01T03:00, 2023-01-01T04:00]对应的温度值为[12.5, NULL, 9.8, 9.8, 11.0]，输出结果为长度相同的整型向量。","timestamp = [2023.01.01T00:00:00, 2023.01.01T01:00:00, 2023.01.01T02:00:00, 2023.01.01T03:00:00, 2023.01.01T04:00:00]
values = [12.5, NULL, 9.8, 9.8, 11.0]
temp = indexedSeries(timestamp, values)
","result = mimin(temp, window=4, minPeriods=1)
"
997,,,monthBegin,"某工厂传感器记录了不同日期的温度及能耗，数据存储在表t1中，包含DATE类型的date列（值:2023.01.05, 2023.02.10, 2023.03.15, 2023.04.20, 2023.05.25, 2023.06.30, 2023.07.10）、FLOAT类型的temp列（35.2,34.8,36.0,28.5,29.3,30.1,32.0）、INT类型的energy列（120,115,130,90,85,95,105）。要求以2023年1月1日为基准，按每3个月的间隔分组统计各组最高温度和累计能耗，输出结果到result。","date = [2023.01.05, 2023.02.10, 2023.03.15, 2023.04.20, 2023.05.25, 2023.06.30, 2023.07.10]
temp = [35.2,34.8,36.0,28.5,29.3,30.1,32.0]
energy = [120,115,130,90,85,95,105]
t1 = table(date, temp, energy)
","result = select max(temp) as max_temp, sum(energy) as total_energy from t1 group by monthBegin(date, 2023.01.01, 3) as group_month
"
998,,,multiTableRepartitionDS,"某物联网系统有两个传感器日志表sensor1和sensor2，结构均为（时间戳ts，设备编号device，温度读数temp）。其中sensor1按设备编号哈希分区，sensor2按时间范围分区，现需要将两个日志表统一按时间划分为[2023.01.01, 2023.01.03)和[2023.01.03, 2023.01.05)两个区间。请生成包含这两个区间划分的数据源集合，要求输入为元组形式的SQL查询，输出结果存储在变量result中。","login(""admin"", ""123456"")
db1 = database(""dfs://iot_hash"", VALUE, 1001..1005)
db2 = database("""", RANGE, [2023.01.01, 2023.01.03, 2023.01.05])

ts = 2023.01.01 + 1..4
device = 1001 + 0..3
temp = 36.5 + 0..3
t1 = table(ts as ts, device as device, temp as temp)
db1.createPartitionedTable(t1, ""sensor1"", `device).append!(t1)

ts = 2023.01.02 + 1..4
device = 1003 + 0..3
temp = 35.8 + 0..3
t2 = table(ts as ts, device as device, temp as temp)
db2.createPartitionedTable(t2, ""sensor2"", `ts).append!(t2)

sensor1 = loadTable(""dfs://iot_hash"", ""sensor1"")
sensor2 = loadTable(""dfs://iot_hash"", ""sensor2"")
","result = multiTableRepartitionDS(
[<select ts,device,temp from sensor1>, <select ts,device,temp from sensor2>],
`ts,
RANGE,
[2023.01.01, 2023.01.03, 2023.01.05]
)
"
999,,,mutualInfo,"在物联网场景中，两个传感器A和B分别记录了10次环境监测数据，其中存在部分缺失值。已知传感器A的监测数据存储在向量x中，包含数值[34, NULL, 78, NULL, 55, 92, NULL, 16, 63, 41]；传感器B的监测数据存储在向量y中，包含数值[NULL, 18, 62, 90, NULL, 76, 33, NULL, 54, 28]。如何量化这两个传感器读数之间的关联程度？输入数据均为整型向量，计算结果需存储在变量result中。","x = [34,NULL,78,NULL,55,92,NULL,16,63,41]
y = [NULL,18,62,90,NULL,76,33,NULL,54,28]","result = mutualInfo(x, y)"
1000,,,parseInt,"在电商销售分析中，用户收到一批商品销量字符串数据，格式为[""25000"",""36800"",""17409""]存储在名为salesStr的变量中。需要将这些字符串转化为整数类型进行同比计算，请实现该转换过程并将结果存入变量result。","salesStr = [""25000"",""36800"",""17409""]",result = parseInt(salesStr)
1001,,,poly1d,"某物联网设备采集了一组温度传感器的时间序列数据，数据存储为一个名为sensorData的向量。已知当前温度变化的二阶多项式系数为[2.1, -0.5, 0.03]。如何计算该传感器数据的多项式拟合值序列？","sensorData = 1..10
coefficients = [2.1, -0.5, 0.03]","result = poly1d(sensorData, coefficients)"
1002,,,randF,某金融分析师需要模拟两个资产组合波动率比率的随机样本，其中分子自由度为3.5，分母自由度为4.2，生成5个符合该分布的数值，结果存入result。输入数据通过变量numeratorDF存储分子自由度3.5，denominatorDF存储分母自由度4.2，count存储样本量5。输出结果为浮点数数组格式的变量result。,"numeratorDF = 3.5
denominatorDF = 4.2
count = 5","result = randF(numeratorDF, denominatorDF, count)"
1003,,,readObject,在物联网系统中，传感器将设备状态信息序列化保存至文件，包含时间戳、设备名称集合、状态描述字典和状态记录表。请读取文件中最先保存的序列化对象到变量result，已知文件写入顺序依次为时间类型t、集合devices、字典deviceStatus、表格statusTable。,"t = time(now())
devices = set(`DeviceA`DeviceB`DeviceC)
deviceStatus = dict(devices.keys(), [""Active"", ""Standby"", ""Offline""])
statusTable = table([1,2,3] as deviceID, [""Sensor1"", ""Sensor2"", ""Sensor3""] as sensorName, [25.3, 18.7, 30.0] as reading)

fout = file(""iot.bin"", ""w"")
fout.writeObject(t)
fout.writeObject(devices)
fout.writeObject(deviceStatus)
fout.writeObject(statusTable)
fout.close()","fin = file(""iot.bin"")
result = fin.readObject()
fin.close()"
1004,,,reduce,在金融交易分析中，一个投资账户的初始资金为10000元。每笔交易根据当日的收益率调整资金，并在操作后扣除固定手续费。给定三日内的收益率依次为5%、-3%和4%（存储为变量returns），每次操作手续费为10元。请使用累积计算的方式，确定全部交易完成后的账户最终资金，结果保留到变量result。输入数据包括浮点型向量returns、整数手续费和自定义的二元函数（参数为当前资金和收益率），输出结果为浮点数。,"
returns = [0.05, -0.03, 0.04]
fee = 10
def calculate_funds(current, return_rate){
return current * (1 + return_rate) - fee
}
","
result = reduce(calculate_funds, returns, 10000.0)
"
1005,,,resetDfsRebalanceConcurrency,在金融高频交易系统中，集群存储节点发生扩容后，管理员需要临时将数据分片迁移的并行任务上限调整为3以加速负载均衡。请编写代码执行此配置变更并验证当前生效的数值，将最新结果存储在变量result中。输入数据为整型参数3，输出结果为整型变量result。,,"resetDfsRebalanceConcurrency(3)
result = getDfsRebalanceConcurrency()"
1006,,,saveDualPartition,"现有股票交易数据需要以组合分区方式存储，以便后续共享分析。输入表tradeTable包含以下字段:用户账户ID（整数类型）、交易日期（日期类型）、时间戳（精确到分钟的时间戳类型）、交易金额（浮点类型）。数据格式要求:ID范围0-20分为两组，交易日期按自然日分区。请将tradeTable保存为带双级分区的数据库，一级按用户ID范围[0,10,20]划分，二级按交易日期值分区，并对存储表启用压缩。","n = 1000
accountID = rand(20, n)
tradeDate = take(2023.01.01..2023.01.03, n)
tradeTime = 2023.01.01T09:30:00 + rand(60*60*6, n).sort!()
amount = round(rand(1000.0, n), 2)
tradeTable = table(accountID, tradeDate, tradeTime, amount)
","rangeDB = database("""", RANGE, [0,10,20])
valueDB = database("""", VALUE, 2023.01.01..2023.01.03)
result = saveDualPartition(rangeDB, valueDB, tradeTable, `trades, `accountID, `tradeDate, true)
"
1007,,,schur,"在量化投资中，某投资组合的协方差矩阵需要分析其特征值的稳定性。已知协方差矩阵covMatrix为3x3矩阵([[1.2,0.5,-0.3],[0.5,0.8,0.2],[-0.3,0.2,1.0]])。要求对该矩阵进行正交分解，找出绝对值超过1的特征值数量，并将分解后的舒尔矩阵、酉矩阵及符合条件的特征值数量存储在result中。","covMatrix = matrix([[1.2,0.5,-0.3],[0.5,0.8,0.2],[-0.3,0.2,1.0]])","result = schur(covMatrix, ""ouc"")"
1008,,,scs,"在物联网节点的带宽分配优化中，需在两个节点分配总带宽为10，各节点带宽至少2，且二者差值不超过3。最小化延迟函数2x² + 3y² + x + y。输入变量:f为向量[1,1]，P为4x4对角阵[[4,0],[0,6]]，等式矩阵Aeq=[[1,1]]，beq=10，下界lb=[2,2]，绝对值约束系数向量x0=[1,-1]，c=3。输出结果存入result。","f = [1, 1]
P = matrix([[4,0],[0,6]], 2, 2)
Aeq = matrix([[1, 1]], 1, 2)
beq = [10]
lb = [2, 2]
x0 = [1, -1]
c = 3","result = scs(f=f, P=P, Aeq=Aeq, beq=beq, lb=lb, x0=x0, c=c)"
1009,,,setRandomSeed,"我需要模拟两只股票连续3日的价格波动，初始价格分别为[100,50]。请生成可重复的随机波动序列，确保每次执行得到的波动幅度相同，最终输出调整后的价格矩阵。输入数据为初始价格向量initPrices，输出结果存入result。","|
initPrices = [100, 50]","|
setRandomSeed(8)
randValues = norm(0, 0.1, 3, 2)
result = initPrices * (1 + randValues).transpose()"
1010,,,sqlTuple,给定一个股票价格表t，包含开盘价（列名open，类型为DOUBLE）和收盘价（列名close，类型为DOUBLE），需要动态生成查询计算每行的价格波动率指标（公式:(close - open)/(close + open)）。要求生成DOUBLE类型的计算结果向量并存入result变量。,"t = table(10.5 15.0 20.8 as open, 12.3 16.5 18.2 as close)
","f = def (x,y)->(y-x)/(y+x)
expr = sql(select=makeUnifiedCall(f, sqlTuple(`open`close)), from=t)
result = expr.eval()
"
1011,,,tan,"某物联网平台采集到一组温度传感器的相位角数据（格式为2行3列的矩阵，变量名为sensorAngles，数据为[0,0.7854,1.0472],[0.5236,1.5708,0.7854]），需要计算对应的三角函数值用于设备震动分析。请生成结果矩阵保存到result变量，要求输出数据的行列数与输入保持一致。","sensorAngles = matrix([0, 0.7854, 1.0472], [0.5236, 1.5708, 0.7854])
","result = tan(sensorAngles)
"
1012,,,tmsum2,"某物联网平台采集了某设备每分钟的温度数据，时间戳T为[2023.01.01T09:00:00, 2023.01.01T09:01:00, 2023.01.01T09:03:00, 2023.01.01T09:05:00, 2023.01.01T09:06:00]，对应温度值X为[2,3,1,4,2]。需要找出每个时刻近3分钟内的温度平方和，结果存入result向量。","T = [2023.01.01T09:00:00, 2023.01.01T09:01:00, 2023.01.01T09:03:00, 2023.01.01T09:05:00, 2023.01.01T09:06:00]
X = [2, 3, 1, 4, 2]","result = tmsum2(T, X, 3*60*1000)"
1013,,,valueChanged,某物联网平台采集了多个设备的温度数据，存储于表t，包含字段deviceID（整型）、ts（时间戳）、temp（双精度浮点），数据已按设备ID分组并按时间戳升序排列。请生成一个布尔向量，表示每个设备内部温度读数是否与前一次记录不同。输出结果赋值到变量result。,"deviceID = [1001,1001,1001,1002,1002,1002,1003]
ts = 2023.01.01T09:00:00 + 0 60 120 0 60 120 0
temp = 25.3 25.3 26.0 32.1 32.1 32.5 18.5
t = table(deviceID, ts, temp)
","result = exec valueChanged(temp) from t context by deviceID
"
1014,,,var,"在物联网场景中，某温度监测系统记录了三个传感器五个时间点的温度数据，部分数据缺失（用NULL表示）。请计算每个传感器读数波动情况的方差，忽略缺失值。输入数据为表sensorData，包含sensor1（22.5,23.1,21.8,24.0,22.9）、sensor2（19.8,20.5,NULL,18.7,20.2）、sensor3（25.3,24.7,NULL,NULL,25.9）三个列，输出结果存储在result变量中并返回表格式结果。","sensorData = table(
22.5 23.1 21.8 24.0 22.9 as sensor1,
19.8 20.5 NULL 18.7 20.2 as sensor2,
25.3 24.7 NULL NULL 25.9 as sensor3
)",result = var(sensorData)
1015,,,varp,"在物联网设备监控场景中，给定一个包含3条设备记录的表格t，结构为[deviceId:INT, temperature:DOUBLE, humidity:INT]。其中温度列包含空值（23.5, NULL, 24.8），湿度列包含空值（55, 60, NULL）。请编写DolphinDB代码计算各数值型指标的总体离散程度，要求忽略空值，将计算结果存入result变量。","t = table(1..3 as deviceId, [23.5, NULL, 24.8] as temperature, [55, 60, NULL] as humidity)",result = varp(t)
1016,,,weekOfMonth,给定某物联网设备2023年各月记录表，其中每条记录包含日期、设备ID、功耗和温度。请将数据按每月或隔月的第三个星期四进行分组（从2023.01开始每隔2个月处理），统计各组平均温度及总功耗。已知输入表结构:date列DATE类型，device列SYMBOL，power列INT，temp列DOUBLE。输出结果保存到result变量。,"date = 2023.01.05 2023.02.08 2023.03.12 2023.04.06 2023.05.09 2023.06.15 2023.07.18 2023.08.22 2023.09.25
device = take(`D01,9)
power = 1200 1500 1800 2100 2400 2700 3000 3300 3600
temp = 32.1 34.5 36.2 38.9 40.0 42.3 44.7 46.8 48.5
deviceLogs = table(date, device, power, temp)","result = select avg(temp) as avg_temp, sum(power) as total_power from deviceLogs group by weekOfMonth(date, 2, 3, 2023.01.01, 2)"
1017,,,withNullFill,"在物联网设备监控场景中，传感器A采集的向量数据deviceA包含空值（NULL），传感器B记录的温度矩阵tempData也包含缺失值。需要计算设备运行效能因子，当任一传感器数值缺失时分别用25和15进行填充计算乘积，最终输出校正后的结果矩阵。已知输入数据格式:deviceA = [NULL,220,NULL,410]，tempData为2列矩阵[[15,NULL],[210,18],[NULL,36],[440,NULL]]，输出结果存储在result变量中。","deviceA = [NULL,220,NULL,410]
tempData = matrix([[15,NULL],[210,18],[NULL,36],[440,NULL]])
","result = withNullFill(mul, deviceA, tempData, 25).withNullFill(mul, tempData, deviceA, 15)


// 验证步骤:
1. 第一行计算:25*15=375，220*210=46200，25*36=900，410*440=180400
2. 第二列计算:15*NULL→15填充得15*220=3300，18*220=3960，36*25=900，15*410=6150
3. 最终矩阵应为:
│375  3300│
│46200 3960│
│900   900│
│180400 6150│"
1018,,,writeBytes,"某物联网设备每小时采集一次环境温度数据，当前批次采集到的三个温度值（25.5, 26.3, 24.8）需要以二进制形式保存到/tmp/sensor.bin文件。已知温度数据已转换为字节向量存储在变量sensorData中（每个浮点数占用4字节），请编写代码实现将完整字节数据写入文件，并返回实际写入的字节数。输入数据格式:内存中的字节向量sensorData，输出结果存储在变量result。","|
sensorData = float(25.5 26.3 24.8).binary()","|
t = file(""/tmp/sensor.bin"", ""w"")
result = t.writeBytes(sensorData)
t.close()"
1019,,,arrayVector,"物联网场景中，某传感器每分钟采集一次时间戳数据，现有前3小时共180条记录。需要将其按小时分割为三段，形成每行代表整点区间的数组结构。输入数据sensorData为长度180的时间类型向量，index为[60,120,180]，输出变量result应为3行数组向量，每行包含对应时段60个时间点。","sensorData = 2023.01.01T00:00:00 + 0..179
index = [60, 120, 180]
","result = arrayVector(index, sensorData)
"
1020,,,backup,"在物联网设备监测场景中，数据库""dfs://iotDB""按采集日期（值分区）和设备编号（范围分区）组合分区。现需对表metrics中2023.05.01当天所有设备数据进行全量镜像备份，要求覆盖已有备份文件、启用并行加速，且在备份中自动删除源库已移除的分区记录。请生成备份代码并将成功操作的分区数存入result。","// 数据库及表结构预置代码（无需实际执行）
// database(, VALUE, 2023.05.01..2023.05.07)
// database(, RANGE, 0 100 200)
// database(""dfs://iotDB"", COMPO, [日期库,设备库])
// createPartitionedTable(..., `metrics, `date`deviceID)","result = backup(""/backup/iot"", ""dfs://iotDB"", force=true, parallel=true, snapshot=true, tableName=`metrics, partition=[2023.05.01,])"
1021,,,bigarray,在物联网场景中，某气象站需要初始化一个能存储5万条温度数据的大容量缓冲区，预留扩展空间至20万条。无效测量值要求用-999填充，后续实际采集到8.4万条温度数据（部分含无效值）。请创建一个浮点型存储结构，过滤无效值后计算有效温度的平均值，结果存入result变量。,"temperatureData = rand(-1000..4000, 84000).replace!(rand(0..83999,1500), -999).float() / 10.0","sensorBuffer = bigarray(FLOAT, 0, 200000, -999)
sensorBuffer.append!(temperatureData)
validTemps = sensorBuffer[sensorBuffer != -999]
result = validTemps.avg()"
1022,,,businessYearEnd,"假设某公司的财年周期设定为每年6月结束，且统计周期从2013年4月1日起每三年更新一次。现有交易表trades包含日期列dt（2015.07.01至2024.02.15间的日期）和交易额列vol，请按每三个财年末最后一个工作日进行分组，输出各周期累计交易额，结果存入result。输入数据格式为[dt:DATE,vol:DOUBLE]，输出格式为[businessYearEnd_dt:DATE, total_vol:DOUBLE]","dates = 2015.07.01 + 365*0..8
vol = 3256.8 4189.2 2873.1 5321.7 4890.5 3764.3 6942.8 5213.6 6037.9
trades = table(dates as dt, vol)","result = select sum(vol) as total_vol from trades group by businessYearEnd(dt, 6, 2013.04.01, 3)"
1023,,,cdfGamma,"某保险公司分析客户索赔金额的累积概率分布，已知伽玛分布参数形状因子为3.0，速率参数为1.2。现有5个索赔金额样本点:[0.5, 1.5, 2.5, 3.5, 4.5]，需计算对应位置的累计概率值。输入数据:形状因子shape=3.0，尺度参数scale=1.2，索赔金额向量claims = [0.5, 1.5, 2.5, 3.5, 4.5]。输出结果存储为result，格式为浮点型向量。","shape = 3.0
scale = 1.2
claims = [0.5, 1.5, 2.5, 3.5, 4.5]","result = cdfGamma(shape, scale, claims)"
1024,,,charAt,"在物联网设备管理中，每个设备ID由字母和数字组成。现有一个字符串向量devices，包含三个设备ID:[""D123"",""X456"",""L789""]。需要提取每个设备ID字符串中第三位的字符（位置计数从0开始），并将结果存储在result变量中。输入数据格式为字符串向量，输出为字符向量。","devices = [""D123"",""X456"",""L789""]","result = charAt(devices, 2)"
1025,,,clear_,"在金融交易系统中，有一个实时更新的订单表orderBook，包含字段symbol（SYMBOL类型）、price（DOUBLE类型）、time（DATETIME类型）。现需要重置当日交易记录但不删除表结构，请将该表内容清空并验证结果。输入表原始数据为3条记录:[`AAPL, 150.5, 2023.09.01T09:30:00]、[`MSFT, 300.0, 2023.09.01T09:31:00]、[`GOOG, 2800.0, 2023.09.01T09:32:00]，输出结果应为空表结构保持不变，将最终空表查询结果赋值给result。","orderBook = table(
[`AAPL, `MSFT, `GOOG] as symbol,
[150.5, 300.0, 2800.0] as price,
[datetime(2023,9,1,9,30,0), datetime(2023,9,1,9,31,0), datetime(2023,9,1,9,32,0)] as time
)
","clear!(orderBook)
result = select * from orderBook
"
1026,,,clearCachedModules,"在物联网设备控制系统中，""sensorCalibrate""模块的calculateOffset函数由返回0.5更新为1.2。作为管理员，请编写代码确保加载最新模块，调用该函数并将结果存入变量result。输入数据:模块文件已更新但缓存未刷新，管理员账号为""admin""，密码""iot123""。输出数据:result为浮点数。","login(""admin"", ""iot123"")
moduleDir = ""./tempIoTModules""
if not exists(moduleDir) mkdir(moduleDir)
addModulePath(moduleDir)
writeText(moduleDir + ""/sensorCalibrate.dos"", ""module sensorCalibrate\ndef calculateOffset(){ return 0.5 }"")
use sensorCalibrate

writeText(moduleDir + ""/sensorCalibrate.dos"", ""module sensorCalibrate\ndef calculateOffset(){ return 1.2 }"")","clearCachedModules()
use sensorCalibrate
result = calculateOffset()"
1027,,,createLeftSemiJoinEngine,"在物联网场景中，实时处理设备传感器数据时，左表包含设备ID、时间戳和温度，右表包含设备ID、时间戳和湿度。当左表某条数据能在右表找到同一设备且同一时间的记录时，需输出设备ID、时间、温度、湿度及温度湿度乘积。左表变量为deviceLeft，右表为deviceRight，输出变量为result，结构为[deviceID, time, temp, humid, total]。如何实现？","share streamTable(1:0, `deviceID`time`temperature, [SYMBOL, TIMESTAMP, DOUBLE]) as deviceLeft
share streamTable(1:0, `deviceID`timestamp`humidity, [SYMBOL, TIMESTAMP, DOUBLE]) as deviceRight
share table(100:0, `deviceID`time`temp`humid`total, [SYMBOL, TIMESTAMP, DOUBLE, DOUBLE, DOUBLE]) as output
","engine = createLeftSemiJoinEngine(
name=""sensorJoin"",
leftTable=deviceLeft,
rightTable=deviceRight,
outputTable=output,
metrics=<[temperature, humidity, temperature*humidity]>,
matchingColumn=[[`deviceID,`time], [`deviceID,`timestamp]],
updateRightTable=True
)

subscribeTable(tableName=""deviceLeft"", actionName=""leftHandler"", handler=appendForJoin{engine, true}, msgAsTable=true)
subscribeTable(tableName=""deviceRight"", actionName=""rightHandler"", handler=appendForJoin{engine, false}, msgAsTable=true)

insert into deviceLeft values ([""D001"",""D002""], [2023.01.01T00:00:00.001, 2023.01.01T00:00:00.005], [25.8, 28.4])
insert into deviceRight values ([""D001"",""D002"",""D002""], [2023.01.01T00:00:00.001, 2023.01.01T00:00:00.005, 2023.01.01T00:00:00.005], [45.5, 60.1, 62.3])

result = output
"
1028,,,createReactiveStatelessEngine,"在设备健康监测场景中，某物联网系统需要实时计算设备X的功耗（power_usage）和健康指数（health_index）。其中功耗由电压(voltage)和电流(current)的乘积决定，健康指数由功耗与温度(temp)的线性组合计算（health_index=power_usage*0.8+temp*0.2）。当传感器数据更新时，如何构建计算流使得这两个衍生指标能自动更新？已知输入数据格式为[device, metric, value]，要求输出结果到名为result的表中。","names = `device`metric`value
types = [STRING, STRING, DOUBLE]
outputTable = table(1:0, names, types)

metrics = []
# 定义功耗计算规则: power_usage = voltage * current
metric1 = dict(STRING, ANY)
metric1[""outputName""] = `deviceX:`power_usage
metric1[""formula""] = <A*B>
metric1[""A""] = `deviceX:`voltage
metric1[""B""] = `deviceX:`current
metrics.append!(metric1)

# 定义健康指数计算规则: health_index = power_usage*0.8 + temp*0.2
metric2 = dict(STRING, ANY)
metric2[""outputName""] = `deviceX:`health_index
metric2[""formula""] = <A*0.8 + B*0.2>
metric2[""A""] = `deviceX:`power_usage
metric2[""B""] = `deviceX:`temp
metrics.append!(metric2)
","engine = createReactiveStatelessEngine(""healthEngine"", metrics, outputTable)
# 首次注入电压和电流数据
insert into engine values([""deviceX"",""deviceX""], [""voltage"",""current""], [220.0, 5.2])
# 注入温度数据
insert into engine values(""deviceX"", ""temp"", 45.5)
# 更新电压值
insert into engine values(""deviceX"", ""voltage"", 230.0)
result = select * from outputTable
"
1029,,,createYieldCurveEngine,某银行需要根据实时债券行情数据，按数据源和地区分组，每5分钟拟合各组的收益率曲线模型，并使用最新模型预测指定剩余期限的收益率。输入表含债券代码、时间戳、中间价收益率、剩余期限、资产类型（3和4）、数据源、地区等列，输出预测结果到变量result。,"dummyTable = table(1:0, `symbol`timestamp`midYield`timetoMaturity`assetType`dataSource`region, [SYMBOL,TIMESTAMP,DECIMAL32(3),DOUBLE,INT,INT,STRING])
modelOutput = table(1:0, `updateTime`assetType`dataSource`region`model, [TIMESTAMP,INT,INT,STRING,BLOB])
predictOutput = table(1:0, `predTime`assetType`dataSource`region`maturity`predYield, [TIMESTAMP,INT,INT,STRING,DOUBLE,DOUBLE])

data = table(take(`B0001`B0002, 100) as symbol, 2023.01.01T09:00:00 + 0..99*300 as timestamp, 
decimal32(rand(5.0,100)+1,3) as midYield, (rand(10.0,100)+5).sort() as timetoMaturity,
take([3,4],100) as assetType, take([11,12],100) as dataSource, take([""North"",""South""],100) as region)
","engine = createYieldCurveEngine(
name=""curvePredictor"",
dummyTable=dummyTable,
assetType=[3,4],
fitMethod=[<cubicSpline(timetoMaturity,midYield)>, <ns(timetoMaturity,midYield)>],
keyColumn=`assetType`dataSource`region,
modelOutput=modelOutput,
frequency=5m,
timeColumn=`timestamp,
predictInputColumn=`timetoMaturity,
predictOutput=predictOutput
)
engine.append!(data)
result = select * from predictOutput where predTime >= 2023.01.01T09:30:00
"
1030,,,cummax,给定一个包含三支股票过去五个交易日收盘价的矩阵stockPrices，其中每列代表一支股票，每行代表一个交易日。需要计算每个交易日结束后各支股票的历史最高收盘价，并将结果存储在变量result中。输入数据格式为矩阵，输出结果格式为与输入同维度的矩阵。,"stockPrices = matrix(150 160 170, 155 158 165, 148 162 172, 160 155 168, 165 170 175)
","result = cummax(stockPrices)
"
1031,,,cumsumTopN,某基金评级表包含基金ID、每日收益和评级分数，请计算每只基金在累计窗口中，根据评级分数降序排列后，取前3名的每日收益累计和。输入表名为fund，包含列fundId（INT）、return（DOUBLE）、rating（DOUBLE），其中rating可能存在空值。输出结果列命名为result，要求返回DOUBLE类型的累计和数组。,"fundId = rand(10, 15)
return = rand(100.0, 15)
rating = take([NULL, 7.2, 8.1, 6.5, 9.3], 15)
fund = table(fundId as fundId, return as return, rating as rating)
","result = select cumsumTopN(return, rating, 3, false) as result from fund context by fundId
"
1032,,,deleteGroupMember,"物联网平台管理员需要将用户""JamesCarter""从温度监控组和环境告警组中移除。已知用户ID为`JamesCarter，群组列表为[`temp_monitor_group`env_alert_group]，编写执行该操作的代码并将结果存入result。","groupIds = [`temp_monitor_group, `env_alert_group]
userId = `JamesCarter","result = deleteGroupMember(userId, groupIds)"
1033,,,deleteReplicas,"在物联网存储优化场景中，管理员需要清理节点""storage02""上三个温度传感器的历史数据冗余副本。已知该节点存在三个待删除副本的数据块，其ID分别为[""TS_2023_B1"",""TS_2023_C5"",""TS_2023_F9""]，请编写操作代码并将执行结果存储在变量中。输入数据格式:字符串向量chunkIds，节点别名nodeAlias；输出格式:操作结果存入result。","chunkIds = [""TS_2023_B1"",""TS_2023_C5"",""TS_2023_F9""]
nodeAlias = ""storage02""","result = deleteReplicas(chunkIds, nodeAlias)"
1034,,,deleteScheduledJob,在物联网设备管理中，需要移除一个已配置的定时检查设备状态的周期性任务。已知该任务的唯一标识为“deviceCheck2023”，当前系统中已存在此任务配置。请编写代码取消此任务的执行计划，并将操作结果保存至变量result。,"scheduleJob(jobId=`deviceCheck2023, scheduleTime=08:00:0000000, jobFunc={ /* 设备状态检查逻辑 */ }, frequency='D', startDate=2023.01.01, endDate=2023.12.31)
","result = deleteScheduledJob(""deviceCheck2023"")
"
1035,,,deleteUser,在物联网设备管理系统中，需要清理无效账户'TempSensor_45'的访问权限，输入的用户名为字符串格式变量。请写出执行该操作并将结果存入变量的代码。,,result = deleteUser(`TempSensor_45)
1036,,,duration,在股票数据分析中，给定一个包含跨多个交易日的分钟级价格表（结构:date列存储时间戳[类型为DATETIME]，price列存储数值），要求将数据按每3个自然交易日的窗口进行分组，并计算每组内的最高价格。已知交易所日历标识为XNYS，输入数据表变量名为t，输出结果存入变量result，结果需包含分组时间起点和对应的最大值列。,"t = table(
concat(
[2023.01.03T09:30:00 + 0..4*60, 2023.01.04T09:30:00 + 0..4*60, 2023.01.05T09:30:00 + 0..4*60, 2023.01.09T09:30:00 + 0..4*60]
) as date,
rand(100.0, 20) as price
)
","result = select max(price) as max_price from t group by bar(date, duration(""3XNYS""))
"
1037,,,flushPKEYCache,某物联网监控系统每隔15分钟采集一次传感器读数并存入分区表，为防止内存中的设备标识符缓存和未提交事务因突发故障丢失，需在每次采集后立即将所有数据持久化到磁盘。已知数据库dfs://sensor_db中存在按时间分区的表readings，结构为ts(TIMESTAMP)、device(SYMBOL)、value(DOUBLE)。请编写强制执行落盘操作的代码，结果存入变量result。,"
login(""admin"", ""123456"")
if(existsDatabase(""dfs://sensor_db"")){
dropDatabase(""dfs://sensor_db"")
}
db = database(""dfs://sensor_db"", VALUE, 2023.01.01T00:00:00..2023.01.01T23:59:59)
schema = table(1:0, `ts`device`value, [TIMESTAMP, SYMBOL, DOUBLE])
db.createPartitionedTable(schema, ""readings"", ""ts"").append!(table(2023.01.01T12:00:00+0..9 as ts, take(`DHT22,10) as device, rand(20.5..30.5,10)))
","
result = flushPKEYCache()
"
1038,,,flushTSDBCache,"在物联网环境中，传感器数据持续写入TSDB引擎的分布式表device_records，结构为(ts: TIMESTAMP, deviceID: SYMBOL, voltage: DOUBLE)。现需在系统断电前将缓冲区内已接收的5条电压记录立刻固化存储，请执行关键操作并将执行状态存入变量result。","
// 创建TSDB数据库及数据表
dbName = ""sensor_db""
tableName = ""device_records""
if(existsDatabase(dbName)) dropDatabase(dbName)
db = database(dbName, VALUE, 2023.01.01..2023.01.03, engine=""TSDB"")

// 生成模拟数据并写入
tm = table(100:0, `ts`deviceID`voltage, [TIMESTAMP, SYMBOL, DOUBLE])
pt = db.createPartitionedTable(tm, tableName, `ts)
data = table(2023.01.01T09:00:00.000 + 1..5 as ts, take(""DVT-081"",5) as deviceID, rand(220.0..240.0,5) as voltage)
pt.append!(data)
","
flushTSDBCache()
result = ""紧急固化完成""
"
1039,,,genOutputColumnsForOBSnapshotEngine,在股票行情分析场景中，需要配置一个实时订单簿快照引擎，要求输出标的的最新状态:包含基础字段但不显示时间列，生成5档买卖价格和数量并以数组形式展示，同时要求包含剩余委托明细。请生成对应的输出字段配置和表结构对象，结果存入变量result。,/* Prepare input data (此处无需数据生成，函数参数直接通过调用设置) */,"result = genOutputColumnsForOBSnapshotEngine(time=false, depth=(5, true), residualDetail=true)"
1040,,,getBackupList,"某物联网平台需要对设备状态表的备份分区进行核查，已知备份存放在""/iot/backups""路径下，数据库名称为""dfs://sensorDB""，表名为""status""。请编写代码获取各分区备份的详细信息，包括分区ID、路径、版本、记录数和更新时间，并将结果保存到变量result中。","if existsDatabase(""dfs://sensorDB""):
dropDatabase(""dfs://sensorDB"")

deviceIDs = [""D""+string(1..10)]
n = 50000
timestamp = 2023.01.01T00:00:00.000 + 0..(n-1)*1000
devID = take(deviceIDs, n).shuffle()
voltage = rand(10.0, n)
t = table(timestamp, devID, voltage)

db = database(""dfs://sensorDB"", VALUE, deviceIDs)
pt = db.createPartitionedTable(t, `status, `devID)
pt.append!(t)
backup(""/iot/backups"", ""dfs://sensorDB"", tableName=""status"")
","result = getBackupList(""/iot/backups"", ""dfs://sensorDB"", ""status"")
"
1041,,,getCacheEngineStat,"在物联网监测系统中，需要实时掌握传感器数据表在OLAP引擎中的缓存状态。已知当前节点存在以时间戳分区的物理表""sensorData""，其结构为[ts TIMESTAMP, sensorID SYMBOL, reading DOUBLE]。请查询该表相关chunk的缓存详情，返回各chunk的唯一标识、所属物理表名以及已完成事务的缓存记录数，结果存入变量result。","login(`admin, ""123456"")
if(existsDatabase(""dfs://iotCache"")) {
dropDatabase(""dfs://iotCache"")
}
db = database(""dfs://iotCache"", VALUE, 2023.01.01..2023.01.03)
schema = table(1:0, `ts`sensorID`reading, [TIMESTAMP, SYMBOL, DOUBLE])
pt = db.createPartitionedTable(schema, `sensorData, `ts)
data = table(2023.01.01T09:30:00.000 + 1..1000 as ts, take(`A1001`B2002`C3003, 1000) as sensorID, rand(20.0..40.0, 1000) as reading)
pt.append!(data)","result = select chunkId, physicalName, cachedRowsOfCompletedTxn from getCacheEngineStat() where physicalName=""sensorData"""
1042,,,getPKEYMetaData,在物联网设备监控系统中，使用PKEY引擎存储传感器历史数据表'sensor_log'，需提取所有存储分块的元信息，包含块ID、磁盘路径、层级、关联表名及数据文件标识。已知数据库已按时间分区存储数据，输出结果存入变量result，要求表结构包含上述字段。,"
dbPath = ""/home/dolphindb/data/sensor_pkey""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
db = database(dbPath, VALUE, 2023.06.01..2023.06.05, engine='PKEY')
t = table(1:0, `timestamp`sensorID`reading, [TIMESTAMP, SYMBOL, DOUBLE])
pt = db.createPartitionedTable(t, `sensor_log, `timestamp)
dates = 2023.06.01..2023.06.05
for date in dates {
data = table(take(date, 200) as timestamp, take(`SNSR_01`SNSR_02, 200) as sensorID, rand(0.0..100.0, 200) as reading)
pt.append!(data)
}
","
result = getPKEYMetaData().select(table == ""sensor_log"")
"
1043,,,getRecoveryTaskStatus,在金融交易系统的分布式数据库集群中，某数据节点突发故障导致部分副本丢失。监控系统需要实时查看当前所有数据恢复任务的执行详情，包括但不限于每个任务的唯一标识、数据来源节点、目标恢复节点、最新执行状态、任务启动时间戳以及异常终止的具体原因。请编写脚本获取包含上述信息的结构化查询结果，并将结果保存到变量result中。,,result = getRecoveryTaskStatus()
1044,,,getRightStream,在实时处理股票行情时，存在两个动态更新的数据源:交易快照表包含时间戳(time)、股票代码(sym)、最新价(price)；指标流包含时间戳(time)、股票代码(sym)、波动率(vol)。现需要将窗口聚合引擎的计算结果作为另一个连接引擎的右输入表，如何获取原始窗口引擎的右侧结构引用？已知原始连接引擎变量名为windowEngine，输出结果需存入result。,"tradeSchema = table(100:0, `time`sym`price, [TIMESTAMP, SYMBOL, DOUBLE])
factorSchema = table(100:0, `time`sym`vol, [TIMESTAMP, SYMBOL, DOUBLE])

windowEngine = createWindowJoinEngine(
name=""window_agg"",
leftTable=tradeSchema,
rightTable=factorSchema,
outputTable=table(100:0, `time`sym`avgPrice`maxVol, [TIMESTAMP, SYMBOL, DOUBLE, DOUBLE]),
windowSize=60000,
metrics=<[avg(price), max(vol)]>,
matchingColumn=`sym
)
","result = getRightStream(windowEngine)
"
1045,,,getTableAccess,在金融风控场景中，审计部门需要核查分布式数据库 dfs://riskData 下交易记录表 transactions 的权限配置明细。已知该表已启用权限控制，需要获取所有用户及用户组对该表的读、写、删权限状态（包括允许和拒绝的情况）。请编写代码查询权限信息，返回包含用户类型、权限状态的结果表，并存储在变量 result 中。,"
login(""admin"", ""123456"")
if(existsDatabase(""dfs://riskData"")){
dropDatabase(""dfs://riskData"")
}
db = database(""dfs://riskData"", VALUE, 2023.01.01..2023.12.31)
t = table(100:0, `time`security`amount, [TIMESTAMP, SYMBOL, DOUBLE])
pt = db.createPartitionedTable(t, ""transactions"", ""time"")

createUser(""audit_user1"",""AB@123"")
createUser(""trader_mike"",""CD@456"")
createGroup(""quant_group"")
addGroupAccess([""trader_mike""], ""quant_group"")

grant(""quant_group"", TABLE_READ, ""dfs://riskData/transactions"")
deny(""trader_mike"", TABLE_DELETE, ""dfs://riskData/transactions"")
grant(""audit_user1"", TABLE_INSERT, ""dfs://riskData/transactions"")
","
result = getTableAccess(""dfs://riskData"", ""transactions"")
"
1046,,,iminLast,"在物联网设备连续采集的温度数据中，记录了一组温度值（存储在向量tempData中，值为[12.5, 10.3, 9.8, 10.3, 9.8, 11.0]），找出最近一次温度达到最低点的位置索引，并将结果存入变量result中。（输出结果为整数标量）","tempData = [12.5, 10.3, 9.8, 10.3, 9.8, 11.0]",result = iminLast(tempData)
1047,,,isDigit,"在证券交易系统中，订单号必须全数字才能有效。现有订单表orders包含列order_id（STRING类型），其值为[""20230715"",""ABX123"",""4567"", """"]。请校验每个订单号的合规性，生成布尔型结果存入result变量。",orders = table(`20230715`ABX123`4567`` as order_id),result = orders.order_id.isDigit()
1048,,,isIndexedMatrix,在物联网监控系统中，设备状态数据以矩阵形式存储，行索引为5个连续时间戳（从2023.01.01开始），列名为三个监测点（X、Y、Z），矩阵变量名为statusTable。需要验证该数据矩阵是否具备索引结构。输入矩阵包含15个随机整数（5行3列），输出结果存入变量result。,"timestamps = 2023.01.01..2023.01.05
sensors = `X`Y`Z
data = rand(100, 15)
statusTable = matrix(data, 5, 3)
statusTable.rename!(timestamps, sensors)
","result = isIndexedMatrix(statusTable)
"
1049,,,isTitle,"在物联网设备管理中，需要校验一组设备名称是否符合每个单词首字母大写、其余字母小写的格式规范。给定字符串向量devices包含以下元素:[""SmartSensor V2"", ""motionDetector"", ""Temperature Monitor"", ""404 Error"", ""  ""]，要求返回布尔值向量result标记每个名称是否符合规范，其中非字母组合和空格的应返回false。","devices = [""SmartSensor V2"", ""motionDetector"", ""Temperature Monitor"", ""404 Error"", ""  ""]",result = devices.isTitle()
1050,,,logisticRegression,"某物联网平台采集了设备的三个传感器指标（s1、s2、s3）和故障状态数据，需要建立故障预测模型。输入表device_status包含100条记录:故障标记列is_fault（INT类型，0正常1故障），s1正常设备服从N(-0.5,1)分布、故障设备服从N(1.2,0.8)分布，s2正常服从N(0,1)、故障服从N(2,1)，s3均为N(0.5,1)分布。请构建逻辑回归模型并将结果存入result变量，最终输出字典需包含系数向量和迭代次数。","t = table(100:0, `is_fault`s1`s2`s3, [INT,DOUBLE,DOUBLE,DOUBLE])
# 正常设备数据
insert into t values (take(0,50), norm(-0.5, 1.0, 50), norm(0.0, 1.0, 50), norm(0.5, 1.0, 50))
# 故障设备数据
insert into t values (take(1,50), norm(1.2, 0.8, 50), norm(2.0, 1.0, 50), norm(0.5, 1.0, 50))
","result = logisticRegression(sqlDS(<select * from t>), `is_fault, `s1`s2`s3, regularizationCoeff=0.5)
"
1051,,,lowerBound,"在股票事件的时间戳处理中，给定一个递增的日期索引序列s（索引为[2023.10.01, 2023.10.03, 2023.10.05, 2023.10.08]，值为[100,200,300,400]）和查询时间数组queryDates（值为[2023.10.01,2023.10.04,2023.10.09]），要求获取每个查询时间在s中第一个大于等于对应日期的位置序号，结果存入变量result（输出格式为索引序列）。","index = [2023.10.01, 2023.10.03, 2023.10.05, 2023.10.08]
s = indexedSeries(index, 100 200 300 400)
queryDates = [2023.10.01, 2023.10.04, 2023.10.09]
","result = lowerBound(s, queryDates)
"
1052,,,makeSortedKey,在物联网设备状态监测中，有三台设备的编号依次为`D3`、`D1`、`D2`，对应采集到的异常代码分别为900、200、500。需要将设备编号和异常码按顺序合并生成唯一检测标识符，且要求内部生成的键值经过排序处理。请输出标识符向量，格式为字符串连接形式（如D3900），并赋值给变量result。,"deviceIDs = [`D3, `D1, `D2]
errorCodes = [900, 200, 500]
","result = makeSortedKey(deviceIDs, errorCodes)
"
1053,,,map,现有一个按天分区的股票行情表，包含时间戳和价格两列。每个分区内可能存在重复的时间戳记录，请查询该表，在每个分区内仅保留首次出现的时间戳记录，去除后续重复项。输入表结构为timestamp(DATETIME)、price(DOUBLE)，分区列为timestamp按天VALUE分区，输出结果变量名为result。,"dates = 2023.01.01 + 0..2
timestamp = ravel(each(d -> concatDateTime(d,09:00:00).take(3), dates))
price = (1..9) * 1.0
t = table(timestamp as timestamp, price as price)
if(existsDatabase(""dfs://stock_db"")) dropDatabase(""dfs://stock_db"")
db = database(""dfs://stock_db"", VALUE, 2023.01.01..2023.01.03)
pt = db.createPartitionedTable(t, `pt, `timestamp)
pt.append!(t)
","result = select * from pt where isDuplicated(timestamp) = false map
"
1054,,,memberModify,"物联网平台使用字典存储设备实时采集的温度数据。字典devices中，键`X`对应的温度序列为[10.5, 20.3]，键`Y`对应的序列为[35.1]。现在需要实现动态数据追加:在设备X的序列末尾添加新数值30.8，在设备Y的序列末尾添加新数值42.0。请生成修改后的字典并将结果存入变量result。输入数据格式为字典，输出格式为更新后的字典，变量名为result。","devices = dict(`X`Y, ([10.5, 20.3], [35.1]))
","memberModify!(devices, append!, `X`Y, [30.8, 42.0])
result = devices
"
1055,,,mmed,"某工厂的温湿度传感器每5分钟采集一次数据，其中传感器ID和数值存储在表中，包含可能的缺失值。假设当前表有5条记录，时间列为2023.08.01T09:00到2023.08.01T09:20，sensor1的测量值为[25.8, 26.1, NULL, 27.3, 26.9]，sensor2的测量值为[58, 60, NULL, 55, 57]。要求对每个传感器按3个时间点的窗口计算中位数，当窗口内至少有一个有效值时就要输出结果，最终将计算结果保存到result。","t = table(2023.08.01T09:00 + 0..4*5 as timestamp, [25.8, 26.1, NULL, 27.3, 26.9] as sensor1, [58, 60, NULL, 55, 57] as sensor2)
","result = select timestamp, mmed(sensor1, 3, 1) as med1, mmed(sensor2, 3, 1) as med2 from t
"
1056,,,month,假设有一个物联网设备采集了三个不同时间点的数据，对应的TIMESTAMP类型变量timestamps分别为2023-05-15 14:30:00.000、2024-08-22 08:45:15.123和2025-01-01 00:00:00.000。现在需要生成这些时间点对应的月度标识，最终结果存储在result变量中。输入数据格式为向量，输出要求为MONTH类型的向量。,"timestamps = [2023.05.15 14:30:00.000, 2024.08.22 08:45:15.123, 2025.01.01 00:00:00.000]",result = month(timestamps)
1057,,,pcross,在量化回测场景中，需要并行计算两组模拟收益率序列（x包含5个保留两位小数的浮点型收益率，y包含5个保留两位小数的浮点型风险调整因子）的配对叠加组合，生成5x5的对应关系矩阵。输入数据变量名为x和y，输出结果存储在result变量中。,"x = round(rand(0.1, 5)-0.05, 2)
y = round(rand(0.05, 5)-0.02, 2)","result = pcross(add, x, y)"
1058,,,polynomial,"在股票预测分析中，需要根据时间序列数据应用三次系数模型（包含常数项、线性项、二次项）。已知时间点向量变量t存储[0,1,2,3,4]，系数向量coeffs为[-1,0.5,3]，计算各时间点的复合指标值并将结果存入result变量。输入数据为X=t=(0 1 2 3 4)，coeffs=(-1 0.5 3)，输出结果为向量格式的result。","t = 0 1 2 3 4
coeffs = [-1, 0.5, 3]","result = polynomial(t, coeffs)"
1059,,,ratio,"在物联网设备监控场景中，设备A和B每小时采集的温度校准值分别存储在矩阵calibrationA（2行3列，元素为[6,7,8],[9,10,11]）和calibrationB（2行3列，元素为[3,4,5],[6,7,8]）。需要计算每个传感器点位上A设备值与B设备值的精确浮点比率，结果存入result矩阵。","calibrationA = [[6,7,8],[9,10,11]]
calibrationB = [[3,4,5],[6,7,8]]
","result = calibrationA \\ calibrationB
"
1060,,,renameTable,"在金融交易系统中，现有按月分区的数据库""dfs://tradeDB""，存储了2023年第一季度的交易记录表`trade2023`，包含日期(date)和交易量(volume)字段。现需将该表调整为季度命名规范，请将其改名为`tradeQ1_2023`后，验证数据完整性并返回总记录数。输入表结构为date:DATE,volume:INT，输出结果存入result变量。","login(""admin"", ""123456"")
dbPath = ""dfs://tradeDB""
if existsDatabase(dbPath):
dropDatabase(dbPath)
n=90000
date = take(2023.01.01..2023.03.31, n)
volume = rand(1000, n)
t = table(date, volume)
db = database(dbPath, VALUE, 2023.01.01..2023.03.31)
pt = db.createPartitionedTable(t, `trade2023, `date)
pt.append!(t)
","db = database(""dfs://tradeDB"")
renameTable(db, `trade2023, `tradeQ1_2023)
result = select count(*) as total from loadTable(db, `tradeQ1_2023)
"
1061,,,resetDfsRecoveryConcurrency,某物联网平台在系统维护期间需要限制分区恢复任务的资源占用，要求将最大并发任务数临时调整为3，并获取调整后的数值进行验证。输入参数为整数3，输出结果为调整后的并发数，存储在变量result中。输入数据无需额外准备。,,"resetDfsRecoveryConcurrency(3)
result = getDfsRecoveryConcurrency()"
1062,,,resumeRecovery,在一个高可用集群的物联网设备监控系统中，管理员发现部分节点的数据恢复流程处于挂起状态。请编写代码继续执行被中断的恢复任务，要求将执行结果保存在变量中。输入数据无需额外准备，直接执行恢复指令，输出结果存储在result变量。,// 该函数无需数据准备，直接执行系统命令,result = resumeRecovery()
1063,,,rowNames,在分析某两天的股票收益率时，数据存储为一个2行3列的矩阵，行对应日期2023.01.01和2023.01.02，列对应三只股票AAPL、MSFT、GOOG，矩阵变量名为m。需要将这两个日期按顺序提取为数组存储到result变量中。,"m = matrix(7.2 8.1 9.5, 6.4 5.3 4.2)
m.rename!([2023.01.01, 2023.01.02], `AAPL`MSFT`GOOG)",result = rowNames(m)
1064,,,rpad,"在物联网设备管理中，需要将设备编号统一格式化为8位长度。现有设备信息表deviceInfo包含两列:deviceID（字符串类型，如""D1""、""A2""）、region（字符串类型，如""CN""）。要求对不足8位的设备ID进行右侧循环填充，使用""-X""作为填充模式，生成新列paddedID。请输出处理后的设备ID和对应区域，结果存入result。","
deviceInfo = table([""D1"", ""A2"", ""T5""] as deviceID, [""CN"", ""US"", ""EU""] as region)
","
result = select rpad(deviceID, 8, '-X') as paddedID, region from deviceInfo
"
1065,,,setGpFitnessFunc,在股票因子模型中，需要根据行业分组计算因子值和预期值的平均绝对误差作为适应度指标。已知引擎对象myEngine已创建，分组列industry为包含100次循环的'A'、'B'、'C'序列。要求编写代码实现该评估逻辑并将配置结果保存到变量result。,"industry = take(`A`B`C, 100)
myEngine = createGPLearnEngine()","def fitnessFunc(x, y, groupCol){
return mean(abs(groupby(mean, x, groupCol) - groupby(mean, y, groupCol)))
}
result = setGpFitnessFunc(myEngine, fitnessFunc, [industry])"
1066,,,setMaxJobParallelism,某金融机构需要为高频交易数据分析师调整系统资源配额。已知存在用户名为'FinancialAnalyst'的账户，现需将该用户提交任务时允许同时运行的最大子任务数量限制为32个。请编写初始化代码并实现该资源配置操作，要求最终结果存储在变量result中。,"login(`admin, `123456)
createUser(`FinancialAnalyst, `SecurePass123)","result = setMaxJobParallelism(`FinancialAnalyst, 32)"
1067,,,setTableComment,在物联网平台中，有一个名为deviceData的分布式表，包含devID（INT类型）、ts（TIMESTAMP）、temp（DOUBLE）三个字段。现在需要为该表添加描述信息，说明其用途是存储传感器温度数据。请编写代码实现，并将获取到的表描述结果赋值给变量result。,"login(""admin"", ""123456"")
dbPath = ""dfs://sensorDB""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
db = database(dbPath, RANGE, 2023.01.01..2023.01.05)
schemaTB = table(1:0, `devID`ts`temp, [INT, TIMESTAMP, DOUBLE])
deviceData = db.createPartitionedTable(schemaTB, ""deviceData"", ""ts"")","setTableComment(deviceData, ""存储传感器温度数据的表"")
result = schema(deviceData)[""tableComment""]"
1068,,,shape,某个物联网系统中的温度传感器网络每分钟收集一次数据，现有一次采集结果存储在矩阵sensorMatrix中，该矩阵的行表示不同的监测节点，列表示不同类型的传感器。已知该矩阵结构为[监测节点数量]行×[传感器类型数量]列，请获取当前批次数据的空间部署结构信息。输入矩阵变量名sensorMatrix，要求输出结果存储在result变量中。,"sensorMatrix = matrix(5 8 2 7 3 6 1 9 4, 3:3).rename!(matrix([[""节点A"",""节点B"",""节点C""],[""温度"",""湿度"",""气压""]]))",result = shape(sensorMatrix)
1069,,,shell,每日交易结束后，需要将源目录/tmp/dolphindb/trade_logs/下的日志文件trade_20231015.log打包压缩为trade_20231015.tar.gz，保存到备份目录/tmp/dolphindb/backup/20231015/中。输入数据路径变量为srcDir和backupDir，输出结果为系统命令执行的返回值，存入变量result。,"srcDir = ""/tmp/dolphindb/trade_logs/""
backupDir = ""/tmp/dolphindb/backup/20231015/""
shell(""mkdir -p "" + srcDir)
shell(""echo 'sample data' > "" + srcDir + ""trade_20231015.log"")
shell(""mkdir -p "" + backupDir)","cmd = ""tar -czf "" + backupDir + ""trade_20231015.tar.gz -C "" + srcDir + "" trade_20231015.log""
result = shell(cmd)"
1070,,,sqlUpdate,"现有交易记录表tradeTable包含股票代码symbol、日期date和成交量volume三个字段，需要为每只股票按日期从最新到最旧的顺序累加成交量，并将结果更新到新增列cumVolumeDesc中。输入表结构为:tradeTable=symbol->SYMBOL,date->DATE,volume->INT；输出表需在tradeTable基础上新增cumVolumeDesc列，结果存入变量result。","tradeTable = table(`A`A`B`B as symbol, 2023.01.03 2023.01.02 2023.01.04 2023.01.01 as date, 1500 800 2100 600 as volume)
","result = sqlUpdate(table=tradeTable, updates=<cumsum(volume) as cumVolumeDesc>, contextBy=<symbol>, csort=<date>, ascSort=0).eval()
"
1071,,,sum,"某投资组合包含资产A、B、C，记录了三天的每日收益数据（部分数据存在缺失）。需要汇总每个资产的总收益，计算时需自动跳过无效数据。输入表t包含日期列date，数值列为A、B、C，其中A列数据为[100,150,NULL]，B列为[200,NULL,250]，C列为[NULL,300,350]。请输出各列的数值总和，结果存储在result变量中。","t = table(2023.01.01 2023.01.02 2023.01.03 as date, [100, 150, NULL] as A, [200, NULL, 250] as B, [NULL, 300, 350] as C)",result = sum(t)
1072,,,symbolCode,"在物联网场景中，多个传感器设备ID存储在SYMBOL类型的二维矩阵中，需要获取其内部编码映射。给定输入变量devices是一个3行2列的SYMBOL矩阵，格式为[""NodeA"",""NodeB"";""NodeC"",""NodeA"";""NodeB"",""NodeD""]，请输出对应的整数编码矩阵并存储在result变量中。","deviceList = [""NodeA"",""NodeB"",""NodeC"",""NodeA"",""NodeB"",""NodeD""]
devices = symbol(deviceList)$3:2",result = symbolCode(devices)
1073,,,syncDict,"在实时交易系统中，需要创建一个线程安全的共享参数集保存最新股票交易参数，初始键为[""AAPL"", ""GOOG"", ""MSFT""]，对应值为[150.5, 2750.3, 300.1]。要求该参数集支持遍历顺序固定并能被多个线程同时访问，输入数据格式为两个STRING和DOUBLE类型的向量，最终结果存储在变量result中。","symbols = [""AAPL"", ""GOOG"", ""MSFT""]
params = [150.5, 2750.3, 300.1]","result = syncDict(symbols, params, `tradeConfig, true)"
1074,,,syntax,在数据分析过程中，需要快速查看一个用于文本文件加载的接口函数参数结构。已知该函数用于将硬盘中的结构化文本导入内存表，但不记得具体参数顺序。请获取该函数的完整语法格式，输入数据为函数对象loadText，输出结果存入变量result，要求返回结果格式为语法描述字符串。," 

"," 
result = syntax(loadText)
"
1075,,,tmskew,"某物联网传感器每半分钟采集一次环境指标，需实时分析每个数据点前2分钟的指标分布对称性（采用无偏估计）。已知时间列t为[""09:30:00"",""09:30:30"",""09:31:00"",""09:31:30"",""09:32:00"",""09:32:30""]，指标值x为[2.1,3.3,NULL,4.8,5.5,6.2]，请计算各时点的滚动斜度结果存入result。","t = [09:30:00, 09:30:30, 09:31:00, 09:31:30, 09:32:00, 09:32:30].map(time)
x = [2.1, 3.3, NULL, 4.8, 5.5, 6.2]","result = tmskew(t, x, 2m, false)"
1076,,,tmstd,在物联网传感器监控场景中，设备每隔不定时采集一次环境数据（包含重复时间戳）。现有数据表sensor_data包含时间戳t（TIMESTAMP类型）和振动幅度amplitude（INT类型），要求计算每个记录点前1.5小时时间窗口内的振动幅度样本标准差，结果保留到变量result。当窗口内有效数据不足两个时返回空值。,"t = [2023.01.01T08:10:00, 2023.01.01T08:10:00, 2023.01.01T09:25:00, 2023.01.01T09:45:00, 2023.01.01T10:00:00]
amplitude = [120, 115, NULL, 123, 118]
sensor_data = table(t as t, amplitude as amplitude)
","result = select t, amplitude, tmstd(t, amplitude, 1.5h) as result from sensor_data
"
1077,,,tmstdpTopN,在物联网设备监测中，需要分析每个时间点前5个时段内信号质量最好的3组温度数据，计算这些数据的离散程度。给定时间序列变量为time（TIMESTAMP类型）、温度数据为temp（INT类型）、信号质量为sig（INT类型，空值不参与排序），输出每个时刻对应的离散度计算结果到result变量（DOUBLE类型）。,"time = [2023.01.09T09:00:00, 2023.01.09T09:05:00, 2023.01.09T09:10:00, 2023.01.09T09:15:00, 2023.01.09T09:20:00, 2023.01.09T09:25:00]
temp = [25, 26, 24, 27, 23, 28]
sig = [80, 95, 65, , 75, 92]
","result = tmstdpTopN(time, temp, sig, 5, 3, false)
"
1078,,,tmstdTopN,在分析某传感器波动性时，需要在3小时窗口期内，按照信号强度降序选取前3个有效采样值计算标准差。给定输入表包含时间戳（datetime类型）、测量值（float类型）、信号强度（int类型，存在空值），输出结果变量名为result。请实现该逻辑。,"datetime = 2023.01.10T09:00:00..2023.01.10T14:00:00
values = [2.5, 3.1, 1.8, 4.2, 6.7, 5.4]
signal = [80, 95, , 105, 90, 110]
t = table(datetime as ts, values as reading, signal as strength)
","result = select tmstdTopN(ts, reading, strength, 3h, 3, false) as result from t
"
1079,,,tmvarp,物联网设备在不同时间点采集温度数据，时间戳可能存在不规则间隔。请计算每个记录时间点前4秒内的温度总体方差，忽略无效数据。输入数据表m包含时间列t（TIMESTAMP类型）和温度数值列x（INT类型），输出结果为与原始表结构相同并新增结果列result（DOUBLE类型）。,"t = temporalAdd(2023.01.01T00:00:00, 0 2 4 6 9, ""s"")
x = 5 3 8 6 2
m = table(t as t, x as x)
","result = select *, tmvarp(t, x, 4s) as result from m
"
1080,,,truncate,"某物联网平台采集了设备状态数据，存储在名为""dfs://iotDB""的数据库的按天分区表""sensorData""中。现需要对2023.05.01当天的所有传感器读数进行全量复位，要求清空该日数据但保留表结构。已知表结构包含设备ID（整数）、采集时间（时间戳）、温度值（浮点）三列，请写出完整操作代码。","login(""admin"", ""123456"")
databaseName = ""dfs://iotDB""
if(existsDatabase(databaseName)){
dropDatabase(databaseName)
}

db = database(databaseName, VALUE, 2023.05.01..2023.05.03)
schema = table(1:0, `devID`ts`temp, [INT,TIMESTAMP,DOUBLE])
db.createPartitionedTable(schema, ""sensorData"", ""ts"")

data = table(
1..100 as devID,
temporalAdd(2023.05.01T00:00:00.000, 0..999, ""m"") as ts,
rand(20.0..40.0, 1000) as temp
)
loadTable(databaseName, ""sensorData"").append!(data)
","result = truncate(""dfs://iotDB"", ""sensorData"")
"
1081,,,type,"在工业设备监控场景中，系统接收了三个传感器的实时数据流，需要验证数据类型是否符合规范。温度传感器数据应为整型，湿度传感器应为浮点型，光照传感器应为字符串型。给定已初始化的变量temp=42（整型），humi=68.3（浮点型），light=""850lux""（字符串型），如何生成包含三个变量数据类型代码的结果序列？","temp = 42
humi = 68.3
light = ""850lux""","result = array(INT,0).append!([type(temp), type(humi), type(light)])"
1082,,,unifiedCall,在分析两只股票的收益率联动性时，需要统计它们最近10个交易日的线性相关程度。输入数据是两个长度为10的数组vecA和vecB，分别存储股票A和股票B的日收益率数值。请编写代码计算结果并将数值存入result变量。,vecA = 1..10; vecB = 2..11;,"result = unifiedCall(corr, (vecA, vecB))"
1083,,,zTest,检验某新型降压药的疗效是否达到预期平均降低收缩压15mmHg。已知服用该药后的30名患者血压下降量服从标准差为3mmHg的正态分布。假设实际平均下降量等于预期，请使用置信水平0.99进行假设验证。输入数据存储在变量x中，输出结果保存到result。," x = norm(15.0, 3.0, 30) "," result = zTest(x, , 15.0, 3.0, , 0.99) "
1084,,,addAccessControl,"在物联网设备监控场景中，用户u4创建了共享表deviceStatus用于存储设备实时状态。该表包含两列:deviceID（SYMBOL类型）和status（INT类型）。管理员要求只有授权用户才能读写该表，未授权用户尝试查询或写入时应当返回权限错误。现需要为该表设置访问控制，当其他用户u5尝试执行查询操作时返回""No access to shared table [sharedDeviceStatus]""错误。请编写实现该安全控制的代码。","
login(`admin, ""123456"")
createUser(`u4, ""444444"")
createUser(`u5, ""555555"")

login(`u4, ""444444"")
deviceStatus = table(take(`D001`D002, 100) as deviceID, rand(0..2, 100) as status)
share deviceStatus as sharedDeviceStatus
","
addAccessControl(`sharedDeviceStatus)
result = select * from sharedDeviceStatus
"
1085,,,aggrTopN,在物联网监控系统中，每个传感器每小时会记录多组噪音分贝数据。需要计算每个传感器每小时前4个最高噪音值的总和。输入数据表包含传感器编号（device_id，STRING类型）、采集时间（collect_time，TIMESTAMP类型）、噪音值（decibel，INT类型）。输出结果按设备编号和小时分组，结果列名为result。,"t = table([""D01"",""D01"",""D01"",""D02"",""D02"",""D02"",""D02""] as device_id, [2023.08.01T09:25:03,2023.08.01T09:32:15,2023.08.01T09:48:22,2023.08.01T10:05:07,2023.08.01T10:15:19,2023.08.01T10:28:34,2023.08.01T10:35:41] as collect_time, [72,85,78,90,92,88,95] as decibel)","select aggrTopN(func=sum, funcArgs=decibel, sortingCol=decibel, top=4, ascending=false) as result from t group by device_id, datehour(collect_time) as hour"
1086,,,atImin,在物联网监控场景中，三个设备每半小时记录一次环境数据。温度数据存储在5行3列的tempMatrix矩阵（列代表设备，行代表时间点），对应的湿度数据存储在同样结构的humidityMatrix中。如何获取每个设备在温度最低时间点对应的湿度值，并将结果存入变量result？,"tempMatrix = matrix([8.2,4.1,1.5,5.4,6.0],[3.7,0.9,5.2,2.3,7.1],[6.5,2.8,3.1,1.2,4.0])
humidityMatrix = matrix([52,48,33,57,61],[65,29,74,82,38],[41,53,67,88,79])","result = atImin(tempMatrix, humidityMatrix)"
1087,,,attributeNames,"在物联网设备监控系统中，存在一个描述设备基本信息的类，其包含设备编号、运行状态、最后更新时间三个成员变量。已知已创建实例dev，其初始化参数为(""D001"", ""active"", 20240301)，请编写代码获取该对象所有属性字段的标识符，并将结果存储在result变量中。输入数据格式要求:类定义包含deviceId(STRING)、status(STRING)、timestamp(INT)三个属性，实例变量名为dev，输出结果为字符串向量。","class Device {
deviceId :: STRING
status :: STRING
timestamp :: INT

def Device(id, sts, ts) {
deviceId = id
status = sts
timestamp = ts
}
}

dev = Device(""D001"", ""active"", 20240301)",result = attributeNames(dev)
1088,,,bitAnd,某物联网平台需要筛选同时满足温度过高和湿度超标的传感器记录。现有两个布尔序列tempAlert和humidityAlert（1表示报警，0表示正常），长度均为5。请生成一个新的报警序列，仅当两个条件同时触发时返回1，其他情况返回0，结果存入result。,"tempAlert = [1,0,1,1,0]
humidityAlert = [0,1,1,1,0]",result = tempAlert & humidityAlert
1089,,,businessMonthBegin,某物联网平台记录了设备故障次数，需要按维护周期开始日期汇总统计故障次数。维护周期从2023年1月开始，每隔两个月更新起始月份，起始月份的首个工作日为周期开始日。输入数据表device_maintenance包含日期列date（DATE类型）和故障次数列faultCount（INT类型），输出结果表需包含周期开始日start_date及其对应故障次数总和total_faults，结果赋值到result。,"date = [2023.01.05, 2023.02.03, 2023.03.10, 2023.04.08, 2023.05.07, 2023.06.06]
faultCount = [2,1,3,2,4,1]
device_maintenance = table(date, faultCount)
","result = select sum(faultCount) as total_faults from device_maintenance group by businessMonthBegin(date, 2023.01.01, 2) as start_date
"
1090,,,businessMonthEnd,某证券系统需要按季度统计股票的最高价和平均成交量，其中季末指每三个月一次的月末最后一个工作日。给定2022年部分交易日数据表t，包含日期date(格式YYYY.MM.DD)、收盘价price、成交量volume三个字段。请对原始数据按月分组，组别划分规则为从2022.03.31基准日开始每隔3个月计算一次月末工作日，返回每个周期内的最高价格和平均成交量，结果存入变量result。,"date = 2022.04.05 2022.05.10 2022.07.28 2022.10.15 2023.01.10
price = 152.3 148.7 165.4 158.9 162.0
volume = 45000 32000 68000 54000 41000
t = table(date, price, volume)
","result = select max(price) as max_price, avg(volume) as avg_volume from t group by businessMonthEnd(date, 2022.03.31, 3)
"
1091,,,cdfKolmogorov,在验证某金融时间序列数据是否符合正态分布的过程中，通过Kolmogorov-Smirnov检验得到了三个统计量的观测值，分别为0.8、1.3和1.8，保存在向量ksStats中。现在需要计算这些统计量对应的累积概率值，并将结果存储在变量result中。请编写相应的代码实现。,"ksStats = [0.8, 1.3, 1.8]",result = cdfKolmogorov(ksStats)
1092,,,complex,"在物联网传感器数据采集中，存在两组二维数值表分别代表设备X轴和Y轴的振动幅度。已知X轴数据矩阵x_amps为[[3.5,4.1],[2.8,5.3]]，Y轴数据矩阵y_amps为[[1.2,0.9],[1.5,2.1]]，要求将每对X/Y数值转换为复数形式（X为实部，Y为虚部），最终生成复合振动特征矩阵结果到result。","x_amps = matrix([[3.5,4.1],[2.8,5.3]])\ny_amps = matrix([[1.2,0.9],[1.5,2.1]])","result = complex(x_amps, y_amps)"
1093,,,contextCount,"某工厂有两个温度传感器A和B同时监测设备温度，但由于传输问题部分数据丢失。传感器A记录为[36.5, 空值, 38.0, 空值, 37.2]（变量名sensorA），传感器B记录为[空值, 35.8, 38.0, 36.0, 37.2]（变量名sensorB）。需要统计两个传感器同时有效的数据点数量，结果保存到result变量。要求输入为两个数值型向量，输出为整型标量。","sensorA = [36.5, NULL, 38.0, NULL, 37.2]
sensorB = [NULL, 35.8, 38.0, 36.0, 37.2]","result = contextCount(sensorA, sensorB)"
1094,,,contextSum2,"在物联网设备监控中，需要计算两组传感器同时有效时的加速度平方和。已知X轴加速度数据accelX为[9.8, 15.2, NULL, 4.5]，Y轴状态标记statusY为[true, NULL, false, true]。仅在两组数据均有效的位置统计加速度值的平方，最终结果存入变量result，要求输出DOUBLE类型。","accelX = [9.8, 15.2, NULL, 4.5]
statusY = [true, NULL, false, true]","result = contextSum2(accelX, statusY)"
1095,,,cosh,"在物联网设备监测中，某传感器采集到一组振动加速度值存储在变量sensorData中，格式为浮点型向量[0.5, 1.0, 1.5]。需要对采集值进行信号特征变换，计算每个数值对应的双曲余弦函数结果，并将计算结果存储在变量result中。已知输入数据格式为float64向量，输出格式需与输入维度一致。","sensorData = [0.5, 1.0, 1.5]
","result = cosh(sensorData)
"
1096,,,createSessionWindowEngine,在物联网设备监控场景中，需要实时统计每个传感器的温度平均值。当某个传感器在10秒内没有新数据到达时，触发窗口计算并将该窗口的结束时间戳设为计算结果时间。若窗口结束后5秒仍未处理，则强制触发计算。输入流表含时间(time)、设备ID(device)、温度(temp)字段，输出结果为具有窗口结束时间、设备ID和平均温度的result表，请编写处理代码。,"share streamTable(1000:0, `time`device`temp, [TIMESTAMP, SYMBOL, DOUBLE]) as sensorData
share table(10000:0, `endTime`device`avgTemp, [TIMESTAMP, SYMBOL, DOUBLE]) as outputResult
","engine = createSessionWindowEngine(
name=""iot_engine"",
sessionGap=10,
metrics=<avg(temp)>,
dummyTable=sensorData,
outputTable=outputResult,
timeColumn=`time,
keyColumn=`device,
useSessionStartTime=false,
forceTriggerTime=5000
)
subscribeTable(tableName=""sensorData"", actionName=""sensor_handler"", offset=0, handler=append!{engine}, msgAsTable=true)

# 模拟数据插入(测试时需分多次执行观察触发效果)
insert into sensorData values(2023.06.01T09:30:00.000, `D001, 25.3)
insert into sensorData values(2023.06.01T09:30:04.000, `D001, 26.1)
insert into sensorData values(2023.06.01T09:30:15.000, `D001, 24.8)  # 触发第一个窗口
insert into sensorData values(2023.06.01T09:30:29.500, `D002, 30.0)  # 最后一条数据，5秒后强制触发

result = select * from outputResult
"
1097,,,cross,"在金融分析中，两个投资组合的日收益率分别存储在向量x和y中。x包含三个元素[0.02, -0.01, 0.03]，y包含三个元素[0.015, 0.005, -0.02]。需要生成一个3行3列的矩阵，每个元素表示两个对应收益率的绝对差值，最终结果存入变量result。","x = 0.02 -0.01 0.03
y = 0.015 0.005 -0.02
def absDiff(a, b){
return abs(a - b)
}","result = cross(absDiff, x, y)"
1098,,,cumcovarTopN,"在物联网设备监控中，每个时刻需要计算累积窗口内按信号质量升序排列的前3个数据点对应的两个传感器数值协方差。已知传感器数值A=[1.5,3.0,2.5,4.0,2.0]，传感器数值B=[2.0,3.5,1.8,4.2,2.5]，信号质量评分=[0.7,0.3,0.5,0.6,0.4]，输出结果存入变量result，要求输出为DOUBLE型数组。","A = [1.5, 3.0, 2.5, 4.0, 2.0]
B = [2.0, 3.5, 1.8, 4.2, 2.5]
S_signal = [0.7, 0.3, 0.5, 0.6, 0.4]
","result = cumcovarTopN(A, B, S_signal, 3, true)
"
1099,,,dropStreamEngine,"在实时设备温度分析场景中，存在一个名为""TempAnalyzer""的流处理引擎，其输入流表包含时间戳、设备编号和温度值（表结构:timestamp TIMESTAMP, deviceID SYMBOL, temp DOUBLE），输出表存储每个设备窗口期的温度极差值（表结构:endTime TIMESTAMP, deviceID SYMBOL, range DOUBLE）。当完成数据分析任务后，如何验证该处理引擎已被成功移除？请编写操作代码并将验证结果存入布尔型变量result。","share streamTable(1000:0, `timestamp`deviceID`temp, [TIMESTAMP, SYMBOL, DOUBLE]) as sensorData
outputTable = table(10000:0, `endTime`deviceID`range, [TIMESTAMP, SYMBOL, DOUBLE])
engine = createTimeSeriesAggregator(
name=""TempAnalyzer"",
windowSize=60,
step=60,
metrics=<[max(temp)-min(temp)]>,
dummyTable=sensorData,
outputTable=outputTable,
timeColumn=`timestamp,
keyColumn=`deviceID
)
subscribeTable(tableName=""sensorData"", actionName=""tempProcessing"", handler=append!{engine}, msgAsTable=true)","dropStreamEngine(""TempAnalyzer"")
result = ""TempAnalyzer"" !in getStreamEngineStat()[`TimeSeriesAggregator].name"
1100,,,dropTable,"在完成股票交易数据测试后，需要删除分布式数据库中名为'tempOrders'的临时分区表。该数据库路径为""dfs://tradeDB""，按id字段进行值分区。表结构包含id（整型）和price（浮点型）两列。请执行删除操作并将结果赋值给result。","db = database(""dfs://tradeDB"", VALUE, 1..10)
t = table(1..100 as id, rand(100.0, 100) as price)
pt = db.createPartitionedTable(t, ""tempOrders"", `id)
pt.append!(t)","result = dropTable(db, ""tempOrders"")"
1101,,,erase_,"某工厂设备传感器数据表记录了设备编号（device）、温度（temp）和状态（status）。需要清理2023.04.01前的异常数据，其中异常定义为温度超过100度或状态为""error""的记录。输入表名为sensor_log，包含3列:device（INT）、temp（DOUBLE）、time（DATE），请处理后保留有效数据并赋值到result。","sensor_log = table(
`DEV001`DEV002`DEV001`DEV003 as device,
[98.5, 102.3, 105.0, 97.8] as temp,
[2023.03.25, 2023.03.28, 2023.04.02, 2023.04.05] as time
)
","erase!(sensor_log, <time < 2023.04.01 and (temp > 100 || status == ""error"")>)
result = sensor_log
"
1102,,,existsDatabase,"在部署一个金融因子存储系统时，需要验证路径为""dfs://alphaFactors""的时序数据库是否已被正确创建。已知该库采用复合分区方式，包含月度时间分区和101个因子符号值分区。请编写检查代码并将结果存入result变量。","dbPath = ""dfs://alphaFactors""
if(existsDatabase(dbPath)) dropDatabase(dbPath)
dbDate = database("""", VALUE, 2010.01M + (0..10)*12)
dbSymbol = database("""", VALUE, `WQAlpha + string(1..101))
database(dbPath, COMPO, [dbDate, dbSymbol], engine=""TSDB"")",result = existsDatabase(dbPath)
1103,,,fminSLSQP,"在资源分配优化问题中，需要最小化目标函数f(x)=3x₁² + 2x₂² + x₁x₂。初始参数为[1.0, 0.5]。约束条件包括:等式约束x₁ + 2x₂ = 2，不等式约束x₁² +x₂ ≤3且x₂ ≥0.5。变量x₁的范围为[0.5,2.0]，x₂的范围为[0.0,1.5]。请编写代码求满足条件的最优参数，并将结果字典存入变量result。","def objective(x) {
return 3*pow(x[0],2) + 2*pow(x[1],2) + x[0]*x[1]
}

def obj_grad(x) {
return [6*x[0] + x[1], 4*x[1] + x[0]]
}

def eq_con(x) {
return x[0] + 2*x[1] - 2
}

def eq_jac(x) {
return [1.0, 2.0]
}

def ieq_con(x) {
return [3 - pow(x[0],2) - x[1], x[1] - 0.5]
}

def ieq_jac(x) {
ret = matrix(DOUBLE, 2, 2)
ret[0,0] = -2*x[0]
ret[0,1] = -1.0
ret[1,0] = 0.0
ret[1,1] = 1.0
return ret
}

eqCons = dict(STRING, ANY)
eqCons[`type] = `eq
eqCons[`fun] = eq_con
eqCons[`jac] = eq_jac

ineqCons = dict(STRING, ANY)
ineqCons[`type] = `ineq
ineqCons[`fun] = ieq_con
ineqCons[`jac] = ieq_jac

constraints = [eqCons, ineqCons]

X0 = [1.0, 0.5]
bounds = matrix([0.5 2.0, 0.0 1.5])
","res = fminSLSQP(objective, X0, obj_grad, constraints, bounds, 1e-8)
result = res
"
1104,,,fromStdJson,"某物联网设备上报了一条包含设备信息、状态及多类型传感器数据的JSON字符串。需要将其转换为结构化的DolphinDB数据对象，要求保留嵌套键值对、自动解析时间字段、正确处理转义的中文字符。已知输入数据存放在变量jsonStr中，格式为'{""id"":""DEV-007"",""ts"":""2023.08.15 09:15:30"",""status"":false,""params"":{""temp"":38.6,""loc"":""\u5341\u516b\u697c""},""log"":[120, null, ""\u6545\u969c\u8bb0\u5f55""]}'，输出结果应存储在result变量中。","jsonStr = '{""id"":""DEV-007"",""ts"":""2023.08.15 09:15:30"",""status"":false,""params"":{""temp"":38.6,""loc"":""\u5341\u516b\u697c""},""log"":[120, null, ""\u6545\u969c\u8bb0\u5f55""]}'",result = fromStdJson(jsonStr)
1105,,,ge,"在电商推荐系统中，用户设置的偏好标签集合userTags为[""续航强"", ""防水"", ""轻薄""]，系统支持的标签集合systemTags包含[""防水"", ""5G"", ""续航强"", ""大容量""]。请验证用户的所有偏好标签是否都能在系统支持中找到，将验证结果（1表示全部包含，0表示有不包含的）保存到result。","systemTags = set([""防水"", ""5G"", ""续航强"", ""大容量""])
userTags = set([""续航强"", ""防水"", ""轻薄""])
","result = systemTags >= userTags
"
1106,,,getDBAccess,"在金融交易系统中，管理员需要验证分布式数据库""dfs://tradeDB""的权限配置情况。已知用户financeAdmin拥有该库管理权限，并为用户auditUser授予了读取和更新权限，禁止了组groupAudit的删除权限，同时允许组riskGroup创建对象。请生成一个权限汇总表，包含所有关联用户和组的权限状态（包括允许、拒绝和无），结果存入result。","
login(`admin, ""123456"")
createUser(""financeAdmin"", ""adminPass"", ""DB_OWNER"")
createUser(""auditUser"", ""auditPass"")
createGroup(""groupAudit"")
createGroup(""riskGroup"")
grantAccess(""financeAdmin"", ""dfs://tradeDB"", ""DB_OWNER"")
grantDB(""auditUser"", ""dfs://tradeDB"", [""DB_READ"",""DB_UPDATE""])
denyDB(""groupAudit"", ""dfs://tradeDB"", ""DB_DELETE"")
grantDB(""riskGroup"", ""dfs://tradeDB"", ""DBOBJ_CREATE"")
","
login(`financeAdmin, ""adminPass"")
result = getDBAccess(""dfs://tradeDB"")
"
1107,,,getMasterReplicationStatus,某证券公司的系统管理员需要监测主集群最近的异步备份任务执行情况，重点关注未完成的任务。要求获取最早提交的4个未完成任务的状态信息，并包含最近完成的3条记录。输入数据无需预处理，输出结果需包含任务ID、事务类型、提交时间和完成标记，存储在变量result中。,,result = getMasterReplicationStatus(7)
1108,,,getOLAPCacheEngineStat,某金融实时交易系统需要检查当前节点的缓存状态，获取所有已完成和未完成事务的区块信息，包括物理表名、最后写入时间差、缓存记录数及内存占用。请编写代码将结果存储在变量result中，输出需包含全部相关字段。,"
login(""admin"", ""123456"")
if(existsDatabase(""dfs://tradeDB"")){
dropDatabase(""dfs://tradeDB"")
}
db = database(""dfs://tradeDB"", VALUE, 2023.01.01..2023.01.03)
t = table(take(now(), 500) as ts, rand(100.0, 500) as price)
pt = db.createPartitionedTable(t, ""order_book"", ""ts"")
pt.append!(t)
syncOLAPCache()  // 触发OLAP缓存更新
","
result = getOLAPCacheEngineStat().select([""physicalName"", ""timeSinceLastWrite"", ""cachedRowsOfCompletedTxn"", ""cachedRowsOfUncompletedTxn"", ""cachedMemOfCompletedTxn"", ""cachedMemOfUncompletedTxn""])
"
1109,,,getRedoLogGCStat,在实时监控数据库事务状态的场景中，某金融系统需要查看所有物理表的事务回收进展。已知系统中有若干包含未完成事务的分布式表，请编写代码获取以下信息:包含物理表路径、未回收事务总量、待刷盘事务最小ID的状态报表，并将结果保存到变量result。输入数据为内存模拟的证券交易日志表，输出结果格式为包含physicalName/txnCount/minTidPendingFlush等字段的表。,"
login(""admin"",""123456"")
dbName = ""dfs://tradeDB""
if(existsDatabase(dbName)){dropDatabase(dbName)}
createDatabase(dbName, VALUE, 2023.01.01..2023.01.03)
createPartitionedTable(table(1:0,`time`sym`price,[TIMESTAMP,SYMBOL,DOUBLE]),`pt_log,`time)

t1 = table(2023.01.01T09:30:00.000 + 1..1000 as time, take(`AAPL,1000) as sym, rand(100.0,1000) as price)
t2 = table(2023.01.02T09:30:00.000 + 1..800 as time, take(`MSFT,800) as sym, rand(200.0,800) as price)

loadTable(dbName,`pt_log).append!(t1)
loadTable(dbName,`pt_log).append!(t2)
","
result = getRedoLogGCStat()
"
1110,,,getSlaveReplicationQueueStatus,在监控金融交易数据同步任务时，管理员需要排查所有已停止执行但仍有未完成任务的异常队列，并提取对应的执行集编号和队列编号。输入数据为从集群内置的队列状态信息，无需额外准备。输出结果为包含executionSet和queueId两列的表，并赋值给变量result。,,"result = getSlaveReplicationQueueStatus().select([""executionSet"",""queueId""]).filter(""status='STOPPED' && unfinishedTasks>0"")"
1111,,,getStreamTableFilterColumn,在物联网系统中，有一个共享的流数据表sensorData，结构包含timestamp（TIMESTAMP类型）、deviceID（SYMBOL类型）、temperature（DOUBLE类型）。已知该流表在订阅过滤时配置了基于某个字段的快速过滤机制，需要查询当前设置的过滤依据字段名称，并将结果存储在变量result中。,"share streamTable(10000:0, `timestamp`deviceID`temperature, [TIMESTAMP,SYMBOL,DOUBLE]) as sensorData
setStreamTableFilterColumn(sensorData, `deviceID)
","result = getStreamTableFilterColumn(sensorData)
"
1112,,,int128,"现有三个交易记录的MD5哈希字符串，格式为[""d41d8cd98f00b204e9800998ecf8427e"", ""0cc175b9c0f1b6a831c399e269772661"", ""92eb5ffee6ae2fec3ad71c777531578f""]，存储在变量hash_list中。需要将这些字符串转换为固定长度的128位数值类型进行存储，最终结果应存储在result变量中，输出类型要求为INT128向量。","hash_list = [""d41d8cd98f00b204e9800998ecf8427e"", ""0cc175b9c0f1b6a831c399e269772661"", ""92eb5ffee6ae2fec3ad71c777531578f""]",result = int128(hash_list)
1113,,,isChunkNodeInit,"在物联网设备数据存储场景中，需要确认名为""sensor_node""的数据存储节点是否完成初始化准备。给定节点名称存储在字符串变量nodeName中，编写代码检查该节点状态，将布尔型结果存入result变量。","nodeName = ""sensor_node""",result = isChunkNodeInit(nodeName)
1114,,,isDataNodeInitialized,在某个物联网系统中，数据采集服务器需要确保当前的数据处理节点已成功启动后再分发传感器数据。请编写代码实时检查该节点的启动状态，若已初始化完毕则返回布尔值确认状态。输入数据无需额外准备，输出结果存储在变量result中，格式为布尔值。,,result = isDataNodeInitialized()
1115,,,isort_,物联网场景中有三个温度传感器的记录数据，时间戳依次为2023.01.03、2023.01.01、2023.01.02（类型为datetime），对应温度值分别为36.5、35.8、36.1存放在time和temps变量中。请根据采集时间重新排列温度值，保持时间从早到晚的顺序对应温度值，并将最终排列结果存入result变量。,"time = [2023.01.03T00:00:00, 2023.01.01T00:00:00, 2023.01.02T00:00:00]
temps = [36.5, 35.8, 36.1]","isort!(time, true, temps)
result = temps"
1116,,,isYearEnd,在金融结算系统中，需要确定一组日期是否为对应年份的最后一个自然日。给定一个DATE类型的向量tradeDates，包含2023.12.30、2024.12.31和2025.06.30三个日期元素，要求生成布尔值数组标识各日期状态，结果存入result变量。,"tradeDates = [2023.12.30, 2024.12.31, 2025.06.30]",result = isYearEnd(tradeDates)
1117,,,ksTest,在量化策略回测中，需要检验两组不同参数生成的收益率序列是否具有相同的分布。已知groupA是100个来自均值0.1、标准差0.2的正态分布的日收益率，groupB是80个来自均值0.15、标准差0.25的正态分布的日收益率。请编写代码执行相应的统计检验，并将结果存储在result中。,"groupA = norm(0.1, 0.2, 100)
groupB = norm(0.15, 0.25, 80)","result = ksTest(groupA, groupB)"
1118,,,md5,"某金融系统需要安全存储用户登录凭证的散列值。现有两个用户名`[""admin"", ""guest""]`存放在变量userNames中，对应的密码`[""secure@2023"", ""temp#789""]`存放在passwords中。要求将每个用户的用户名和密码用冒号连接后，生成128位整型的唯一标识符。已知凭证组合后的字符串向量名为credentials，最终结果需存储在result变量中。","userNames = [""admin"", ""guest""]
passwords = [""secure@2023"", ""temp#789""]
credentials = userNames + "":"" + passwords",result = md5(credentials)
1119,,,millisecond,"某物联网平台采集了三个设备的事件时间戳，格式为NANOTIMESTAMP，变量名为deviceTime。需要从每个时间戳中提取对应的毫秒部分，并将结果存储在变量result中。输入数据例如:[""2023.08.15 14:30:15.500123456"", ""2023.08.15 14:32:45.750456789"", ""2023.08.15 14:35:30.000789123""]，输出应为整型向量。","deviceTime = [nanotimestamp(""2023.08.15 14:30:15.500123456""), nanotimestamp(""2023.08.15 14:32:45.750456789""), nanotimestamp(""2023.08.15 14:35:30.000789123"")]
","result = millisecond(deviceTime)
"
1120,,,mstdpTopN,"某物联网平台监测三个设备的温度数据，每5分钟记录一次。假设当前有连续7个时间点的温度矩阵X和时间戳矩阵S。需在每个长度为5的滚动窗口内，根据时间戳降序选取最新的两个温度值，计算它们的总体标准差。其中X=[[5.2,6.8,7.1],[5.8,6.2,6.5],[5.5,6.6,7.3],[5.9,6.4,7.0],[5.7,6.3,6.9],[5.4,6.1,6.8],[5.6,6.5,7.2]]，S为各记录点的UTC时间戳矩阵[[2023-04-01T08:00,2023-04-01T08:00,2023-04-01T08:00],[2023-04-01T08:05,2023-04-01T08:05,2023-04-01T08:05],[2023-04-01T08:10,2023-04-01T08:10,2023-04-01T08:10],[2023-04-01T08:15,2023-04-01T08:15,2023-04-01T08:15],[2023-04-01T08:20,2023-04-01T08:20,2023-04-01T08:20],[2023-04-01T08:25,2023-04-01T08:25,2023-04-01T08:25],[2023-04-01T08:30,2023-04-01T08:30,2023-04-01T08:30]]，输出结果应存储在result变量中。","X = matrix(
[5.2,6.8,7.1,5.8,6.2,6.5,5.5,6.6,7.3,5.9,6.4,7.0,5.7,6.3,6.9,5.4,6.1,6.8,5.6,6.5,7.2],
[7,3]
)
S = matrix(
[
2023.04.01T08:00:00.000,2023.04.01T08:00:00.000,2023.04.01T08:00:00.000,
2023.04.01T08:05:00.000,2023.04.01T08:05:00.000,2023.04.01T08:05:00.000,
2023.04.01T08:10:00.000,2023.04.01T08:10:00.000,2023.04.01T08:10:00.000,
2023.04.01T08:15:00.000,2023.04.01T08:15:00.000,2023.04.01T08:15:00.000,
2023.04.01T08:20:00.000,2023.04.01T08:20:00.000,2023.04.01T08:20:00.000,
2023.04.01T08:25:00.000,2023.04.01T08:25:00.000,2023.04.01T08:25:00.000,
2023.04.01T08:30:00.000,2023.04.01T08:30:00.000,2023.04.01T08:30:00.000
],
[7,3]
)
","result = mstdpTopN(X, S, 5, 2, ascending=false)
"
1121,,,mvarpTopN,"在物联网传感器分析中，某设备有两组观测值X和对应的时间戳S存储在矩阵中。需要计算每个传感器最近3个时间点中，按照时间升序排列后的前两个有效观测值的总体方差，空值不参与计算。输入X为2列矩阵:第1列[5.0,3.0,4.0,2.0,6.0]，第2列[8.0,1.0,9.0,7.0,5.0]；S为2列矩阵:第1列[2023.01.01,2023.01.02,2023.01.01,2023.01.04,NULL]，第2列[2023.01.03,NULL,2023.01.02,2023.01.02,2023.01.05]。输出结果保存到result变量。","X = matrix([5.0,3.0,4.0,2.0,6.0], [8.0,1.0,9.0,7.0,5.0])
S = matrix([2023.01.01,2023.01.02,2023.01.01,2023.01.04,NULL], [2023.01.03,NULL,2023.01.02,2023.01.02,2023.01.05])
","result = mvarpTopN(X, S, 3, 2, ascending=true)
"
1122,,,mwsumTopN,"在物联网设备监控场景中，某系统记录了三个传感器每隔2秒的测量值（矩阵x）、校准系数（矩阵y）和环境评分（矩阵s）。要求计算每个采样时刻向前5个时间单位的窗口内，按环境评分倒序选取前2个有效样本，求对应测量值与校准系数的乘积之和。已知输入数据格式为6行3列的矩阵变量x,y,s，输出结果存储在result变量中。","x = matrix([7.2,3.5,4.1],[1.8,6.3,2.4],[5.6,2.9,9.0],[9.1,4.4,8.3],[3.7,0.5,7.6],[2.3,5.8,1.2])
y = matrix([2,1,3],[5,4,2],[3,6,1],[4,2,5],[1,3,4],[6,7,2])
s = matrix([28,35,41],[19,22,43],[33,29,38],[40,31,37],[25,27,39],[36,34,30])","result = mwsumTopN(x, y, s, 5, 2, false)"
1123,,,nanInfFill,"在物联网传感器监测系统中，有两个设备采集到存在无效数值（无穷大和无法表示的数值）的浮点数据。请将字典结构存储的传感器数据中所有非法数值替换为0.0。字典键为设备名称`sensorA`和`sensorB`，对应值为存在float('inf'),float('nan'),float('-inf')的浮点数组，替换结果存储在result变量。","sensor_readings = {'sensorA': [1.5, float('inf'), 3.0], 'sensorB': [float('nan'), 2.8, float('-inf')]}
","result = nanInfFill(sensor_readings, 0.0)
"
1124,,,ns,"某金融机构需要基于不完整的国债收益率数据拟合动态曲线。输入的期限列表为5年、10年、15年、20年、25年，对应收益率存在三个空缺值。要求使用二次收敛优化算法并设置初始参数β0=0.03，β1=-0.02，β2=0.015，λ初始为1.5。输入数据变量名为maturity,yield，输出结果需要存储在result变量中。","maturity = [5,10,15,20,25]
yield = [0.0173,NULL,0.0255,NULL,0.0337]
","result = ns(maturity, yield, method='bfgs', initialGuess=[0.03,-0.02,0.015,1.5])
"
1125,,,nullFill_,某传感器网络采集的温度数据存在缺失值，处理要求先将缺失值向前填充，若仍有缺失则替换为默认值20.5。输入表t包含时间戳（TIMESTAMP）、设备编号（SYMBOL）、温度（DOUBLE）三列，具体数据见准备代码。输出结果为处理后的完整数据表result。,"t = table([2023.01.01T08:00:00, 2023.01.01T08:01:00, 2023.01.01T08:02:00, 2023.01.01T08:03:00] as ts, `D001`D001`D001`D001 as device, [NULL, 22.3, NULL, NULL] as temp)
","t.temp.ffill!()
t.nullFill!(20.5)
result = t
"
1126,,,purgeCacheEngine,在写入新的交易数据到分布式分区表后，为确保查询时获取最新结果，需清除OLAP引擎的缓存。输入数据表'trades'包含timestamp（时间戳）、symbol（股票代码）、price（价格）三个字段，按日期进行值分区。请编写代码完成操作，并将结果赋值给变量result。,"login(""admin"", ""123456"")
if(existsDatabase(""dfs://testDB"")){
dropDatabase(""dfs://testDB"")
}
db = database(""dfs://testDB"", VALUE, 2023.01.01..2023.01.03)
schemaTable = table(
template: table(2023.01.01T00:00:00 as timestamp, `AAPL as symbol, 150.0 as price),
schema: [
`timestamp`symbol`price,
[TIMESTAMP,SYMBOL,DOUBLE]
]
)
trades = db.createPartitionedTable(schemaTable, ""trades"", ""timestamp"")
trades.append!(table(2023.01.01T09:30:00..2023.01.01T09:30:10 as timestamp, take(`AAPL,11) as symbol, rand(150.0..200.0,11) as price))",result = purgeCacheEngine()
1127,,,readLines,"在实时监控系统中，日志文件""sensor_log.txt""记录了1000条传感器读数（每行包含时间戳、设备ID和数值）。需要快速读取前300行数据进行分析，并将结果存储在变量result中。输入文件每行格式为:2023.01.01T00:00:00,D001,25.8。如何实现这个分段读取需求？","
sensorData = array(STRING, 0)
for(i in 1..1000){
ts = temporalFormat(2023.01.01T00:00:00 + i*1000, ""yyyy.MM.ddTHH:mm:ss"")
device = ""D"" + lpad(string(i%50), 3, ""0"")
value = rand(20.0..30.0, 1)[0].round(1)
sensorData.append!(ts + "","" + device + "","" + string(value))
}
file(""sensor_log.txt"", ""w"").writeLines(sensorData)
fin = file(""sensor_log.txt"")
","
result = fin.readLines(300)
"
1128,,,replay,某量化团队需要回测高频交易策略，要求将订单表和交易表的历史数据按时间顺序加速100倍回放至流表中，再通过流过滤引擎分发处理。订单表orders包含字段sym（SYMBOL）、myTime（DATETIME）、vol（INT[]），交易表trades包含字段sym（SYMBOL）、time（DATETIME）、price（DOUBLE[]）。请创建包含异构回放时间列的流数据输出表opt，将两表回放至opt后，统计处理后的订单记录总数。,"n = 500
dbName = ""dfs://replay_test""
if existsDatabase(dbName):
dropDatabase(dbName)

# 创建订单表结构并写入数据
orders = table(take(`IBM,n) as sym, 2023.01.01T09:30:00 + 1..n*1000 as myTime, array(INT[], 0, n).append!(rand(100, n).reshape(n:1)) as vol)
orders.sortBy!(`myTime)
db = database(dbName, VALUE, 2023.01.01..2023.01.03)
orders_db = db.createPartitionedTable(orders, ""orders"", `myTime).append!(orders)

# 创建交易表结构并写入数据
trades = table(take(`MSFT,n) as sym, 2023.01.01T09:30:00 + 1..n*1000 as time, array(DOUBLE[], 0, n).append!(rand(10.0, n).reshape(n:1)) as price)
trades.sortBy!(`time)
trades_db = db.createPartitionedTable(trades, ""trades"", `time).append!(trades)

# 创建异构回放输出表
share streamTable(10000:0, `timestamp`sym`blob`vol`price, [DATETIME,SYMBOL,BLOB,INT[],DOUBLE[]]) as opt

# 创建流过滤结果表
share streamTable(10000:0, `sym`time`vol, [SYMBOL,DATETIME,INT[]]) as filterResult

# 定义流过滤引擎
def filterHandler(mutable t, msg):
t.append!(select sym, timestamp as time, vol from msg where isValid(vol))

filterEngine = createStreamFilter(name=""orderFilter"", dummyTable=opt, filter=filterHandler, outputTable=filterResult, keyColumn=`sym)
subscribeTable(tableName=""opt"", actionName=""filterSub"", offset=0, handler=filterEngine, msgAsTable=True)
","# 生成数据源
ds_orders = replayDS(sqlObj=<select * from loadTable(""{db}"", ""orders"")>, dateColumn=`myTime)
ds_trades = replayDS(sqlObj=<select * from loadTable(""{db}"", ""trades"")>, dateColumn=`time)

# 配置异构回放参数
input_dict = dict([""ORDERS"", ""TRADES""], [ds_orders, ds_trades])
time_dict = dict([""ORDERS"", ""TRADES""], [`myTime, `time])

# 执行加速回放
replay(inputTables=input_dict, outputTables=opt, timeColumn=time_dict, replayRate=100, absoluteRate=false)

# 等待回放完成后查询结果
result = exec count(*) from filterResult
"
1129,,,reshape,"在金融分析中，某公司季度销售额数据以3行4列的矩阵存储，需要转换为4行3列的布局以匹配报表格式。已知输入矩阵origMatrix结构如下，请生成相应代码，输出变量名为result。  
输入数据格式:矩阵origMatrix（3行4列，元素为1到12的整数）  
输出数据格式:矩阵result（4行3列）","origMatrix = matrix(1..12, 3:4)",result = origMatrix.reshape(4:3)
1130,,,ridgeCV,"某物联网公司采集了设备传感器的时间戳、电压、转速和温度数据，存储在表sensorData中（包含列:ts datetime, volt float, rpm float, temp float）。现需根据电压和转速构建带L2正则化的线性模型来预测温度，通过交叉验证选择最优正则化参数，最终输出模型的系数、截距等信息的字典。请编写实现代码，要求输入表变量名为sensorData，结果存入result。","ts = 2023.01.01T00:00:00 + 0..9
volt = 220 + 10 * rand(10.0, 10)
rpm = 1500 + 200 * rand(10.0, 10)
temp = 30 + 0.5 * volt + 0.8 * rpm + 5 * rand(10.0, 10)
sensorData = table(ts, volt, rpm, temp)
","result = ridgeCV(sensorData, ""temp"", [""volt"", ""rpm""], alphas=[0.1, 1.0, 10.0], intercept=true, normalize=true, solver='svd')
"
1131,,,rollingPanel,在金融分析中，需要针对两支股票（X和Y）的四天收盘价数据，按股票分组进行滚动窗口分析。每个窗口包含连续两天的记录，每次滑动一天。请生成包含每个窗口数据的表格，并添加窗口编号列。输入数据表t包含group（股票代码）和value（价格）列，输出结果为变量result。,"t = table(`X`X`X`X`Y`Y`Y`Y as group, 10 15 12 18 22 20 25 30 as value)
","result = rollingPanel(t, 2, `group)
"
1132,,,rowDot,某物联网平台需要计算两个监测站点每小时各传感器的综合匹配度。站点A的传感器数据矩阵m1按日期索引，列为温度、湿度和PM2.5值，包含2023.01.01到2023.01.03的数据；站点B的传感器数据矩阵m2索引日期为2023.01.02到2023.01.04，列为相同指标。要求返回按日期对齐的各小时传感器数据乘积之和，结果存入result变量。,"m1 = matrix([36.5,45.2,78], [28.9,55.1,62], [40.0,38.7,91]).rename!(2023.01.01..2023.01.03, `温度`湿度`PM2_5).setIndexedMatrix!()
m2 = matrix([38.1,42.8,65], [29.5,58.3,70], [39.8,35.2,88]).rename!(2023.01.02..2023.01.04, `温度`湿度`PM2_5).setIndexedMatrix!()","result = rowDot(m1, m2)"
1133,,,rowOr,物联网场景中，设备状态表记录了各传感器是否触发报警（高温、低电压、通信中断）。现有表device_status包含三列布尔类型数据:temp_alarm、voltage_alarm、signal_alarm，要求筛选出存在任一报警状态的设备记录。输入表结构:device_status表含5行记录，三列类型均为boolean，输出结果为符合条件记录的过滤表，存储到变量result。,"device_status = table(
[true,false,true,false,false] as temp_alarm,
[false,true,false,true,false] as voltage_alarm,
[false,false,true,false,true] as signal_alarm
)
","result = device_status[rowOr(temp_alarm, voltage_alarm, signal_alarm)]
"
1134,,,rowXor,"在股票分析中，表 dailyStats 包含两列布尔值 priceRise（当日价格上涨）和 volumeSurge（成交量激增）。请筛选出每日价格和成交量变动中有且仅有一个条件成立的行，生成一个布尔向量 result 表示每行是否满足该条件。输入表结构:priceRise(BOOL), volumeSurge(BOOL)；输出结果存入变量 result。","dailyStats = table(
[true, false, true, false, true] as priceRise,
[false, true, true, false, false] as volumeSurge
)","result = rowXor(dailyStats.priceRise, dailyStats.volumeSurge)"
1135,,,seek,"在物联网设备日志处理中，设备连续记录了温度告警信息。已经打开日志文件读取了最近一次告警记录，现需要重置文件指针到初始位置再次校验第一条告警数据。已知文件""alert.log""包含两行数据格式为[时间戳,告警类型]，文件句柄变量名为logFile，请编写验证代码并将读取结果存入result。","logFile = file(""alert.log"", ""w"")
logFile.writeLine(""2023-03-15T14:22:35,OVERHEAT"")
logFile.writeLine(""2023-03-15T14:25:47,LOW_VOLTAGE"")
logFile.close()","logFile = file(""alert.log"")
logFile.readLine()
logFile.seek(0, mode=`HEAD)
result = logFile.readLine()"
1136,,,sessionWindow,某物联网平台采集了多个设备的温度数据，包含设备ID、时间戳和温度值。当设备连续上报的时间间隔超过5秒时，视为新的会话窗口。请为每个设备划分会话窗口，并计算每个窗口内的平均温度。输入数据表结构为:设备ID（device）、时间戳（ts，毫秒级）、温度（temp）。输出结果需包含窗口起始时间（窗口编号）、设备ID和平均温度，赋值给变量result。,"device = [`D001, `D001, `D001, `D001, `D002, `D002, `D002, `D002]
ts = [2023.01.01T08:00:00.000, 2023.01.01T08:00:03.000, 2023.01.01T08:00:07.000, 2023.01.01T08:00:13.000, 2023.01.01T08:00:00.000, 2023.01.01T08:00:04.000, 2023.01.01T08:00:06.000, 2023.01.01T08:00:11.000]
temp = [25.3, 26.1, 27.5, 24.8, 22.0, 23.5, 21.8, 24.2]
t = table(device, ts, temp)
","result = select avg(temp) as avg_temp by contextby(sessionWindow{, 5000}, ts, device) as window_start, device
"
1137,,,setLogLevel,在物联网设备监控系统中，管理员需要临时将节点日志记录的详细程度调整为仅保留严重错误信息，以减少存储压力。请实现这一配置调整并将操作结果存入变量。输入无额外数据，输出需为配置操作结果。,,"result = setLogLevel(""ERROR"")
"
1138,,,shuffle_,"在物联网设备测试中，需要将三个传感器的实时采集数据顺序随机打乱进行压力测试。给定包含设备ID和温度读数的内存表deviceReadings（结构:[id INT, temp DOUBLE]），请对表记录进行原地随机重排，处理后结果仍存储在原始变量中。","deviceReadings = table(1 2 3 as id, 36.5 37.1 38.2 as temp)
","shuffle!(deviceReadings)
result = deviceReadings
"
1139,,,subtuple,"某物联网系统记录了三个传感器连续5天的监测数据，每个传感器的数据存储为数值型向量，组成元组sensorData。现需快速提取第3和第4天（索引范围为左闭右开的区间2:4）的监测数据生成只读子集。输入数据格式为元组sensorData=([10,20,30,40,50],[15,25,35,45,55],[100,200,300,400,500])，输出结果存入变量result，格式应为包含三个子向量的元组。","|
sensorData = (10 20 30 40 50, 15 25 35 45 55, 100 200 300 400 500)","|
result = subtuple(sensorData, 2:4)"
1140,,,sum3,"在分析三只传感器（sensorX、sensorY、sensorZ）的温度读数稳定性时，给定包含三列的表t，每列记录设备三次采样的温度值（含缺失情况）。要求计算每个传感器有效测量值的立方总和，结果存入变量result中。输入表结构:t=table([23.1,15.6,NULL] as sensorX, [NULL,18.9,20.4] as sensorY, [19.3,NULL,17.0] as sensorZ)","t = table(
[23.1, 15.6, NULL] as sensorX,
[NULL, 18.9, 20.4] as sensorY,
[19.3, NULL, 17.0] as sensorZ
)",result = sum3(t)
1141,,,ungroup,某物联网平台记录了多个传感器每小时采集的温度数据，其中每个传感器在每个整点时刻会将多个温度读数打包成数组存储。现有输入表sensor_data结构如下:sensor_id（SYMBOL类型）、hour（TIME类型）、temperature_readings（数组类型DOUBLE）。请将数组列展开为单独行，并保留关联的传感器ID和时间信息，返回结果存储在变量result中。,"sensor_id = take(['s1','s2','s3'], 3)
hour = 10:00:00.000 + 0..2 * 3600000
temperature_readings = [[24.5,24.8,25.1], [23.9,24.2], [22.7,23.0,23.3]]
sensor_data = table(sensor_id, hour, temperature_readings)
","result = ungroup(sensor_data)
"
1142,,,varma,在物联网场景中，某设备传感器采集了温度、湿度、压力三个变量的1000条时序数据，存储在名为sensor_data的表中，包含ts（时间戳）、temp、humidity、pressure列。另有设备每日工作时长数据存储在20列的exog矩阵中。现需要构建多元时序模型，其中自回归部分阶数为2，移动平均部分阶数为1，考虑线性趋势因素，采用对角线型误差协方差结构，并将计算结果存入result变量。,"ts = 2023.01.01 + 0..999
temp = rand(10.0, 1000)
humidity = rand(50.0, 1000)
pressure = rand(100.0, 1000)
sensor_data = table(ts, temp, humidity, pressure)
exog = matrix(rand(8.0, 1000*20), 1000, 20)
","result = varma(sensor_data, [""temp"",""humidity"",""pressure""], [2,1], exog=exog, trend=""ct"", errorCovType=""diagonal"")
"
1143,,,volumeBar,某工厂的传感器每半小时采集一次机器的能耗数据。需要将每台机器的能耗记录按累计达到总能耗25%的阈值进行分组（分组标记用区间右端点值），并统计各组内的最早采集时间。给定输入表含列ts(时间戳)、device(设备ID)、power(整型耗电量)。编写DolphinDB查询，返回结果包含device、group_no和各组min_ts字段。,"ts = 2023.01.01T09:00:00 + 0..5*30*60
device = take(`D001`D002, 6)
power = [8,4,12,6,10,2]
t = table(ts, device, power)
","result = select min(ts) as min_ts from t group by device, contextby(volumeBar{, 0.25, 'right'}, power, device) as group_no
"
1144,,,warmupStreamEngine,"在物联网实时监控中，系统需要计算每个设备的温度指数（基于过去10个时间点的指数移动平均）。现有历史数据表historicalData包含字段[timestamp, deviceID, temperature]，需预热流引擎以加速后续实时数据realTimeData（结构相同）的处理。请生成预热操作并处理实时数据，将结果存入result。","historicalData = table(2023.01.01T00:00:00 + 1..3000 as timestamp, take(""D""+string(1..100), 3000) as deviceID, rand(20.0..40.0, 3000) as temperature)
realTimeData = table(2023.01.01T00:05:00 + 1..100 as timestamp, take(""D""+string(1..100), 100) as deviceID, rand(20.0..40.0, 100) as temperature)","outputTable = table(100:0, `deviceID`emaTemp, [STRING,DOUBLE])
engine = createReactiveStateEngine(
name=""iotEngine"",
metrics=<ema(temperature, 10)>,
dummyTable=historicalData,
outputTable=outputTable,
keyColumn=""deviceID""
)
warmupStreamEngine(engine, historicalData)
engine.append!(realTimeData)
result = outputTable"
1145,,,weekOfYear,在物联网设备日志分析中，需要统计每个事件发生的周编号。给定TIMESTAMP类型的时间戳数据ts，包含四个记录:2023-05-15 08:30:00（周一）、2023-12-31 23:59:59（周日）、2024-01-01 00:00:01（周一）、2024-01-07 10:20:30（周日）。要求输出结果为整型向量，变量名为result。,"ts = [2023.05.15T08:30:00, 2023.12.31T23:59:59, 2024.01.01T00:00:01, 2024.01.07T10:20:30]
","result = weekOfYear(ts)
"
1146,,,yearBegin,某物联网平台需要按每三年一次的周期，以四月作为年度起始月份，统计各设备传感器采集的温度均值及湿度最大值。输入表包含时间戳（ts，类型为NANOTIMESTAMP）、设备ID（device）、温度（temp）和湿度（humidity），表变量名为sensorData。请生成以2020.04.01为基准周期起点，按自定义年度分组的统计结果，要求最终结果赋值给result。,"ts = [2020.05.15T08:30:00.000000000, 2021.06.20T12:45:00.000000000,
2023.04.01T00:00:00.000000000, 2026.03.15T18:20:00.000000000,
2026.04.05T09:10:00.000000000, 2029.07.22T14:00:00.000000000]
device = take(`D001,6)
temp = [25.3, 26.8, 27.1, 22.4, 24.9, 28.5]
humidity = [48,52,55,60,58,62]
sensorData = table(ts, device, temp, humidity)
","result = select avg(temp) as avg_temp, max(humidity) as max_humidity from sensorData group by yearBegin(ts, 4, 2020.04.01, 3)
"
